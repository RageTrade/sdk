/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../common';
import type {
  SwapRouterMock,
  SwapRouterMockInterface,
} from '../../../contracts/mocks/SwapRouterMock';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'path',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountIn',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOutMinimum',
            type: 'uint256',
          },
        ],
        internalType: 'struct ISwapRouter.ExactInputParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactInput',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'tokenIn',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'tokenOut',
            type: 'address',
          },
          {
            internalType: 'uint24',
            name: 'fee',
            type: 'uint24',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountIn',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOutMinimum',
            type: 'uint256',
          },
          {
            internalType: 'uint160',
            name: 'sqrtPriceLimitX96',
            type: 'uint160',
          },
        ],
        internalType: 'struct ISwapRouter.ExactInputSingleParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactInputSingle',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'path',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOut',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountInMaximum',
            type: 'uint256',
          },
        ],
        internalType: 'struct ISwapRouter.ExactOutputParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactOutput',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountIn',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'tokenIn',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'tokenOut',
            type: 'address',
          },
          {
            internalType: 'uint24',
            name: 'fee',
            type: 'uint24',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOut',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountInMaximum',
            type: 'uint256',
          },
          {
            internalType: 'uint160',
            name: 'sqrtPriceLimitX96',
            type: 'uint160',
          },
        ],
        internalType: 'struct ISwapRouter.ExactOutputSingleParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactOutputSingle',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountIn',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506107e8806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063414bf38914610051578063c04b8d5914610076578063db3e219814610089578063f28c04981461009c575b600080fd5b61006461005f36600461067c565b6100af565b60405190815260200160405180910390f35b6100646100843660046106b2565b6101cb565b61006461009736600461067c565b6103d4565b6100646100aa3660046106b2565b6104a8565b60006100be60208301836106ef565b6040516323b872dd60e01b815233600482015230602482015260a084013560448201526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015610116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013a9190610718565b5061014b60408301602084016106ef565b60405163a9059cbb60e01b815233600482015260c084013560248201526001600160a01b03919091169063a9059cbb906044015b6020604051808303816000875af115801561019e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c29190610718565b505060c0013590565b60008080806101da858061073a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051929350610250927382af49447d8a07e3bd95bd0d56f35241523fbab192506101f4915073ff970a61a04b1ca14834a43f5de4533ebddb5cc890602001610788565b604051602081830303815290604052805190602001208180519060200120036102a6577382af49447d8a07e3bd95bd0d56f35241523fbab1915073ff970a61a04b1ca14834a43f5de4533ebddb5cc892506102d5565b732f2a2543b76a4166549f7aab2e75bef0aefc5b0f915073ff970a61a04b1ca14834a43f5de4533ebddb5cc892505b6040516323b872dd60e01b8152336004820152306024820152606086013560448201526001600160a01b038316906323b872dd906064016020604051808303816000875af115801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f9190610718565b5060405163a9059cbb60e01b8152336004820152608086013560248201526001600160a01b0384169063a9059cbb906044015b6020604051808303816000875af11580156103a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c59190610718565b50505060809092013592915050565b60006103e360208301836106ef565b6040516323b872dd60e01b815233600482015230602482015260c084013560448201526001600160a01b0391909116906323b872dd906064016020604051808303816000875af115801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f9190610718565b5061047060408301602084016106ef565b60405163a9059cbb60e01b815233600482015260a084013560248201526001600160a01b03919091169063a9059cbb9060440161017f565b60008080806104b7858061073a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405192935061052d927382af49447d8a07e3bd95bd0d56f35241523fbab192506101f4915073ff970a61a04b1ca14834a43f5de4533ebddb5cc890602001610788565b604051602081830303815290604052805190602001208180519060200120036105835773ff970a61a04b1ca14834a43f5de4533ebddb5cc891507382af49447d8a07e3bd95bd0d56f35241523fbab192506105b2565b73ff970a61a04b1ca14834a43f5de4533ebddb5cc89150732f2a2543b76a4166549f7aab2e75bef0aefc5b0f92505b6040516323b872dd60e01b8152336004820152306024820152608086013560448201526001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062c9190610718565b5060405163a9059cbb60e01b8152336004820152606086013560248201526001600160a01b0384169063a9059cbb90604401610382565b6000610100828403121561067657600080fd5b50919050565b6000610100828403121561068f57600080fd5b6106998383610663565b9392505050565b600060a0828403121561067657600080fd5b6000602082840312156106c457600080fd5b813567ffffffffffffffff8111156106db57600080fd5b6106e7848285016106a0565b949350505050565b60006020828403121561070157600080fd5b81356001600160a01b038116811461069957600080fd5b60006020828403121561072a57600080fd5b8151801515811461069957600080fd5b6000808335601e1984360301811261075157600080fd5b83018035915067ffffffffffffffff82111561076c57600080fd5b60200191503681900382131561078157600080fd5b9250929050565b606093841b6bffffffffffffffffffffffff19908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b019056fea164736f6c6343000811000a';

type SwapRouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapRouterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapRouterMock__factory extends ContractFactory {
  constructor(...args: SwapRouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapRouterMock> {
    return super.deploy(overrides || {}) as Promise<SwapRouterMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapRouterMock {
    return super.attach(address) as SwapRouterMock;
  }
  override connect(signer: Signer): SwapRouterMock__factory {
    return super.connect(signer) as SwapRouterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapRouterMockInterface {
    return new utils.Interface(_abi) as SwapRouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapRouterMock {
    return new Contract(address, _abi, signerOrProvider) as SwapRouterMock;
  }
}
