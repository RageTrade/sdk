/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../common';
import type {
  StableSwapMock,
  StableSwapMockInterface,
} from '../../../contracts/mocks/StableSwapMock';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'InsufficientOutput',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SwapNotAllowed',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'coins',
    outputs: [
      {
        internalType: 'contract IERC20',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'i',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'j',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'dx',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'min_dy',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'use_eth',
        type: 'bool',
      },
    ],
    name: 'exchange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_price',
        type: 'uint256',
      },
    ],
    name: 'setPrice',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980546001600160a01b031990811673fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9179091557fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80548216732f2a2543b76a4166549f7aab2e75bef0aefc5b0f17905560026000527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f80549091167382af49447d8a07e3bd95bd0d56f35241523fbab1179055610382806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063394747c51461004657806391b7f5ed1461005b578063c66106571461006e575b600080fd5b61005961005436600461029e565b6100b3565b005b6100596100693660046102eb565b600055565b61009761007c3660046102eb565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b80156100d257604051630dd99c5560e01b815260040160405180910390fd5b841580156100e05750836001145b806100f457508460011480156100f4575083155b61011157604051630dd99c5560e01b815260040160405180910390fd5b600085815260016020526040908190205490516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101999190610304565b50600085156101c4576305f5e100600054856101b59190610328565b6101bf9190610353565b6101df565b6000546101d5856305f5e100610328565b6101df9190610353565b9050828110156102025760405163bb2875c360e01b815260040160405180910390fd5b6000858152600160205260409081902054905163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102849190610304565b50505050505050565b801515811461029b57600080fd5b50565b600080600080600060a086880312156102b657600080fd5b8535945060208601359350604086013592506060860135915060808601356102dd8161028d565b809150509295509295909350565b6000602082840312156102fd57600080fd5b5035919050565b60006020828403121561031657600080fd5b81516103218161028d565b9392505050565b808202811582820484141761034d57634e487b7160e01b600052601160045260246000fd5b92915050565b60008261037057634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c6343000811000a';

type StableSwapMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StableSwapMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StableSwapMock__factory extends ContractFactory {
  constructor(...args: StableSwapMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StableSwapMock> {
    return super.deploy(overrides || {}) as Promise<StableSwapMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StableSwapMock {
    return super.attach(address) as StableSwapMock;
  }
  override connect(signer: Signer): StableSwapMock__factory {
    return super.connect(signer) as StableSwapMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StableSwapMockInterface {
    return new utils.Interface(_abi) as StableSwapMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StableSwapMock {
    return new Contract(address, _abi, signerOrProvider) as StableSwapMock;
  }
}
