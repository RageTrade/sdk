/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../common';
import type {
  FeeSplitStrategyMock,
  FeeSplitStrategyMockInterface,
} from '../../../contracts/mocks/FeeSplitStrategyMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'availableLiquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'usedLiquidity',
        type: 'uint256',
      },
    ],
    name: 'calculateFeeSplit',
    outputs: [
      {
        internalType: 'uint256',
        name: 'feeSplitRate',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getMaxVariableBorrowRate',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'info',
    outputs: [
      {
        internalType: 'uint256',
        name: 'optimalUtilizationRate',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'baseVariableBorrowRate',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'variableRateSlope1',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'variableRateSlope2',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'optimalUtilizationRate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'baseVariableBorrowRate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'variableRateSlope1',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'variableRateSlope2',
            type: 'uint256',
          },
        ],
        internalType: 'struct FeeSplitStrategy.Info',
        name: '_info',
        type: 'tuple',
      },
    ],
    name: 'setFeeSplitStrategy',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061036e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063043922f114610051578063370158ea1461007f5780637558c28d146100ba57806380031e37146100db575b600080fd5b61007d61005f3660046102e2565b80356000556020810135600155604081013560025560600135600355565b005b6000546001546002546003546100959392919084565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b6100cd6100c83660046102fa565b6100e3565b6040519081526020016100b1565b6100cd6100f7565b60006100f0818484610108565b9392505050565b60006101036000610205565b905090565b6000808215610139576101346c0c9f2c9cd04674edea4000000061012c8587610332565b859190610230565b61013c565b60005b855490915060009061015b906c0c9f2c9cd04674edea4000000061034a565b86549091508211156101d85760006101926c0c9f2c9cd04674edea400000008389600001548661018b919061034a565b9190610230565b60038801549091506101b290826c0c9f2c9cd04674edea40000000610230565b876002015488600101546101c69190610332565b6101d09190610332565b9350506101fc565b600286015486546101ea918491610230565b86600101546101f99190610332565b92505b50509392505050565b60008160030154826002015483600101546102209190610332565b61022a9190610332565b92915050565b6000808060001985870985870292508281108382030391505080600003610269576000841161025e57600080fd5b5082900490506100f0565b80841161027557600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000608082840312156102f457600080fd5b50919050565b6000806040838503121561030d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b600082198211156103455761034561031c565b500190565b60008282101561035c5761035c61031c565b50039056fea164736f6c634300080e000a';

type FeeSplitStrategyMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeSplitStrategyMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeSplitStrategyMock__factory extends ContractFactory {
  constructor(...args: FeeSplitStrategyMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FeeSplitStrategyMock> {
    return super.deploy(overrides || {}) as Promise<FeeSplitStrategyMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FeeSplitStrategyMock {
    return super.attach(address) as FeeSplitStrategyMock;
  }
  override connect(signer: Signer): FeeSplitStrategyMock__factory {
    return super.connect(signer) as FeeSplitStrategyMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeSplitStrategyMockInterface {
    return new utils.Interface(_abi) as FeeSplitStrategyMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeSplitStrategyMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FeeSplitStrategyMock;
  }
}
