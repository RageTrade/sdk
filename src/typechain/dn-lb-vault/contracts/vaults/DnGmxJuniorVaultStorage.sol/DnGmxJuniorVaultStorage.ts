/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../common';

export interface DnGmxJuniorVaultStorageInterface extends utils.Interface {
  functions: {
    'FEE()': FunctionFragment;
    'MAX_BPS()': FunctionFragment;
    'PRICE_PRECISION()': FunctionFragment;
    'USDG_DECIMALS()': FunctionFragment;
    'VARIABLE_INTEREST_MODE()': FunctionFragment;
    'WETH_DECIMALS()': FunctionFragment;
    'depositCap()': FunctionFragment;
    'dnGmxSeniorVault()': FunctionFragment;
    'feeRecipient()': FunctionFragment;
    'keeper()': FunctionFragment;
    'lastRebalanceTS()': FunctionFragment;
    'protocolFee()': FunctionFragment;
    'rebalanceDeltaThreshold()': FunctionFragment;
    'rebalanceTimeThreshold()': FunctionFragment;
    'seniorVaultWethConversionThreshold()': FunctionFragment;
    'seniorVaultWethRewards()': FunctionFragment;
    'slippageThreshold()': FunctionFragment;
    'usdcConversionThreshold()': FunctionFragment;
    'usdcRedeemSlippage()': FunctionFragment;
    'wethThreshold()': FunctionFragment;
    'withdrawFeeBps()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'FEE'
      | 'MAX_BPS'
      | 'PRICE_PRECISION'
      | 'USDG_DECIMALS'
      | 'VARIABLE_INTEREST_MODE'
      | 'WETH_DECIMALS'
      | 'depositCap'
      | 'dnGmxSeniorVault'
      | 'feeRecipient'
      | 'keeper'
      | 'lastRebalanceTS'
      | 'protocolFee'
      | 'rebalanceDeltaThreshold'
      | 'rebalanceTimeThreshold'
      | 'seniorVaultWethConversionThreshold'
      | 'seniorVaultWethRewards'
      | 'slippageThreshold'
      | 'usdcConversionThreshold'
      | 'usdcRedeemSlippage'
      | 'wethThreshold'
      | 'withdrawFeeBps'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BPS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'PRICE_PRECISION',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'USDG_DECIMALS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'VARIABLE_INTEREST_MODE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'WETH_DECIMALS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCap',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'dnGmxSeniorVault',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'feeRecipient',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lastRebalanceTS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolFee',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceDeltaThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceTimeThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'seniorVaultWethConversionThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'seniorVaultWethRewards',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'slippageThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'usdcConversionThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'usdcRedeemSlippage',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'wethThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFeeBps',
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: 'FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BPS', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'PRICE_PRECISION',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'USDG_DECIMALS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'VARIABLE_INTEREST_MODE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'WETH_DECIMALS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'depositCap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'dnGmxSeniorVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeRecipient',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastRebalanceTS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolFee',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceDeltaThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceTimeThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'seniorVaultWethConversionThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'seniorVaultWethRewards',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'slippageThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'usdcConversionThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'usdcRedeemSlippage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'wethThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawFeeBps',
    data: BytesLike
  ): Result;

  events: {};
}

export interface DnGmxJuniorVaultStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DnGmxJuniorVaultStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BPS(overrides?: CallOverrides): Promise<[number]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    VARIABLE_INTEREST_MODE(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    dnGmxSeniorVault(overrides?: CallOverrides): Promise<[string]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebalanceDeltaThreshold(overrides?: CallOverrides): Promise<[number]>;

    rebalanceTimeThreshold(overrides?: CallOverrides): Promise<[number]>;

    seniorVaultWethConversionThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    seniorVaultWethRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    slippageThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    usdcConversionThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    usdcRedeemSlippage(overrides?: CallOverrides): Promise<[number]>;

    wethThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeeBps(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BPS(overrides?: CallOverrides): Promise<number>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  VARIABLE_INTEREST_MODE(overrides?: CallOverrides): Promise<BigNumber>;

  WETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  depositCap(overrides?: CallOverrides): Promise<BigNumber>;

  dnGmxSeniorVault(overrides?: CallOverrides): Promise<string>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  keeper(overrides?: CallOverrides): Promise<string>;

  lastRebalanceTS(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  rebalanceDeltaThreshold(overrides?: CallOverrides): Promise<number>;

  rebalanceTimeThreshold(overrides?: CallOverrides): Promise<number>;

  seniorVaultWethConversionThreshold(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seniorVaultWethRewards(overrides?: CallOverrides): Promise<BigNumber>;

  slippageThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  usdcConversionThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  usdcRedeemSlippage(overrides?: CallOverrides): Promise<number>;

  wethThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<number>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    VARIABLE_INTEREST_MODE(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    dnGmxSeniorVault(overrides?: CallOverrides): Promise<string>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    keeper(overrides?: CallOverrides): Promise<string>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceDeltaThreshold(overrides?: CallOverrides): Promise<number>;

    rebalanceTimeThreshold(overrides?: CallOverrides): Promise<number>;

    seniorVaultWethConversionThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seniorVaultWethRewards(overrides?: CallOverrides): Promise<BigNumber>;

    slippageThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    usdcConversionThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    usdcRedeemSlippage(overrides?: CallOverrides): Promise<number>;

    wethThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeBps(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    VARIABLE_INTEREST_MODE(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    dnGmxSeniorVault(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceDeltaThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceTimeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    seniorVaultWethConversionThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seniorVaultWethRewards(overrides?: CallOverrides): Promise<BigNumber>;

    slippageThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    usdcConversionThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    usdcRedeemSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    wethThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeBps(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VARIABLE_INTEREST_MODE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dnGmxSeniorVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalanceDeltaThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceTimeThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seniorVaultWethConversionThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seniorVaultWethRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slippageThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdcConversionThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdcRedeemSlippage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wethThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFeeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
