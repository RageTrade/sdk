/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../../../common';

export interface IBaseVaultGettersInterface extends utils.Interface {
  functions: {
    'closePositionSlippageSqrtToleranceBps()': FunctionFragment;
    'minNotionalPositionToCloseThreshold()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'closePositionSlippageSqrtToleranceBps'
      | 'minNotionalPositionToCloseThreshold'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'closePositionSlippageSqrtToleranceBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'minNotionalPositionToCloseThreshold',
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: 'closePositionSlippageSqrtToleranceBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'minNotionalPositionToCloseThreshold',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBaseVaultGetters extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBaseVaultGettersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    closePositionSlippageSqrtToleranceBps(
      overrides?: CallOverrides
    ): Promise<[number]>;

    minNotionalPositionToCloseThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  closePositionSlippageSqrtToleranceBps(
    overrides?: CallOverrides
  ): Promise<number>;

  minNotionalPositionToCloseThreshold(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    closePositionSlippageSqrtToleranceBps(
      overrides?: CallOverrides
    ): Promise<number>;

    minNotionalPositionToCloseThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    closePositionSlippageSqrtToleranceBps(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minNotionalPositionToCloseThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closePositionSlippageSqrtToleranceBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minNotionalPositionToCloseThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
