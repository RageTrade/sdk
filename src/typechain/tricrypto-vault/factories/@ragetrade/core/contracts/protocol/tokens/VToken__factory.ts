/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../../../../common';
import type {
  VToken,
  VTokenInterface,
} from '../../../../../../@ragetrade/core/contracts/protocol/tokens/VToken';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'vTokenName',
        type: 'string',
      },
      {
        internalType: 'string',
        name: 'vTokenSymbol',
        type: 'string',
      },
      {
        internalType: 'uint8',
        name: 'cTokenDecimals',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'Unauthorised',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'burn',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'subtractedValue',
        type: 'uint256',
      },
    ],
    name: 'decreaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'addedValue',
        type: 'uint256',
      },
    ],
    name: 'increaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'receiver',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_vPoolWrapper',
        type: 'address',
      },
    ],
    name: 'setVPoolWrapper',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'vPoolWrapper',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60a06040523480156200001157600080fd5b50604051620011ef380380620011ef833981016040819052620000349162000258565b8251839083906200004d906003906020850190620000e5565b50805162000063906004906020840190620000e5565b505050620000806200007a6200008f60201b60201c565b62000093565b60ff1660805250620003199050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000f390620002dd565b90600052602060002090601f01602090048101928262000117576000855562000162565b82601f106200013257805160ff191683800117855562000162565b8280016001018555821562000162579182015b828111156200016257825182559160200191906001019062000145565b506200017092915062000174565b5090565b5b8082111562000170576000815560010162000175565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001b357600080fd5b81516001600160401b0380821115620001d057620001d06200018b565b604051601f8301601f19908116603f01168101908282118183101715620001fb57620001fb6200018b565b816040528381526020925086838588010111156200021857600080fd5b600091505b838210156200023c57858201830151818301840152908201906200021d565b838211156200024e5760008385830101525b9695505050505050565b6000806000606084860312156200026e57600080fd5b83516001600160401b03808211156200028657600080fd5b6200029487838801620001a1565b94506020860151915080821115620002ab57600080fd5b50620002ba86828701620001a1565b925050604084015160ff81168114620002d257600080fd5b809150509250925092565b600181811c90821680620002f257607f821691505b6020821081036200031357634e487b7160e01b600052602260045260246000fd5b50919050565b608051610eba6200033560003960006101880152610eba6000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a2578063a9059cbb11610071578063a9059cbb1461025e578063d7adb4fe14610271578063dd62ed3e14610284578063df8685d214610297578063f2fde38b146102aa57600080fd5b8063715018a6146102165780638da5cb5b1461021e57806395d89b4114610243578063a457c2d71461024b57600080fd5b8063313ce567116100e9578063313ce5671461018157806339509351146101b257806340c10f19146101c557806342966c68146101da57806370a08231146101ed57600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd1461015c57806323b872dd1461016e575b600080fd5b6101236102bd565b6040516101309190610ce9565b60405180910390f35b61014c610147366004610d5a565b61034f565b6040519015158152602001610130565b6002545b604051908152602001610130565b61014c61017c366004610d84565b610367565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610130565b61014c6101c0366004610d5a565b61038b565b6101d86101d3366004610d5a565b6103ad565b005b6101d86101e8366004610dc0565b6103e6565b6101606101fb366004610dd9565b6001600160a01b031660009081526020819052604090205490565b6101d86103f3565b6005546001600160a01b03165b6040516001600160a01b039091168152602001610130565b61012361045e565b61014c610259366004610d5a565b61046d565b61014c61026c366004610d5a565b6104e8565b6101d861027f366004610dd9565b6104f6565b610160610292366004610dfb565b610580565b60065461022b906001600160a01b031681565b6101d86102b8366004610dd9565b6105ab565b6060600380546102cc90610e2e565b80601f01602080910402602001604051908101604052809291908181526020018280546102f890610e2e565b80156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b60003361035d818585610673565b5060019392505050565b600033610375858285610798565b610380858585610812565b506001949350505050565b60003361035d81858561039e8383610580565b6103a89190610e7e565b610673565b6006546001600160a01b031633146103d857604051636bd1573560e11b815260040160405180910390fd5b6103e282826109eb565b5050565b6103f03382610ad6565b50565b6005546001600160a01b031633146104525760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61045c6000610c2d565b565b6060600480546102cc90610e2e565b6000338161047b8286610580565b9050838110156104db5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610449565b6103808286868403610673565b60003361035d818585610812565b6005546001600160a01b031633146105505760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610449565b6006546001600160a01b03166103f057600680546001600160a01b0383166001600160a01b031990911617905550565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6005546001600160a01b031633146106055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610449565b6001600160a01b03811661066a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610449565b6103f081610c2d565b6001600160a01b0383166106d55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610449565b6001600160a01b0382166107365760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610449565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006107a48484610580565b9050600019811461080c57818110156107ff5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610449565b61080c8484848403610673565b50505050565b6001600160a01b0383166108765760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610449565b6001600160a01b0382166108d85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610449565b6108e3838383610c7f565b6001600160a01b0383166000908152602081905260409020548181101561095b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610449565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610992908490610e7e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109de91815260200190565b60405180910390a361080c565b6001600160a01b038216610a415760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610449565b610a4d60008383610c7f565b8060026000828254610a5f9190610e7e565b90915550506001600160a01b03821660009081526020819052604081208054839290610a8c908490610e7e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610b365760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610449565b610b4282600083610c7f565b6001600160a01b03821660009081526020819052604090205481811015610bb65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610449565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610be5908490610e96565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161078b565b505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0383161580610c9c57506001600160a01b038216155b80610cb457506006546001600160a01b038481169116145b80610ccc57506006546001600160a01b038381169116145b610c2857604051636bd1573560e11b815260040160405180910390fd5b600060208083528351808285015260005b81811015610d1657858101830151858201604001528201610cfa565b81811115610d28576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610d5557600080fd5b919050565b60008060408385031215610d6d57600080fd5b610d7683610d3e565b946020939093013593505050565b600080600060608486031215610d9957600080fd5b610da284610d3e565b9250610db060208501610d3e565b9150604084013590509250925092565b600060208284031215610dd257600080fd5b5035919050565b600060208284031215610deb57600080fd5b610df482610d3e565b9392505050565b60008060408385031215610e0e57600080fd5b610e1783610d3e565b9150610e2560208401610d3e565b90509250929050565b600181811c90821680610e4257607f821691505b602082108103610e6257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610e9157610e91610e68565b500190565b600082821015610ea857610ea8610e68565b50039056fea164736f6c634300080e000a';

type VTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VToken__factory extends ContractFactory {
  constructor(...args: VTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vTokenName: PromiseOrValue<string>,
    vTokenSymbol: PromiseOrValue<string>,
    cTokenDecimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VToken> {
    return super.deploy(
      vTokenName,
      vTokenSymbol,
      cTokenDecimals,
      overrides || {}
    ) as Promise<VToken>;
  }
  override getDeployTransaction(
    vTokenName: PromiseOrValue<string>,
    vTokenSymbol: PromiseOrValue<string>,
    cTokenDecimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vTokenName,
      vTokenSymbol,
      cTokenDecimals,
      overrides || {}
    );
  }
  override attach(address: string): VToken {
    return super.attach(address) as VToken;
  }
  override connect(signer: Signer): VToken__factory {
    return super.connect(signer) as VToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VTokenInterface {
    return new utils.Interface(_abi) as VTokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): VToken {
    return new Contract(address, _abi, signerOrProvider) as VToken;
  }
}
