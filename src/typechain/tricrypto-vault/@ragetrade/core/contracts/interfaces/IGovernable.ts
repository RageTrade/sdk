/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../../common';

export interface IGovernableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'acceptGovernanceTransfer'
      | 'acceptTeamMultisigTransfer'
      | 'governance'
      | 'governancePending'
      | 'initiateGovernanceTransfer'
      | 'initiateTeamMultisigTransfer'
      | 'teamMultisig'
      | 'teamMultisigPending'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'acceptGovernanceTransfer',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'acceptTeamMultisigTransfer',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'governance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'governancePending',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateGovernanceTransfer',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateTeamMultisigTransfer',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'teamMultisig',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'teamMultisigPending',
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: 'acceptGovernanceTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'acceptTeamMultisigTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'governancePending',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateGovernanceTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateTeamMultisigTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'teamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'teamMultisigPending',
    data: BytesLike
  ): Result;
}

export interface IGovernable extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: IGovernableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptGovernanceTransfer: TypedContractMethod<[], [void], 'nonpayable'>;

  acceptTeamMultisigTransfer: TypedContractMethod<[], [void], 'nonpayable'>;

  governance: TypedContractMethod<[], [string], 'view'>;

  governancePending: TypedContractMethod<[], [string], 'view'>;

  initiateGovernanceTransfer: TypedContractMethod<
    [newGovernancePending: AddressLike],
    [void],
    'nonpayable'
  >;

  initiateTeamMultisigTransfer: TypedContractMethod<
    [newTeamMultisigPending: AddressLike],
    [void],
    'nonpayable'
  >;

  teamMultisig: TypedContractMethod<[], [string], 'view'>;

  teamMultisigPending: TypedContractMethod<[], [string], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'acceptGovernanceTransfer'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'acceptTeamMultisigTransfer'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'governance'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'governancePending'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'initiateGovernanceTransfer'
  ): TypedContractMethod<
    [newGovernancePending: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'initiateTeamMultisigTransfer'
  ): TypedContractMethod<
    [newTeamMultisigPending: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'teamMultisig'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'teamMultisigPending'
  ): TypedContractMethod<[], [string], 'view'>;

  filters: {};
}
