/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../../common';

export declare namespace IClearingHouseStructures {
  export type TickRangeStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
  };

  export type TickRangeStructOutput = [tickLower: bigint, tickUpper: bigint] & {
    tickLower: bigint;
    tickUpper: bigint;
  };

  export type CollateralSettingsStruct = {
    oracle: AddressLike;
    twapDuration: BigNumberish;
    isAllowedForDeposit: boolean;
  };

  export type CollateralSettingsStructOutput = [
    oracle: string,
    twapDuration: bigint,
    isAllowedForDeposit: boolean
  ] & { oracle: string; twapDuration: bigint; isAllowedForDeposit: boolean };

  export type CollateralStruct = {
    token: AddressLike;
    settings: IClearingHouseStructures.CollateralSettingsStruct;
  };

  export type CollateralStructOutput = [
    token: string,
    settings: IClearingHouseStructures.CollateralSettingsStructOutput
  ] & {
    token: string;
    settings: IClearingHouseStructures.CollateralSettingsStructOutput;
  };

  export type PoolSettingsStruct = {
    initialMarginRatioBps: BigNumberish;
    maintainanceMarginRatioBps: BigNumberish;
    maxVirtualPriceDeviationRatioBps: BigNumberish;
    twapDuration: BigNumberish;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: AddressLike;
  };

  export type PoolSettingsStructOutput = [
    initialMarginRatioBps: bigint,
    maintainanceMarginRatioBps: bigint,
    maxVirtualPriceDeviationRatioBps: bigint,
    twapDuration: bigint,
    isAllowedForTrade: boolean,
    isCrossMargined: boolean,
    oracle: string
  ] & {
    initialMarginRatioBps: bigint;
    maintainanceMarginRatioBps: bigint;
    maxVirtualPriceDeviationRatioBps: bigint;
    twapDuration: bigint;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type PoolStruct = {
    vToken: AddressLike;
    vPool: AddressLike;
    vPoolWrapper: AddressLike;
    settings: IClearingHouseStructures.PoolSettingsStruct;
  };

  export type PoolStructOutput = [
    vToken: string,
    vPool: string,
    vPoolWrapper: string,
    settings: IClearingHouseStructures.PoolSettingsStructOutput
  ] & {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  };

  export type LiquidationParamsStruct = {
    rangeLiquidationFeeFraction: BigNumberish;
    tokenLiquidationFeeFraction: BigNumberish;
    closeFactorMMThresholdBps: BigNumberish;
    partialLiquidationCloseFactorBps: BigNumberish;
    insuranceFundFeeShareBps: BigNumberish;
    liquidationSlippageSqrtToleranceBps: BigNumberish;
    maxRangeLiquidationFees: BigNumberish;
    minNotionalLiquidatable: BigNumberish;
  };

  export type LiquidationParamsStructOutput = [
    rangeLiquidationFeeFraction: bigint,
    tokenLiquidationFeeFraction: bigint,
    closeFactorMMThresholdBps: bigint,
    partialLiquidationCloseFactorBps: bigint,
    insuranceFundFeeShareBps: bigint,
    liquidationSlippageSqrtToleranceBps: bigint,
    maxRangeLiquidationFees: bigint,
    minNotionalLiquidatable: bigint
  ] & {
    rangeLiquidationFeeFraction: bigint;
    tokenLiquidationFeeFraction: bigint;
    closeFactorMMThresholdBps: bigint;
    partialLiquidationCloseFactorBps: bigint;
    insuranceFundFeeShareBps: bigint;
    liquidationSlippageSqrtToleranceBps: bigint;
    maxRangeLiquidationFees: bigint;
    minNotionalLiquidatable: bigint;
  };
}

export interface ClearingHouseLensInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'clearingHouse'
      | 'getAccountCollateralBalance'
      | 'getAccountCollateralInfo'
      | 'getAccountInfo'
      | 'getAccountLiquidityPositionInfo'
      | 'getAccountLiquidityPositionList'
      | 'getAccountPositionInfo'
      | 'getAccountTokenPositionInfo'
      | 'getCollateralInfo'
      | 'getPoolInfo'
      | 'getPoolSettings'
      | 'getProtocolInfo'
      | 'getTwapDuration'
      | 'getVPool'
      | 'getVPoolAndTwapDuration'
      | 'isPoolIdAvailable'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'clearingHouse',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountCollateralBalance',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountCollateralInfo',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountLiquidityPositionInfo',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountLiquidityPositionList',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountPositionInfo',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountTokenPositionInfo',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCollateralInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolSettings',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getProtocolInfo',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getTwapDuration',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVPool',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVPoolAndTwapDuration',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'isPoolIdAvailable',
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'clearingHouse',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountCollateralBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountCollateralInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountLiquidityPositionInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountLiquidityPositionList',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountPositionInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountTokenPositionInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCollateralInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPoolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPoolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProtocolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTwapDuration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getVPool', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getVPoolAndTwapDuration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isPoolIdAvailable',
    data: BytesLike
  ): Result;
}

export interface ClearingHouseLens extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: ClearingHouseLensInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  clearingHouse: TypedContractMethod<[], [string], 'view'>;

  getAccountCollateralBalance: TypedContractMethod<
    [accountId: BigNumberish, collateralId: BigNumberish],
    [bigint],
    'view'
  >;

  getAccountCollateralInfo: TypedContractMethod<
    [accountId: BigNumberish, collateralId: BigNumberish],
    [[string, bigint] & { collateral: string; balance: bigint }],
    'view'
  >;

  getAccountInfo: TypedContractMethod<
    [accountId: BigNumberish],
    [
      [string, bigint, bigint[], bigint[]] & {
        owner: string;
        vQuoteBalance: bigint;
        activeCollateralIds: bigint[];
        activePoolIds: bigint[];
      }
    ],
    'view'
  >;

  getAccountLiquidityPositionInfo: TypedContractMethod<
    [
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        limitOrderType: bigint;
        liquidity: bigint;
        vTokenAmountIn: bigint;
        sumALastX128: bigint;
        sumBInsideLastX128: bigint;
        sumFpInsideLastX128: bigint;
        sumFeeInsideLastX128: bigint;
      }
    ],
    'view'
  >;

  getAccountLiquidityPositionList: TypedContractMethod<
    [accountId: BigNumberish, poolId: BigNumberish],
    [IClearingHouseStructures.TickRangeStructOutput[]],
    'view'
  >;

  getAccountPositionInfo: TypedContractMethod<
    [accountId: BigNumberish, poolId: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        IClearingHouseStructures.TickRangeStructOutput[]
      ] & {
        balance: bigint;
        netTraderPosition: bigint;
        sumALastX128: bigint;
        activeTickRanges: IClearingHouseStructures.TickRangeStructOutput[];
      }
    ],
    'view'
  >;

  getAccountTokenPositionInfo: TypedContractMethod<
    [accountId: BigNumberish, poolId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        balance: bigint;
        netTraderPosition: bigint;
        sumALastX128: bigint;
      }
    ],
    'view'
  >;

  getCollateralInfo: TypedContractMethod<
    [collateralId: BigNumberish],
    [IClearingHouseStructures.CollateralStructOutput],
    'view'
  >;

  getPoolInfo: TypedContractMethod<
    [poolId: BigNumberish],
    [IClearingHouseStructures.PoolStructOutput],
    'view'
  >;

  getPoolSettings: TypedContractMethod<
    [poolId: BigNumberish],
    [IClearingHouseStructures.PoolSettingsStructOutput],
    'view'
  >;

  getProtocolInfo: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        bigint,
        bigint,
        bigint
      ] & {
        settlementToken: string;
        vQuote: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: bigint;
        removeLimitOrderFee: bigint;
        minimumOrderNotional: bigint;
      }
    ],
    'view'
  >;

  getTwapDuration: TypedContractMethod<
    [poolId: BigNumberish],
    [bigint],
    'view'
  >;

  getVPool: TypedContractMethod<[poolId: BigNumberish], [string], 'view'>;

  getVPoolAndTwapDuration: TypedContractMethod<
    [poolId: BigNumberish],
    [[string, bigint] & { vPool: string; twapDuration: bigint }],
    'view'
  >;

  isPoolIdAvailable: TypedContractMethod<
    [poolId: BigNumberish],
    [boolean],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'clearingHouse'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getAccountCollateralBalance'
  ): TypedContractMethod<
    [accountId: BigNumberish, collateralId: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getAccountCollateralInfo'
  ): TypedContractMethod<
    [accountId: BigNumberish, collateralId: BigNumberish],
    [[string, bigint] & { collateral: string; balance: bigint }],
    'view'
  >;
  getFunction(nameOrSignature: 'getAccountInfo'): TypedContractMethod<
    [accountId: BigNumberish],
    [
      [string, bigint, bigint[], bigint[]] & {
        owner: string;
        vQuoteBalance: bigint;
        activeCollateralIds: bigint[];
        activePoolIds: bigint[];
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getAccountLiquidityPositionInfo'
  ): TypedContractMethod<
    [
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish
    ],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        limitOrderType: bigint;
        liquidity: bigint;
        vTokenAmountIn: bigint;
        sumALastX128: bigint;
        sumBInsideLastX128: bigint;
        sumFpInsideLastX128: bigint;
        sumFeeInsideLastX128: bigint;
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getAccountLiquidityPositionList'
  ): TypedContractMethod<
    [accountId: BigNumberish, poolId: BigNumberish],
    [IClearingHouseStructures.TickRangeStructOutput[]],
    'view'
  >;
  getFunction(nameOrSignature: 'getAccountPositionInfo'): TypedContractMethod<
    [accountId: BigNumberish, poolId: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        IClearingHouseStructures.TickRangeStructOutput[]
      ] & {
        balance: bigint;
        netTraderPosition: bigint;
        sumALastX128: bigint;
        activeTickRanges: IClearingHouseStructures.TickRangeStructOutput[];
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getAccountTokenPositionInfo'
  ): TypedContractMethod<
    [accountId: BigNumberish, poolId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        balance: bigint;
        netTraderPosition: bigint;
        sumALastX128: bigint;
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getCollateralInfo'
  ): TypedContractMethod<
    [collateralId: BigNumberish],
    [IClearingHouseStructures.CollateralStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getPoolInfo'
  ): TypedContractMethod<
    [poolId: BigNumberish],
    [IClearingHouseStructures.PoolStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getPoolSettings'
  ): TypedContractMethod<
    [poolId: BigNumberish],
    [IClearingHouseStructures.PoolSettingsStructOutput],
    'view'
  >;
  getFunction(nameOrSignature: 'getProtocolInfo'): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        bigint,
        bigint,
        bigint
      ] & {
        settlementToken: string;
        vQuote: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: bigint;
        removeLimitOrderFee: bigint;
        minimumOrderNotional: bigint;
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getTwapDuration'
  ): TypedContractMethod<[poolId: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getVPool'
  ): TypedContractMethod<[poolId: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getVPoolAndTwapDuration'
  ): TypedContractMethod<
    [poolId: BigNumberish],
    [[string, bigint] & { vPool: string; twapDuration: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'isPoolIdAvailable'
  ): TypedContractMethod<[poolId: BigNumberish], [boolean], 'view'>;

  filters: {};
}
