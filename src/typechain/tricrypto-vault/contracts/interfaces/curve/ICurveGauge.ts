/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export interface ICurveGaugeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'balanceOf'
      | 'claim_rewards(address)'
      | 'claim_rewards(address,address)'
      | 'claim_rewards()'
      | 'claimable_reward'
      | 'claimable_reward_write'
      | 'claimable_tokens'
      | 'deposit(uint256,address)'
      | 'deposit(uint256)'
      | 'integrate_fraction'
      | 'withdraw(uint256)'
      | 'withdraw(uint256,bool)'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'claim_rewards(address)',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'claim_rewards(address,address)',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'claim_rewards()',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'claimable_reward',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimable_reward_write',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimable_tokens',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256,address)',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256)',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'integrate_fraction',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw(uint256)',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw(uint256,bool)',
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'claim_rewards(address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claim_rewards(address,address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claim_rewards()',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimable_reward',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimable_reward_write',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimable_tokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deposit(uint256,address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deposit(uint256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'integrate_fraction',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdraw(uint256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdraw(uint256,bool)',
    data: BytesLike
  ): Result;
}

export interface ICurveGauge extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: ICurveGaugeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;

  'claim_rewards(address)': TypedContractMethod<
    [addr: AddressLike],
    [void],
    'nonpayable'
  >;

  'claim_rewards(address,address)': TypedContractMethod<
    [addr: AddressLike, receiver: AddressLike],
    [void],
    'nonpayable'
  >;

  'claim_rewards()': TypedContractMethod<[], [void], 'nonpayable'>;

  claimable_reward: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    'view'
  >;

  claimable_reward_write: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    'nonpayable'
  >;

  claimable_tokens: TypedContractMethod<
    [addr: AddressLike],
    [bigint],
    'nonpayable'
  >;

  'deposit(uint256,address)': TypedContractMethod<
    [_value: BigNumberish, addr: AddressLike],
    [void],
    'nonpayable'
  >;

  'deposit(uint256)': TypedContractMethod<
    [_value: BigNumberish],
    [void],
    'nonpayable'
  >;

  integrate_fraction: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    'view'
  >;

  'withdraw(uint256)': TypedContractMethod<
    [_value: BigNumberish],
    [void],
    'nonpayable'
  >;

  'withdraw(uint256,bool)': TypedContractMethod<
    [_value: BigNumberish, claim_rewards: boolean],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'balanceOf'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'claim_rewards(address)'
  ): TypedContractMethod<[addr: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'claim_rewards(address,address)'
  ): TypedContractMethod<
    [addr: AddressLike, receiver: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'claim_rewards()'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'claimable_reward'
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'claimable_reward_write'
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'claimable_tokens'
  ): TypedContractMethod<[addr: AddressLike], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'deposit(uint256,address)'
  ): TypedContractMethod<
    [_value: BigNumberish, addr: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'deposit(uint256)'
  ): TypedContractMethod<[_value: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'integrate_fraction'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'withdraw(uint256)'
  ): TypedContractMethod<[_value: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'withdraw(uint256,bool)'
  ): TypedContractMethod<
    [_value: BigNumberish, claim_rewards: boolean],
    [void],
    'nonpayable'
  >;

  filters: {};
}
