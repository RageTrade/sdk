/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export declare namespace RageERC4626 {
  export type RageERC4626InitParamsStruct = {
    asset: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
  };

  export type RageERC4626InitParamsStructOutput = [string, string, string] & {
    asset: string;
    name: string;
    symbol: string;
  };
}

export declare namespace BaseVault {
  export type BaseVaultInitParamsStruct = {
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStruct;
    ethPoolId: PromiseOrValue<BigNumberish>;
    swapSimulator: PromiseOrValue<string>;
    rageClearingHouse: PromiseOrValue<string>;
    clearingHouseLens: PromiseOrValue<string>;
    rageCollateralToken: PromiseOrValue<string>;
    rageSettlementToken: PromiseOrValue<string>;
  };

  export type BaseVaultInitParamsStructOutput = [
    RageERC4626.RageERC4626InitParamsStructOutput,
    number,
    string,
    string,
    string,
    string,
    string
  ] & {
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStructOutput;
    ethPoolId: number;
    swapSimulator: string;
    rageClearingHouse: string;
    clearingHouseLens: string;
    rageCollateralToken: string;
    rageSettlementToken: string;
  };
}

export declare namespace EightyTwentyRangeStrategyVault {
  export type EightyTwentyRangeStrategyVaultInitParamsStruct = {
    baseVaultInitParams: BaseVault.BaseVaultInitParamsStruct;
    closePositionSlippageSqrtToleranceBps: PromiseOrValue<BigNumberish>;
    resetPositionThresholdBps: PromiseOrValue<BigNumberish>;
    minNotionalPositionToCloseThreshold: PromiseOrValue<BigNumberish>;
  };

  export type EightyTwentyRangeStrategyVaultInitParamsStructOutput = [
    BaseVault.BaseVaultInitParamsStructOutput,
    number,
    number,
    BigNumber
  ] & {
    baseVaultInitParams: BaseVault.BaseVaultInitParamsStructOutput;
    closePositionSlippageSqrtToleranceBps: number;
    resetPositionThresholdBps: number;
    minNotionalPositionToCloseThreshold: BigNumber;
  };
}

export declare namespace CurveYieldStrategy {
  export type CurveYieldStrategyInitParamsStruct = {
    eightyTwentyRangeStrategyVaultInitParams: EightyTwentyRangeStrategyVault.EightyTwentyRangeStrategyVaultInitParamsStruct;
    usdt: PromiseOrValue<string>;
    usdc: PromiseOrValue<string>;
    weth: PromiseOrValue<string>;
    crvToken: PromiseOrValue<string>;
    gauge: PromiseOrValue<string>;
    uniV3Router: PromiseOrValue<string>;
    lpPriceHolder: PromiseOrValue<string>;
    tricryptoPool: PromiseOrValue<string>;
  };

  export type CurveYieldStrategyInitParamsStructOutput = [
    EightyTwentyRangeStrategyVault.EightyTwentyRangeStrategyVaultInitParamsStructOutput,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    eightyTwentyRangeStrategyVaultInitParams: EightyTwentyRangeStrategyVault.EightyTwentyRangeStrategyVaultInitParamsStructOutput;
    usdt: string;
    usdc: string;
    weth: string;
    crvToken: string;
    gauge: string;
    uniV3Router: string;
    lpPriceHolder: string;
    tricryptoPool: string;
  };
}

export interface CurveYieldStrategyInterface extends utils.Interface {
  functions: {
    'FEE()': FunctionFragment;
    'MAX_BPS()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'baseLiquidity()': FunctionFragment;
    'baseTickLower()': FunctionFragment;
    'baseTickUpper()': FunctionFragment;
    'closePositionSlippageSqrtToleranceBps()': FunctionFragment;
    'closeTokenPosition()': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositCap()': FunctionFragment;
    'ethPoolId()': FunctionFragment;
    'extsload(bytes32)': FunctionFragment;
    'extsload(bytes32[])': FunctionFragment;
    'getMarketValue(uint256)': FunctionFragment;
    'getPriceX128()': FunctionFragment;
    'getVaultMarketValue()': FunctionFragment;
    'grantAllowances()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(((((address,string,string),uint32,address,address,address,address,address),uint16,uint16,uint64),address,address,address,address,address,address,address,address))': FunctionFragment;
    'isReset()': FunctionFragment;
    'isValidRebalance(int256)': FunctionFragment;
    'keeper()': FunctionFragment;
    'lastRebalanceTS()': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'migrate()': FunctionFragment;
    'minNotionalPositionToCloseThreshold()': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'rageAccountNo()': FunctionFragment;
    'rageClearingHouse()': FunctionFragment;
    'rageVPool()': FunctionFragment;
    'rebalance()': FunctionFragment;
    'rebalancePriceThresholdBps()': FunctionFragment;
    'rebalanceTimeThreshold()': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setEightTwentyParams(uint16,uint16,uint64)': FunctionFragment;
    'swapSimulator()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateBaseParams(uint256,address,uint32,uint16)': FunctionFragment;
    'updateCurveParams(uint256,uint256,uint256,uint256,address,address)': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
    'withdrawFees(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'FEE'
      | 'MAX_BPS'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'baseLiquidity'
      | 'baseTickLower'
      | 'baseTickUpper'
      | 'closePositionSlippageSqrtToleranceBps'
      | 'closeTokenPosition'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositCap'
      | 'ethPoolId'
      | 'extsload(bytes32)'
      | 'extsload(bytes32[])'
      | 'getMarketValue'
      | 'getPriceX128'
      | 'getVaultMarketValue'
      | 'grantAllowances'
      | 'increaseAllowance'
      | 'initialize'
      | 'isReset'
      | 'isValidRebalance'
      | 'keeper'
      | 'lastRebalanceTS'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'migrate'
      | 'minNotionalPositionToCloseThreshold'
      | 'mint'
      | 'name'
      | 'owner'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'rageAccountNo'
      | 'rageClearingHouse'
      | 'rageVPool'
      | 'rebalance'
      | 'rebalancePriceThresholdBps'
      | 'rebalanceTimeThreshold'
      | 'redeem'
      | 'renounceOwnership'
      | 'setEightTwentyParams'
      | 'swapSimulator'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'updateBaseParams'
      | 'updateCurveParams'
      | 'withdraw'
      | 'withdrawFees'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BPS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'baseLiquidity',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'baseTickLower',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'baseTickUpper',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'closePositionSlippageSqrtToleranceBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'closeTokenPosition',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCap',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'ethPoolId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'extsload(bytes32)',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'extsload(bytes32[])',
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarketValue',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPriceX128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultMarketValue',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'grantAllowances',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [CurveYieldStrategy.CurveYieldStrategyInitParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: 'isReset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isValidRebalance',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lastRebalanceTS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'maxDeposit',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxMint',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxRedeem',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxWithdraw',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'migrate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'minNotionalPositionToCloseThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'rageAccountNo',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rageClearingHouse',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'rageVPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rebalance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rebalancePriceThresholdBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceTimeThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setEightTwentyParams',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapSimulator',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateBaseParams',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateCurveParams',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'baseLiquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'baseTickLower',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'baseTickUpper',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'closePositionSlippageSqrtToleranceBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'closeTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ethPoolId', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'extsload(bytes32)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'extsload(bytes32[])',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVaultMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'grantAllowances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isReset', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isValidRebalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastRebalanceTS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'minNotionalPositionToCloseThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewRedeem',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rageAccountNo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rageClearingHouse',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'rageVPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rebalancePriceThresholdBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceTimeThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setEightTwentyParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapSimulator',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateBaseParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateCurveParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
    'BaseParamsUpdated(uint256,address,uint32,uint16)': EventFragment;
    'CrvSwapFailedDueToSlippage(uint256)': EventFragment;
    'CurveParamsUpdated(uint256,uint256,uint256,uint256,address,address)': EventFragment;
    'EightyTwentyParamsUpdated(uint16,uint16,uint64)': EventFragment;
    'FeesUpdated(uint256)': EventFragment;
    'FeesWithdrawn(uint256)': EventFragment;
    'Harvested(uint256)': EventFragment;
    'Rebalance()': EventFragment;
    'Staked(uint256,address)': EventFragment;
    'StateInfo(uint256)': EventFragment;
    'TokenPositionClosed()': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BaseParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CrvSwapFailedDueToSlippage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CurveParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EightyTwentyParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeesUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeesWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Rebalance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StateInfo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenPositionClosed'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface BaseParamsUpdatedEventObject {
  newDepositCap: BigNumber;
  newKeeperAddress: string;
  rebalanceTimeThreshold: number;
  rebalancePriceThresholdBps: number;
}
export type BaseParamsUpdatedEvent = TypedEvent<
  [BigNumber, string, number, number],
  BaseParamsUpdatedEventObject
>;

export type BaseParamsUpdatedEventFilter =
  TypedEventFilter<BaseParamsUpdatedEvent>;

export interface CrvSwapFailedDueToSlippageEventObject {
  crvSlippageTolerance: BigNumber;
}
export type CrvSwapFailedDueToSlippageEvent = TypedEvent<
  [BigNumber],
  CrvSwapFailedDueToSlippageEventObject
>;

export type CrvSwapFailedDueToSlippageEventFilter =
  TypedEventFilter<CrvSwapFailedDueToSlippageEvent>;

export interface CurveParamsUpdatedEventObject {
  feeBps: BigNumber;
  stablecoinSlippage: BigNumber;
  crvHarvestThreshold: BigNumber;
  crvSlippageTolerance: BigNumber;
  gauge: string;
  crvOracle: string;
}
export type CurveParamsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  CurveParamsUpdatedEventObject
>;

export type CurveParamsUpdatedEventFilter =
  TypedEventFilter<CurveParamsUpdatedEvent>;

export interface EightyTwentyParamsUpdatedEventObject {
  closePositionSlippageSqrtToleranceBps: number;
  resetPositionThresholdBps: number;
  minNotionalPositionToCloseThreshold: BigNumber;
}
export type EightyTwentyParamsUpdatedEvent = TypedEvent<
  [number, number, BigNumber],
  EightyTwentyParamsUpdatedEventObject
>;

export type EightyTwentyParamsUpdatedEventFilter =
  TypedEventFilter<EightyTwentyParamsUpdatedEvent>;

export interface FeesUpdatedEventObject {
  fee: BigNumber;
}
export type FeesUpdatedEvent = TypedEvent<[BigNumber], FeesUpdatedEventObject>;

export type FeesUpdatedEventFilter = TypedEventFilter<FeesUpdatedEvent>;

export interface FeesWithdrawnEventObject {
  total: BigNumber;
}
export type FeesWithdrawnEvent = TypedEvent<
  [BigNumber],
  FeesWithdrawnEventObject
>;

export type FeesWithdrawnEventFilter = TypedEventFilter<FeesWithdrawnEvent>;

export interface HarvestedEventObject {
  crvAmount: BigNumber;
}
export type HarvestedEvent = TypedEvent<[BigNumber], HarvestedEventObject>;

export type HarvestedEventFilter = TypedEventFilter<HarvestedEvent>;

export interface RebalanceEventObject {}
export type RebalanceEvent = TypedEvent<[], RebalanceEventObject>;

export type RebalanceEventFilter = TypedEventFilter<RebalanceEvent>;

export interface StakedEventObject {
  amount: BigNumber;
  depositor: string;
}
export type StakedEvent = TypedEvent<[BigNumber, string], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface StateInfoEventObject {
  lpPrice: BigNumber;
}
export type StateInfoEvent = TypedEvent<[BigNumber], StateInfoEventObject>;

export type StateInfoEventFilter = TypedEventFilter<StateInfoEvent>;

export interface TokenPositionClosedEventObject {}
export type TokenPositionClosedEvent = TypedEvent<
  [],
  TokenPositionClosedEventObject
>;

export type TokenPositionClosedEventFilter =
  TypedEventFilter<TokenPositionClosedEvent>;

export interface CurveYieldStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveYieldStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseTickLower(overrides?: CallOverrides): Promise<[number]>;

    baseTickUpper(overrides?: CallOverrides): Promise<[number]>;

    closePositionSlippageSqrtToleranceBps(
      overrides?: CallOverrides
    ): Promise<[number]>;

    closeTokenPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethPoolId(overrides?: CallOverrides): Promise<[number]>;

    'extsload(bytes32)'(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { val: string }>;

    'extsload(bytes32[])'(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getMarketValue(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marketValue: BigNumber }>;

    getPriceX128(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceX128: BigNumber }>;

    getVaultMarketValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { vaultMarketValue: BigNumber }>;

    grantAllowances(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      curveYieldStrategyInitParams: CurveYieldStrategy.CurveYieldStrategyInitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isReset(overrides?: CallOverrides): Promise<[boolean]>;

    isValidRebalance(
      vaultMarketValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    migrate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minNotionalPositionToCloseThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rageAccountNo(overrides?: CallOverrides): Promise<[BigNumber]>;

    rageClearingHouse(overrides?: CallOverrides): Promise<[string]>;

    rageVPool(overrides?: CallOverrides): Promise<[string]>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebalancePriceThresholdBps(overrides?: CallOverrides): Promise<[number]>;

    rebalanceTimeThreshold(overrides?: CallOverrides): Promise<[number]>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEightTwentyParams(
      _closePositionSlippageSqrtToleranceBps: PromiseOrValue<BigNumberish>,
      _resetPositionThresholdBps: PromiseOrValue<BigNumberish>,
      _minNotionalPositionToCloseThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapSimulator(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBaseParams(
      newDepositCap: PromiseOrValue<BigNumberish>,
      newKeeperAddress: PromiseOrValue<string>,
      _rebalanceTimeThreshold: PromiseOrValue<BigNumberish>,
      _rebalancePriceThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCurveParams(
      _feeBps: PromiseOrValue<BigNumberish>,
      _stablecoinSlippage: PromiseOrValue<BigNumberish>,
      _crvHarvestThreshold: PromiseOrValue<BigNumberish>,
      _crvSlippageTolerance: PromiseOrValue<BigNumberish>,
      _gauge: PromiseOrValue<string>,
      _crvOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  baseTickLower(overrides?: CallOverrides): Promise<number>;

  baseTickUpper(overrides?: CallOverrides): Promise<number>;

  closePositionSlippageSqrtToleranceBps(
    overrides?: CallOverrides
  ): Promise<number>;

  closeTokenPosition(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  convertToAssets(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositCap(overrides?: CallOverrides): Promise<BigNumber>;

  ethPoolId(overrides?: CallOverrides): Promise<number>;

  'extsload(bytes32)'(
    slot: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  'extsload(bytes32[])'(
    slots: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMarketValue(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

  grantAllowances(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    curveYieldStrategyInitParams: CurveYieldStrategy.CurveYieldStrategyInitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isReset(overrides?: CallOverrides): Promise<boolean>;

  isValidRebalance(
    vaultMarketValue: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keeper(overrides?: CallOverrides): Promise<string>;

  lastRebalanceTS(overrides?: CallOverrides): Promise<BigNumber>;

  maxDeposit(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxMint(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxRedeem(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxWithdraw(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  migrate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minNotionalPositionToCloseThreshold(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    shares: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  previewDeposit(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rageAccountNo(overrides?: CallOverrides): Promise<BigNumber>;

  rageClearingHouse(overrides?: CallOverrides): Promise<string>;

  rageVPool(overrides?: CallOverrides): Promise<string>;

  rebalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebalancePriceThresholdBps(overrides?: CallOverrides): Promise<number>;

  rebalanceTimeThreshold(overrides?: CallOverrides): Promise<number>;

  redeem(
    shares: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEightTwentyParams(
    _closePositionSlippageSqrtToleranceBps: PromiseOrValue<BigNumberish>,
    _resetPositionThresholdBps: PromiseOrValue<BigNumberish>,
    _minNotionalPositionToCloseThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapSimulator(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBaseParams(
    newDepositCap: PromiseOrValue<BigNumberish>,
    newKeeperAddress: PromiseOrValue<string>,
    _rebalanceTimeThreshold: PromiseOrValue<BigNumberish>,
    _rebalancePriceThresholdBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCurveParams(
    _feeBps: PromiseOrValue<BigNumberish>,
    _stablecoinSlippage: PromiseOrValue<BigNumberish>,
    _crvHarvestThreshold: PromiseOrValue<BigNumberish>,
    _crvSlippageTolerance: PromiseOrValue<BigNumberish>,
    _gauge: PromiseOrValue<string>,
    _crvOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    feeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    baseTickLower(overrides?: CallOverrides): Promise<number>;

    baseTickUpper(overrides?: CallOverrides): Promise<number>;

    closePositionSlippageSqrtToleranceBps(
      overrides?: CallOverrides
    ): Promise<number>;

    closeTokenPosition(overrides?: CallOverrides): Promise<void>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    ethPoolId(overrides?: CallOverrides): Promise<number>;

    'extsload(bytes32)'(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    'extsload(bytes32[])'(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMarketValue(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

    grantAllowances(overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      curveYieldStrategyInitParams: CurveYieldStrategy.CurveYieldStrategyInitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isReset(overrides?: CallOverrides): Promise<boolean>;

    isValidRebalance(
      vaultMarketValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keeper(overrides?: CallOverrides): Promise<string>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(overrides?: CallOverrides): Promise<void>;

    minNotionalPositionToCloseThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rageAccountNo(overrides?: CallOverrides): Promise<BigNumber>;

    rageClearingHouse(overrides?: CallOverrides): Promise<string>;

    rageVPool(overrides?: CallOverrides): Promise<string>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    rebalancePriceThresholdBps(overrides?: CallOverrides): Promise<number>;

    rebalanceTimeThreshold(overrides?: CallOverrides): Promise<number>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEightTwentyParams(
      _closePositionSlippageSqrtToleranceBps: PromiseOrValue<BigNumberish>,
      _resetPositionThresholdBps: PromiseOrValue<BigNumberish>,
      _minNotionalPositionToCloseThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapSimulator(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBaseParams(
      newDepositCap: PromiseOrValue<BigNumberish>,
      newKeeperAddress: PromiseOrValue<string>,
      _rebalanceTimeThreshold: PromiseOrValue<BigNumberish>,
      _rebalancePriceThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCurveParams(
      _feeBps: PromiseOrValue<BigNumberish>,
      _stablecoinSlippage: PromiseOrValue<BigNumberish>,
      _crvHarvestThreshold: PromiseOrValue<BigNumberish>,
      _crvSlippageTolerance: PromiseOrValue<BigNumberish>,
      _gauge: PromiseOrValue<string>,
      _crvOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFees(
      feeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;

    'BaseParamsUpdated(uint256,address,uint32,uint16)'(
      newDepositCap?: null,
      newKeeperAddress?: null,
      rebalanceTimeThreshold?: null,
      rebalancePriceThresholdBps?: null
    ): BaseParamsUpdatedEventFilter;
    BaseParamsUpdated(
      newDepositCap?: null,
      newKeeperAddress?: null,
      rebalanceTimeThreshold?: null,
      rebalancePriceThresholdBps?: null
    ): BaseParamsUpdatedEventFilter;

    'CrvSwapFailedDueToSlippage(uint256)'(
      crvSlippageTolerance?: null
    ): CrvSwapFailedDueToSlippageEventFilter;
    CrvSwapFailedDueToSlippage(
      crvSlippageTolerance?: null
    ): CrvSwapFailedDueToSlippageEventFilter;

    'CurveParamsUpdated(uint256,uint256,uint256,uint256,address,address)'(
      feeBps?: null,
      stablecoinSlippage?: null,
      crvHarvestThreshold?: null,
      crvSlippageTolerance?: null,
      gauge?: PromiseOrValue<string> | null,
      crvOracle?: PromiseOrValue<string> | null
    ): CurveParamsUpdatedEventFilter;
    CurveParamsUpdated(
      feeBps?: null,
      stablecoinSlippage?: null,
      crvHarvestThreshold?: null,
      crvSlippageTolerance?: null,
      gauge?: PromiseOrValue<string> | null,
      crvOracle?: PromiseOrValue<string> | null
    ): CurveParamsUpdatedEventFilter;

    'EightyTwentyParamsUpdated(uint16,uint16,uint64)'(
      closePositionSlippageSqrtToleranceBps?: null,
      resetPositionThresholdBps?: null,
      minNotionalPositionToCloseThreshold?: null
    ): EightyTwentyParamsUpdatedEventFilter;
    EightyTwentyParamsUpdated(
      closePositionSlippageSqrtToleranceBps?: null,
      resetPositionThresholdBps?: null,
      minNotionalPositionToCloseThreshold?: null
    ): EightyTwentyParamsUpdatedEventFilter;

    'FeesUpdated(uint256)'(fee?: null): FeesUpdatedEventFilter;
    FeesUpdated(fee?: null): FeesUpdatedEventFilter;

    'FeesWithdrawn(uint256)'(total?: null): FeesWithdrawnEventFilter;
    FeesWithdrawn(total?: null): FeesWithdrawnEventFilter;

    'Harvested(uint256)'(crvAmount?: null): HarvestedEventFilter;
    Harvested(crvAmount?: null): HarvestedEventFilter;

    'Rebalance()'(): RebalanceEventFilter;
    Rebalance(): RebalanceEventFilter;

    'Staked(uint256,address)'(
      amount?: null,
      depositor?: PromiseOrValue<string> | null
    ): StakedEventFilter;
    Staked(
      amount?: null,
      depositor?: PromiseOrValue<string> | null
    ): StakedEventFilter;

    'StateInfo(uint256)'(lpPrice?: null): StateInfoEventFilter;
    StateInfo(lpPrice?: null): StateInfoEventFilter;

    'TokenPositionClosed()'(): TokenPositionClosedEventFilter;
    TokenPositionClosed(): TokenPositionClosedEventFilter;
  };

  estimateGas: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    baseTickLower(overrides?: CallOverrides): Promise<BigNumber>;

    baseTickUpper(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionSlippageSqrtToleranceBps(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeTokenPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    ethPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extsload(bytes32[])'(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketValue(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

    grantAllowances(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      curveYieldStrategyInitParams: CurveYieldStrategy.CurveYieldStrategyInitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isReset(overrides?: CallOverrides): Promise<BigNumber>;

    isValidRebalance(
      vaultMarketValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minNotionalPositionToCloseThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rageAccountNo(overrides?: CallOverrides): Promise<BigNumber>;

    rageClearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    rageVPool(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebalancePriceThresholdBps(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceTimeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEightTwentyParams(
      _closePositionSlippageSqrtToleranceBps: PromiseOrValue<BigNumberish>,
      _resetPositionThresholdBps: PromiseOrValue<BigNumberish>,
      _minNotionalPositionToCloseThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapSimulator(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBaseParams(
      newDepositCap: PromiseOrValue<BigNumberish>,
      newKeeperAddress: PromiseOrValue<string>,
      _rebalanceTimeThreshold: PromiseOrValue<BigNumberish>,
      _rebalancePriceThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCurveParams(
      _feeBps: PromiseOrValue<BigNumberish>,
      _stablecoinSlippage: PromiseOrValue<BigNumberish>,
      _crvHarvestThreshold: PromiseOrValue<BigNumberish>,
      _crvSlippageTolerance: PromiseOrValue<BigNumberish>,
      _gauge: PromiseOrValue<string>,
      _crvOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseTickLower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseTickUpper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePositionSlippageSqrtToleranceBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeTokenPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'extsload(bytes32)'(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32[])'(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketValue(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceX128(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultMarketValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAllowances(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      curveYieldStrategyInitParams: CurveYieldStrategy.CurveYieldStrategyInitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isReset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidRebalance(
      vaultMarketValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMint(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minNotionalPositionToCloseThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rageAccountNo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rageClearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rageVPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebalancePriceThresholdBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceTimeThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEightTwentyParams(
      _closePositionSlippageSqrtToleranceBps: PromiseOrValue<BigNumberish>,
      _resetPositionThresholdBps: PromiseOrValue<BigNumberish>,
      _minNotionalPositionToCloseThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapSimulator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBaseParams(
      newDepositCap: PromiseOrValue<BigNumberish>,
      newKeeperAddress: PromiseOrValue<string>,
      _rebalanceTimeThreshold: PromiseOrValue<BigNumberish>,
      _rebalancePriceThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCurveParams(
      _feeBps: PromiseOrValue<BigNumberish>,
      _stablecoinSlippage: PromiseOrValue<BigNumberish>,
      _crvHarvestThreshold: PromiseOrValue<BigNumberish>,
      _crvSlippageTolerance: PromiseOrValue<BigNumberish>,
      _gauge: PromiseOrValue<string>,
      _crvOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
