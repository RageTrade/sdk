/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export interface VaultPeripheryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'MAX_BPS'
      | 'MAX_TOLERANCE'
      | 'depositEth'
      | 'depositUsdc'
      | 'depositWeth'
      | 'initialize'
      | 'lpOracle'
      | 'lpToken'
      | 'owner'
      | 'renounceOwnership'
      | 'stableSwap'
      | 'swapRouter'
      | 'transferOwnership'
      | 'updateEthOracle'
      | 'updateSwapRouter'
      | 'updateTolerance'
      | 'usdc'
      | 'usdt'
      | 'vault'
      | 'weth'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'DepositPeriphery'
      | 'EthOracleUpdated'
      | 'Initialized'
      | 'OwnershipTransferred'
      | 'SlippageToleranceUpdated'
      | 'SwapRouterUpdated'
  ): EventFragment;

  encodeFunctionData(functionFragment: 'MAX_BPS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'MAX_TOLERANCE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'depositEth',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'depositUsdc',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositWeth',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: 'lpOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lpToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'stableSwap',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'swapRouter',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateEthOracle',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateSwapRouter',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateTolerance',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'usdc', values?: undefined): string;
  encodeFunctionData(functionFragment: 'usdt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'weth', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'MAX_BPS', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'MAX_TOLERANCE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'depositEth', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositUsdc',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'depositWeth',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lpOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lpToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'stableSwap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapRouter', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateEthOracle',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateSwapRouter',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateTolerance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'usdc', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weth', data: BytesLike): Result;
}

export namespace DepositPeripheryEvent {
  export type InputTuple = [
    owner: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    asset: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    token: string,
    amount: bigint,
    asset: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    owner: string;
    token: string;
    amount: bigint;
    asset: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EthOracleUpdatedEvent {
  export type InputTuple = [
    oldEthOracle: AddressLike,
    newEthOracle: AddressLike
  ];
  export type OutputTuple = [oldEthOracle: string, newEthOracle: string];
  export interface OutputObject {
    oldEthOracle: string;
    newEthOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlippageToleranceUpdatedEvent {
  export type InputTuple = [
    oldTolerance: BigNumberish,
    newTolerance: BigNumberish
  ];
  export type OutputTuple = [oldTolerance: bigint, newTolerance: bigint];
  export interface OutputObject {
    oldTolerance: bigint;
    newTolerance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapRouterUpdatedEvent {
  export type InputTuple = [
    oldSwapRouter: AddressLike,
    newSwapRouter: AddressLike
  ];
  export type OutputTuple = [oldSwapRouter: string, newSwapRouter: string];
  export interface OutputObject {
    oldSwapRouter: string;
    newSwapRouter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultPeriphery extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: VaultPeripheryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BPS: TypedContractMethod<[], [bigint], 'view'>;

  MAX_TOLERANCE: TypedContractMethod<[], [bigint], 'view'>;

  depositEth: TypedContractMethod<[], [bigint], 'payable'>;

  depositUsdc: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    'nonpayable'
  >;

  depositWeth: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    'nonpayable'
  >;

  initialize: TypedContractMethod<
    [
      _usdc: AddressLike,
      _usdt: AddressLike,
      _weth: AddressLike,
      _lpToken: AddressLike,
      _vault: AddressLike,
      _swapRouter: AddressLike,
      _lpOracle: AddressLike,
      _stableSwap: AddressLike,
      _ethOracle: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  lpOracle: TypedContractMethod<[], [string], 'view'>;

  lpToken: TypedContractMethod<[], [string], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  stableSwap: TypedContractMethod<[], [string], 'view'>;

  swapRouter: TypedContractMethod<[], [string], 'view'>;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  updateEthOracle: TypedContractMethod<
    [newOracle: AddressLike],
    [void],
    'nonpayable'
  >;

  updateSwapRouter: TypedContractMethod<
    [newRouter: AddressLike],
    [void],
    'nonpayable'
  >;

  updateTolerance: TypedContractMethod<
    [newTolerance: BigNumberish],
    [void],
    'nonpayable'
  >;

  usdc: TypedContractMethod<[], [string], 'view'>;

  usdt: TypedContractMethod<[], [string], 'view'>;

  vault: TypedContractMethod<[], [string], 'view'>;

  weth: TypedContractMethod<[], [string], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'MAX_BPS'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'MAX_TOLERANCE'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'depositEth'
  ): TypedContractMethod<[], [bigint], 'payable'>;
  getFunction(
    nameOrSignature: 'depositUsdc'
  ): TypedContractMethod<[amount: BigNumberish], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'depositWeth'
  ): TypedContractMethod<[amount: BigNumberish], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [
      _usdc: AddressLike,
      _usdt: AddressLike,
      _weth: AddressLike,
      _lpToken: AddressLike,
      _vault: AddressLike,
      _swapRouter: AddressLike,
      _lpOracle: AddressLike,
      _stableSwap: AddressLike,
      _ethOracle: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'lpOracle'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'lpToken'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'owner'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'renounceOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'stableSwap'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'swapRouter'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateEthOracle'
  ): TypedContractMethod<[newOracle: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateSwapRouter'
  ): TypedContractMethod<[newRouter: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateTolerance'
  ): TypedContractMethod<[newTolerance: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'usdc'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'usdt'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'vault'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'weth'
  ): TypedContractMethod<[], [string], 'view'>;

  getEvent(
    key: 'DepositPeriphery'
  ): TypedContractEvent<
    DepositPeripheryEvent.InputTuple,
    DepositPeripheryEvent.OutputTuple,
    DepositPeripheryEvent.OutputObject
  >;
  getEvent(
    key: 'EthOracleUpdated'
  ): TypedContractEvent<
    EthOracleUpdatedEvent.InputTuple,
    EthOracleUpdatedEvent.OutputTuple,
    EthOracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Initialized'
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'SlippageToleranceUpdated'
  ): TypedContractEvent<
    SlippageToleranceUpdatedEvent.InputTuple,
    SlippageToleranceUpdatedEvent.OutputTuple,
    SlippageToleranceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'SwapRouterUpdated'
  ): TypedContractEvent<
    SwapRouterUpdatedEvent.InputTuple,
    SwapRouterUpdatedEvent.OutputTuple,
    SwapRouterUpdatedEvent.OutputObject
  >;

  filters: {
    'DepositPeriphery(address,address,uint256,uint256,uint256)': TypedContractEvent<
      DepositPeripheryEvent.InputTuple,
      DepositPeripheryEvent.OutputTuple,
      DepositPeripheryEvent.OutputObject
    >;
    DepositPeriphery: TypedContractEvent<
      DepositPeripheryEvent.InputTuple,
      DepositPeripheryEvent.OutputTuple,
      DepositPeripheryEvent.OutputObject
    >;

    'EthOracleUpdated(address,address)': TypedContractEvent<
      EthOracleUpdatedEvent.InputTuple,
      EthOracleUpdatedEvent.OutputTuple,
      EthOracleUpdatedEvent.OutputObject
    >;
    EthOracleUpdated: TypedContractEvent<
      EthOracleUpdatedEvent.InputTuple,
      EthOracleUpdatedEvent.OutputTuple,
      EthOracleUpdatedEvent.OutputObject
    >;

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'SlippageToleranceUpdated(uint256,uint256)': TypedContractEvent<
      SlippageToleranceUpdatedEvent.InputTuple,
      SlippageToleranceUpdatedEvent.OutputTuple,
      SlippageToleranceUpdatedEvent.OutputObject
    >;
    SlippageToleranceUpdated: TypedContractEvent<
      SlippageToleranceUpdatedEvent.InputTuple,
      SlippageToleranceUpdatedEvent.OutputTuple,
      SlippageToleranceUpdatedEvent.OutputObject
    >;

    'SwapRouterUpdated(address,address)': TypedContractEvent<
      SwapRouterUpdatedEvent.InputTuple,
      SwapRouterUpdatedEvent.OutputTuple,
      SwapRouterUpdatedEvent.OutputObject
    >;
    SwapRouterUpdated: TypedContractEvent<
      SwapRouterUpdatedEvent.InputTuple,
      SwapRouterUpdatedEvent.OutputTuple,
      SwapRouterUpdatedEvent.OutputObject
    >;
  };
}
