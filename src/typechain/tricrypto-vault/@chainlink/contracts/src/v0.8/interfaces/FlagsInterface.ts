/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../../../common';

export interface FlagsInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'getFlag'
      | 'getFlags'
      | 'lowerFlags'
      | 'raiseFlag'
      | 'raiseFlags'
      | 'setRaisingAccessController'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'getFlag',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getFlags',
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'lowerFlags',
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'raiseFlag',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'raiseFlags',
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'setRaisingAccessController',
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: 'getFlag', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFlags', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lowerFlags', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'raiseFlag', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'raiseFlags', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setRaisingAccessController',
    data: BytesLike
  ): Result;
}

export interface FlagsInterface extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: FlagsInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFlag: TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>;

  getFlags: TypedContractMethod<[arg0: AddressLike[]], [boolean[]], 'view'>;

  lowerFlags: TypedContractMethod<[arg0: AddressLike[]], [void], 'nonpayable'>;

  raiseFlag: TypedContractMethod<[arg0: AddressLike], [void], 'nonpayable'>;

  raiseFlags: TypedContractMethod<[arg0: AddressLike[]], [void], 'nonpayable'>;

  setRaisingAccessController: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'getFlag'
  ): TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'getFlags'
  ): TypedContractMethod<[arg0: AddressLike[]], [boolean[]], 'view'>;
  getFunction(
    nameOrSignature: 'lowerFlags'
  ): TypedContractMethod<[arg0: AddressLike[]], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'raiseFlag'
  ): TypedContractMethod<[arg0: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'raiseFlags'
  ): TypedContractMethod<[arg0: AddressLike[]], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setRaisingAccessController'
  ): TypedContractMethod<[arg0: AddressLike], [void], 'nonpayable'>;

  filters: {};
}
