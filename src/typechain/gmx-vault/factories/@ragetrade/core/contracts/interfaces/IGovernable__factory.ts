/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type {
  IGovernable,
  IGovernableInterface,
} from '../../../../../@ragetrade/core/contracts/interfaces/IGovernable';

const _abi = [
  {
    inputs: [],
    name: 'acceptGovernanceTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'acceptTeamMultisigTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'governance',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'governancePending',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newGovernancePending',
        type: 'address',
      },
    ],
    name: 'initiateGovernanceTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newTeamMultisigPending',
        type: 'address',
      },
    ],
    name: 'initiateTeamMultisigTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'teamMultisig',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'teamMultisigPending',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

export class IGovernable__factory {
  static readonly abi = _abi;
  static createInterface(): IGovernableInterface {
    return new utils.Interface(_abi) as IGovernableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IGovernable {
    return new Contract(address, _abi, signerOrProvider) as IGovernable;
  }
}
