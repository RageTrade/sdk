/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from '../../../../../common';

export declare namespace IClearingHouseStructures {
  export type CollateralSettingsStruct = {
    oracle: AddressLike;
    twapDuration: BigNumberish;
    isAllowedForDeposit: boolean;
  };

  export type CollateralSettingsStructOutput = [
    oracle: string,
    twapDuration: bigint,
    isAllowedForDeposit: boolean
  ] & { oracle: string; twapDuration: bigint; isAllowedForDeposit: boolean };

  export type PoolSettingsStruct = {
    initialMarginRatioBps: BigNumberish;
    maintainanceMarginRatioBps: BigNumberish;
    maxVirtualPriceDeviationRatioBps: BigNumberish;
    twapDuration: BigNumberish;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: AddressLike;
  };

  export type PoolSettingsStructOutput = [
    initialMarginRatioBps: bigint,
    maintainanceMarginRatioBps: bigint,
    maxVirtualPriceDeviationRatioBps: bigint,
    twapDuration: bigint,
    isAllowedForTrade: boolean,
    isCrossMargined: boolean,
    oracle: string
  ] & {
    initialMarginRatioBps: bigint;
    maintainanceMarginRatioBps: bigint;
    maxVirtualPriceDeviationRatioBps: bigint;
    twapDuration: bigint;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type LiquidationParamsStruct = {
    rangeLiquidationFeeFraction: BigNumberish;
    tokenLiquidationFeeFraction: BigNumberish;
    closeFactorMMThresholdBps: BigNumberish;
    partialLiquidationCloseFactorBps: BigNumberish;
    insuranceFundFeeShareBps: BigNumberish;
    liquidationSlippageSqrtToleranceBps: BigNumberish;
    maxRangeLiquidationFees: BigNumberish;
    minNotionalLiquidatable: BigNumberish;
  };

  export type LiquidationParamsStructOutput = [
    rangeLiquidationFeeFraction: bigint,
    tokenLiquidationFeeFraction: bigint,
    closeFactorMMThresholdBps: bigint,
    partialLiquidationCloseFactorBps: bigint,
    insuranceFundFeeShareBps: bigint,
    liquidationSlippageSqrtToleranceBps: bigint,
    maxRangeLiquidationFees: bigint,
    minNotionalLiquidatable: bigint
  ] & {
    rangeLiquidationFeeFraction: bigint;
    tokenLiquidationFeeFraction: bigint;
    closeFactorMMThresholdBps: bigint;
    partialLiquidationCloseFactorBps: bigint;
    insuranceFundFeeShareBps: bigint;
    liquidationSlippageSqrtToleranceBps: bigint;
    maxRangeLiquidationFees: bigint;
    minNotionalLiquidatable: bigint;
  };
}

export interface IClearingHouseEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | 'AccountCreated'
      | 'CollateralSettingsUpdated'
      | 'PausedUpdated'
      | 'PoolSettingsUpdated'
      | 'ProtocolSettingsUpdated'
  ): EventFragment;
}

export namespace AccountCreatedEvent {
  export type InputTuple = [ownerAddress: AddressLike, accountId: BigNumberish];
  export type OutputTuple = [ownerAddress: string, accountId: bigint];
  export interface OutputObject {
    ownerAddress: string;
    accountId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralSettingsUpdatedEvent {
  export type InputTuple = [
    cToken: AddressLike,
    cTokenInfo: IClearingHouseStructures.CollateralSettingsStruct
  ];
  export type OutputTuple = [
    cToken: string,
    cTokenInfo: IClearingHouseStructures.CollateralSettingsStructOutput
  ];
  export interface OutputObject {
    cToken: string;
    cTokenInfo: IClearingHouseStructures.CollateralSettingsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedUpdatedEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolSettingsUpdatedEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    settings: IClearingHouseStructures.PoolSettingsStruct
  ];
  export type OutputTuple = [
    poolId: bigint,
    settings: IClearingHouseStructures.PoolSettingsStructOutput
  ];
  export interface OutputObject {
    poolId: bigint;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolSettingsUpdatedEvent {
  export type InputTuple = [
    liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
    removeLimitOrderFee: BigNumberish,
    minimumOrderNotional: BigNumberish,
    minRequiredMargin: BigNumberish
  ];
  export type OutputTuple = [
    liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput,
    removeLimitOrderFee: bigint,
    minimumOrderNotional: bigint,
    minRequiredMargin: bigint
  ];
  export interface OutputObject {
    liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
    removeLimitOrderFee: bigint;
    minimumOrderNotional: bigint;
    minRequiredMargin: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IClearingHouseEvents extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: IClearingHouseEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: 'AccountCreated'
  ): TypedContractEvent<
    AccountCreatedEvent.InputTuple,
    AccountCreatedEvent.OutputTuple,
    AccountCreatedEvent.OutputObject
  >;
  getEvent(
    key: 'CollateralSettingsUpdated'
  ): TypedContractEvent<
    CollateralSettingsUpdatedEvent.InputTuple,
    CollateralSettingsUpdatedEvent.OutputTuple,
    CollateralSettingsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'PausedUpdated'
  ): TypedContractEvent<
    PausedUpdatedEvent.InputTuple,
    PausedUpdatedEvent.OutputTuple,
    PausedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'PoolSettingsUpdated'
  ): TypedContractEvent<
    PoolSettingsUpdatedEvent.InputTuple,
    PoolSettingsUpdatedEvent.OutputTuple,
    PoolSettingsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'ProtocolSettingsUpdated'
  ): TypedContractEvent<
    ProtocolSettingsUpdatedEvent.InputTuple,
    ProtocolSettingsUpdatedEvent.OutputTuple,
    ProtocolSettingsUpdatedEvent.OutputObject
  >;

  filters: {
    'AccountCreated(address,uint256)': TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;
    AccountCreated: TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;

    'CollateralSettingsUpdated(address,tuple)': TypedContractEvent<
      CollateralSettingsUpdatedEvent.InputTuple,
      CollateralSettingsUpdatedEvent.OutputTuple,
      CollateralSettingsUpdatedEvent.OutputObject
    >;
    CollateralSettingsUpdated: TypedContractEvent<
      CollateralSettingsUpdatedEvent.InputTuple,
      CollateralSettingsUpdatedEvent.OutputTuple,
      CollateralSettingsUpdatedEvent.OutputObject
    >;

    'PausedUpdated(bool)': TypedContractEvent<
      PausedUpdatedEvent.InputTuple,
      PausedUpdatedEvent.OutputTuple,
      PausedUpdatedEvent.OutputObject
    >;
    PausedUpdated: TypedContractEvent<
      PausedUpdatedEvent.InputTuple,
      PausedUpdatedEvent.OutputTuple,
      PausedUpdatedEvent.OutputObject
    >;

    'PoolSettingsUpdated(uint32,tuple)': TypedContractEvent<
      PoolSettingsUpdatedEvent.InputTuple,
      PoolSettingsUpdatedEvent.OutputTuple,
      PoolSettingsUpdatedEvent.OutputObject
    >;
    PoolSettingsUpdated: TypedContractEvent<
      PoolSettingsUpdatedEvent.InputTuple,
      PoolSettingsUpdatedEvent.OutputTuple,
      PoolSettingsUpdatedEvent.OutputObject
    >;

    'ProtocolSettingsUpdated(tuple,uint256,uint256,uint256)': TypedContractEvent<
      ProtocolSettingsUpdatedEvent.InputTuple,
      ProtocolSettingsUpdatedEvent.OutputTuple,
      ProtocolSettingsUpdatedEvent.OutputObject
    >;
    ProtocolSettingsUpdated: TypedContractEvent<
      ProtocolSettingsUpdatedEvent.InputTuple,
      ProtocolSettingsUpdatedEvent.OutputTuple,
      ProtocolSettingsUpdatedEvent.OutputObject
    >;
  };
}
