/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../../../common';

export declare namespace IClearingHouseStructures {
  export type CollateralSettingsStruct = {
    oracle: PromiseOrValue<string>;
    twapDuration: PromiseOrValue<BigNumberish>;
    isAllowedForDeposit: PromiseOrValue<boolean>;
  };

  export type CollateralSettingsStructOutput = [string, number, boolean] & {
    oracle: string;
    twapDuration: number;
    isAllowedForDeposit: boolean;
  };

  export type PoolSettingsStruct = {
    initialMarginRatioBps: PromiseOrValue<BigNumberish>;
    maintainanceMarginRatioBps: PromiseOrValue<BigNumberish>;
    maxVirtualPriceDeviationRatioBps: PromiseOrValue<BigNumberish>;
    twapDuration: PromiseOrValue<BigNumberish>;
    isAllowedForTrade: PromiseOrValue<boolean>;
    isCrossMargined: PromiseOrValue<boolean>;
    oracle: PromiseOrValue<string>;
  };

  export type PoolSettingsStructOutput = [
    number,
    number,
    number,
    number,
    boolean,
    boolean,
    string
  ] & {
    initialMarginRatioBps: number;
    maintainanceMarginRatioBps: number;
    maxVirtualPriceDeviationRatioBps: number;
    twapDuration: number;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type LiquidationParamsStruct = {
    rangeLiquidationFeeFraction: PromiseOrValue<BigNumberish>;
    tokenLiquidationFeeFraction: PromiseOrValue<BigNumberish>;
    closeFactorMMThresholdBps: PromiseOrValue<BigNumberish>;
    partialLiquidationCloseFactorBps: PromiseOrValue<BigNumberish>;
    insuranceFundFeeShareBps: PromiseOrValue<BigNumberish>;
    liquidationSlippageSqrtToleranceBps: PromiseOrValue<BigNumberish>;
    maxRangeLiquidationFees: PromiseOrValue<BigNumberish>;
    minNotionalLiquidatable: PromiseOrValue<BigNumberish>;
  };

  export type LiquidationParamsStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    rangeLiquidationFeeFraction: number;
    tokenLiquidationFeeFraction: number;
    closeFactorMMThresholdBps: number;
    partialLiquidationCloseFactorBps: number;
    insuranceFundFeeShareBps: number;
    liquidationSlippageSqrtToleranceBps: number;
    maxRangeLiquidationFees: BigNumber;
    minNotionalLiquidatable: BigNumber;
  };
}

export interface IClearingHouseOwnerActionsInterface extends utils.Interface {
  functions: {
    'updateCollateralSettings(address,(address,uint32,bool))': FunctionFragment;
    'updatePoolSettings(uint32,(uint16,uint16,uint16,uint32,bool,bool,address))': FunctionFragment;
    'updateProtocolSettings((uint16,uint16,uint16,uint16,uint16,uint16,uint64,uint64),uint256,uint256,uint256)': FunctionFragment;
    'withdrawProtocolFee(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'updateCollateralSettings'
      | 'updatePoolSettings'
      | 'updateProtocolSettings'
      | 'withdrawProtocolFee'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'updateCollateralSettings',
    values: [
      PromiseOrValue<string>,
      IClearingHouseStructures.CollateralSettingsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePoolSettings',
    values: [
      PromiseOrValue<BigNumberish>,
      IClearingHouseStructures.PoolSettingsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProtocolSettings',
    values: [
      IClearingHouseStructures.LiquidationParamsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawProtocolFee',
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: 'updateCollateralSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updatePoolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProtocolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawProtocolFee',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IClearingHouseOwnerActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClearingHouseOwnerActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    updateCollateralSettings(
      cToken: PromiseOrValue<string>,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePoolSettings(
      poolId: PromiseOrValue<BigNumberish>,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: PromiseOrValue<BigNumberish>,
      minimumOrderNotional: PromiseOrValue<BigNumberish>,
      minRequiredMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFee(
      numberOfPoolsToUpdateInThisTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  updateCollateralSettings(
    cToken: PromiseOrValue<string>,
    collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePoolSettings(
    poolId: PromiseOrValue<BigNumberish>,
    newSettings: IClearingHouseStructures.PoolSettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProtocolSettings(
    liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
    removeLimitOrderFee: PromiseOrValue<BigNumberish>,
    minimumOrderNotional: PromiseOrValue<BigNumberish>,
    minRequiredMargin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFee(
    numberOfPoolsToUpdateInThisTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    updateCollateralSettings(
      cToken: PromiseOrValue<string>,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolSettings(
      poolId: PromiseOrValue<BigNumberish>,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: PromiseOrValue<BigNumberish>,
      minimumOrderNotional: PromiseOrValue<BigNumberish>,
      minRequiredMargin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolFee(
      numberOfPoolsToUpdateInThisTx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    updateCollateralSettings(
      cToken: PromiseOrValue<string>,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePoolSettings(
      poolId: PromiseOrValue<BigNumberish>,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: PromiseOrValue<BigNumberish>,
      minimumOrderNotional: PromiseOrValue<BigNumberish>,
      minRequiredMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFee(
      numberOfPoolsToUpdateInThisTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    updateCollateralSettings(
      cToken: PromiseOrValue<string>,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolSettings(
      poolId: PromiseOrValue<BigNumberish>,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: PromiseOrValue<BigNumberish>,
      minimumOrderNotional: PromiseOrValue<BigNumberish>,
      minRequiredMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFee(
      numberOfPoolsToUpdateInThisTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
