/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../../../common';

export interface VPoolWrapperDeployerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'acceptGovernanceTransfer'
      | 'acceptTeamMultisigTransfer'
      | 'governance'
      | 'governancePending'
      | 'initiateGovernanceTransfer'
      | 'initiateTeamMultisigTransfer'
      | 'proxyAdmin'
      | 'setVPoolWrapperLogicAddress'
      | 'teamMultisig'
      | 'teamMultisigPending'
      | 'vPoolWrapperLogicAddress'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'GovernancePending'
      | 'GovernanceTransferred'
      | 'Initialized'
      | 'TeamMultisigPending'
      | 'TeamMultisigTransferred'
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'acceptGovernanceTransfer',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'acceptTeamMultisigTransfer',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'governance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'governancePending',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateGovernanceTransfer',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateTeamMultisigTransfer',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'proxyAdmin',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setVPoolWrapperLogicAddress',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'teamMultisig',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'teamMultisigPending',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'vPoolWrapperLogicAddress',
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: 'acceptGovernanceTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'acceptTeamMultisigTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'governancePending',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateGovernanceTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateTeamMultisigTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'proxyAdmin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setVPoolWrapperLogicAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'teamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'teamMultisigPending',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'vPoolWrapperLogicAddress',
    data: BytesLike
  ): Result;
}

export namespace GovernancePendingEvent {
  export type InputTuple = [
    previousGovernancePending: AddressLike,
    newGovernancePending: AddressLike
  ];
  export type OutputTuple = [
    previousGovernancePending: string,
    newGovernancePending: string
  ];
  export interface OutputObject {
    previousGovernancePending: string;
    newGovernancePending: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceTransferredEvent {
  export type InputTuple = [
    previousGovernance: AddressLike,
    newGovernance: AddressLike
  ];
  export type OutputTuple = [previousGovernance: string, newGovernance: string];
  export interface OutputObject {
    previousGovernance: string;
    newGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamMultisigPendingEvent {
  export type InputTuple = [
    previousTeamMultisigPending: AddressLike,
    newTeamMultisigPending: AddressLike
  ];
  export type OutputTuple = [
    previousTeamMultisigPending: string,
    newTeamMultisigPending: string
  ];
  export interface OutputObject {
    previousTeamMultisigPending: string;
    newTeamMultisigPending: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamMultisigTransferredEvent {
  export type InputTuple = [
    previousTeamMultisig: AddressLike,
    newTeamMultisig: AddressLike
  ];
  export type OutputTuple = [
    previousTeamMultisig: string,
    newTeamMultisig: string
  ];
  export interface OutputObject {
    previousTeamMultisig: string;
    newTeamMultisig: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VPoolWrapperDeployer extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: VPoolWrapperDeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptGovernanceTransfer: TypedContractMethod<[], [void], 'nonpayable'>;

  acceptTeamMultisigTransfer: TypedContractMethod<[], [void], 'nonpayable'>;

  governance: TypedContractMethod<[], [string], 'view'>;

  governancePending: TypedContractMethod<[], [string], 'view'>;

  initiateGovernanceTransfer: TypedContractMethod<
    [newGovernancePending: AddressLike],
    [void],
    'nonpayable'
  >;

  initiateTeamMultisigTransfer: TypedContractMethod<
    [newTeamMultisigPending: AddressLike],
    [void],
    'nonpayable'
  >;

  proxyAdmin: TypedContractMethod<[], [string], 'view'>;

  setVPoolWrapperLogicAddress: TypedContractMethod<
    [_vPoolWrapperLogicAddress: AddressLike],
    [void],
    'nonpayable'
  >;

  teamMultisig: TypedContractMethod<[], [string], 'view'>;

  teamMultisigPending: TypedContractMethod<[], [string], 'view'>;

  vPoolWrapperLogicAddress: TypedContractMethod<[], [string], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'acceptGovernanceTransfer'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'acceptTeamMultisigTransfer'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'governance'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'governancePending'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'initiateGovernanceTransfer'
  ): TypedContractMethod<
    [newGovernancePending: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'initiateTeamMultisigTransfer'
  ): TypedContractMethod<
    [newTeamMultisigPending: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'proxyAdmin'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'setVPoolWrapperLogicAddress'
  ): TypedContractMethod<
    [_vPoolWrapperLogicAddress: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'teamMultisig'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'teamMultisigPending'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'vPoolWrapperLogicAddress'
  ): TypedContractMethod<[], [string], 'view'>;

  getEvent(
    key: 'GovernancePending'
  ): TypedContractEvent<
    GovernancePendingEvent.InputTuple,
    GovernancePendingEvent.OutputTuple,
    GovernancePendingEvent.OutputObject
  >;
  getEvent(
    key: 'GovernanceTransferred'
  ): TypedContractEvent<
    GovernanceTransferredEvent.InputTuple,
    GovernanceTransferredEvent.OutputTuple,
    GovernanceTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Initialized'
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'TeamMultisigPending'
  ): TypedContractEvent<
    TeamMultisigPendingEvent.InputTuple,
    TeamMultisigPendingEvent.OutputTuple,
    TeamMultisigPendingEvent.OutputObject
  >;
  getEvent(
    key: 'TeamMultisigTransferred'
  ): TypedContractEvent<
    TeamMultisigTransferredEvent.InputTuple,
    TeamMultisigTransferredEvent.OutputTuple,
    TeamMultisigTransferredEvent.OutputObject
  >;

  filters: {
    'GovernancePending(address,address)': TypedContractEvent<
      GovernancePendingEvent.InputTuple,
      GovernancePendingEvent.OutputTuple,
      GovernancePendingEvent.OutputObject
    >;
    GovernancePending: TypedContractEvent<
      GovernancePendingEvent.InputTuple,
      GovernancePendingEvent.OutputTuple,
      GovernancePendingEvent.OutputObject
    >;

    'GovernanceTransferred(address,address)': TypedContractEvent<
      GovernanceTransferredEvent.InputTuple,
      GovernanceTransferredEvent.OutputTuple,
      GovernanceTransferredEvent.OutputObject
    >;
    GovernanceTransferred: TypedContractEvent<
      GovernanceTransferredEvent.InputTuple,
      GovernanceTransferredEvent.OutputTuple,
      GovernanceTransferredEvent.OutputObject
    >;

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'TeamMultisigPending(address,address)': TypedContractEvent<
      TeamMultisigPendingEvent.InputTuple,
      TeamMultisigPendingEvent.OutputTuple,
      TeamMultisigPendingEvent.OutputObject
    >;
    TeamMultisigPending: TypedContractEvent<
      TeamMultisigPendingEvent.InputTuple,
      TeamMultisigPendingEvent.OutputTuple,
      TeamMultisigPendingEvent.OutputObject
    >;

    'TeamMultisigTransferred(address,address)': TypedContractEvent<
      TeamMultisigTransferredEvent.InputTuple,
      TeamMultisigTransferredEvent.OutputTuple,
      TeamMultisigTransferredEvent.OutputObject
    >;
    TeamMultisigTransferred: TypedContractEvent<
      TeamMultisigTransferredEvent.InputTuple,
      TeamMultisigTransferredEvent.OutputTuple,
      TeamMultisigTransferredEvent.OutputObject
    >;
  };
}
