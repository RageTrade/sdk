/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export declare namespace RageERC4626 {
  export type RageERC4626InitParamsStruct = {
    asset: AddressLike;
    name: string;
    symbol: string;
  };

  export type RageERC4626InitParamsStructOutput = [
    asset: string,
    name: string,
    symbol: string
  ] & { asset: string; name: string; symbol: string };
}

export declare namespace GlpStakingManager {
  export type GlpStakingManagerInitParamsStruct = {
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStruct;
    weth: AddressLike;
    usdc: AddressLike;
    feeRecipient: AddressLike;
    rewardRouter: AddressLike;
  };

  export type GlpStakingManagerInitParamsStructOutput = [
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStructOutput,
    weth: string,
    usdc: string,
    feeRecipient: string,
    rewardRouter: string
  ] & {
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStructOutput;
    weth: string;
    usdc: string;
    feeRecipient: string;
    rewardRouter: string;
  };
}

export interface GlpStakingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'FEE'
      | 'MAX_BPS'
      | 'PRICE_PRECISION'
      | 'USDG_DECIMALS'
      | 'WETH_DECIMALS'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositToken'
      | 'feeRecipient'
      | 'grantAllowances'
      | 'harvestFees'
      | 'increaseAllowance'
      | 'initialize'
      | 'isVault'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint'
      | 'name'
      | 'owner'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'protocolFee'
      | 'redeem'
      | 'renounceOwnership'
      | 'setFeeRecipient'
      | 'setVault'
      | 'slippageThreshold'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'updateGMXParams'
      | 'wethThreshold'
      | 'withdraw'
      | 'withdrawFees'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'Approval'
      | 'Deposit'
      | 'FeeRecipientUpdated'
      | 'FeesWithdrawn'
      | 'GmxParamsUpdated'
      | 'Initialized'
      | 'OwnershipTransferred'
      | 'TokenRedeemded'
      | 'TokenWithdrawn'
      | 'Transfer'
      | 'VaultUpdated'
      | 'Withdraw'
  ): EventFragment;

  encodeFunctionData(functionFragment: 'FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BPS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'PRICE_PRECISION',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'USDG_DECIMALS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'WETH_DECIMALS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositToken',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'feeRecipient',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'grantAllowances',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestFees',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [GlpStakingManager.GlpStakingManagerInitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'isVault',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxDeposit',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxMint',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxRedeem',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxWithdraw',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolFee',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeRecipient',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setVault',
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'slippageThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateGMXParams',
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'wethThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: 'FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BPS', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'PRICE_PRECISION',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'USDG_DECIMALS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'WETH_DECIMALS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeRecipient',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'grantAllowances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewRedeem',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolFee',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFeeRecipient',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setVault', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'slippageThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateGMXParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'wethThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientUpdatedEvent {
  export type InputTuple = [feeRecipient: AddressLike];
  export type OutputTuple = [feeRecipient: string];
  export interface OutputObject {
    feeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [vaule: BigNumberish];
  export type OutputTuple = [vaule: bigint];
  export interface OutputObject {
    vaule: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GmxParamsUpdatedEvent {
  export type InputTuple = [
    newFee: BigNumberish,
    wethThreshold: BigNumberish,
    slippageThreshold: BigNumberish,
    batchingManager: AddressLike
  ];
  export type OutputTuple = [
    newFee: bigint,
    wethThreshold: bigint,
    slippageThreshold: bigint,
    batchingManager: string
  ];
  export interface OutputObject {
    newFee: bigint;
    wethThreshold: bigint;
    slippageThreshold: bigint;
    batchingManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRedeemdedEvent {
  export type InputTuple = [
    token: AddressLike,
    _sGLPQuantity: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    _sGLPQuantity: bigint,
    receiver: string
  ];
  export interface OutputObject {
    token: string;
    _sGLPQuantity: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWithdrawnEvent {
  export type InputTuple = [
    token: AddressLike,
    shares: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [token: string, shares: bigint, receiver: string];
  export interface OutputObject {
    token: string;
    shares: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultUpdatedEvent {
  export type InputTuple = [vaultAddress: AddressLike, isVault: boolean];
  export type OutputTuple = [vaultAddress: string, isVault: boolean];
  export interface OutputObject {
    vaultAddress: string;
    isVault: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GlpStakingManager extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: GlpStakingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE: TypedContractMethod<[], [bigint], 'view'>;

  MAX_BPS: TypedContractMethod<[], [bigint], 'view'>;

  PRICE_PRECISION: TypedContractMethod<[], [bigint], 'view'>;

  USDG_DECIMALS: TypedContractMethod<[], [bigint], 'view'>;

  WETH_DECIMALS: TypedContractMethod<[], [bigint], 'view'>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    'view'
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  asset: TypedContractMethod<[], [string], 'view'>;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], 'view'>;

  convertToAssets: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    'view'
  >;

  convertToShares: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    'view'
  >;

  decimals: TypedContractMethod<[], [bigint], 'view'>;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  deposit: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;

  depositToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    'nonpayable'
  >;

  feeRecipient: TypedContractMethod<[], [string], 'view'>;

  grantAllowances: TypedContractMethod<[], [void], 'nonpayable'>;

  harvestFees: TypedContractMethod<[], [void], 'nonpayable'>;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  initialize: TypedContractMethod<
    [
      glpStakingManagerInitParams: GlpStakingManager.GlpStakingManagerInitParamsStruct
    ],
    [void],
    'nonpayable'
  >;

  isVault: TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>;

  maxDeposit: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;

  maxMint: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;

  maxRedeem: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  maxWithdraw: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  mint: TypedContractMethod<
    [shares: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;

  name: TypedContractMethod<[], [string], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  previewDeposit: TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;

  previewMint: TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;

  previewRedeem: TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;

  previewWithdraw: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    'view'
  >;

  protocolFee: TypedContractMethod<[], [bigint], 'view'>;

  redeem: TypedContractMethod<
    [shares: BigNumberish, to: AddressLike, from: AddressLike],
    [bigint],
    'nonpayable'
  >;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  setFeeRecipient: TypedContractMethod<
    [_feeRecipient: AddressLike],
    [void],
    'nonpayable'
  >;

  setVault: TypedContractMethod<
    [vaultAddress: AddressLike, _isVault: boolean],
    [void],
    'nonpayable'
  >;

  slippageThreshold: TypedContractMethod<[], [bigint], 'view'>;

  symbol: TypedContractMethod<[], [string], 'view'>;

  totalAssets: TypedContractMethod<[], [bigint], 'view'>;

  totalSupply: TypedContractMethod<[], [bigint], 'view'>;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  updateGMXParams: TypedContractMethod<
    [
      _feeBps: BigNumberish,
      _wethThreshold: BigNumberish,
      _slippageThreshold: BigNumberish,
      _batchingManager: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  wethThreshold: TypedContractMethod<[], [bigint], 'view'>;

  withdraw: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike, from: AddressLike],
    [bigint],
    'nonpayable'
  >;

  withdrawFees: TypedContractMethod<[], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'FEE'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'MAX_BPS'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'PRICE_PRECISION'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'USDG_DECIMALS'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'WETH_DECIMALS'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'allowance'
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'approve'
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'asset'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'balanceOf'
  ): TypedContractMethod<[account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'convertToAssets'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'convertToShares'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'decimals'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'decreaseAllowance'
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'deposit'
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'depositToken'
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'feeRecipient'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'grantAllowances'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'harvestFees'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'increaseAllowance'
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [
      glpStakingManagerInitParams: GlpStakingManager.GlpStakingManagerInitParamsStruct
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'isVault'
  ): TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'maxDeposit'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxMint'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxRedeem'
  ): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxWithdraw'
  ): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'mint'
  ): TypedContractMethod<
    [shares: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'name'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'owner'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'previewDeposit'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewMint'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewRedeem'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewWithdraw'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'protocolFee'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'redeem'
  ): TypedContractMethod<
    [shares: BigNumberish, to: AddressLike, from: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'renounceOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setFeeRecipient'
  ): TypedContractMethod<[_feeRecipient: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setVault'
  ): TypedContractMethod<
    [vaultAddress: AddressLike, _isVault: boolean],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'slippageThreshold'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'symbol'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'totalAssets'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'totalSupply'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transfer'
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferFrom'
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateGMXParams'
  ): TypedContractMethod<
    [
      _feeBps: BigNumberish,
      _wethThreshold: BigNumberish,
      _slippageThreshold: BigNumberish,
      _batchingManager: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'wethThreshold'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'withdraw'
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike, from: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'withdrawFees'
  ): TypedContractMethod<[], [void], 'nonpayable'>;

  getEvent(
    key: 'Approval'
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: 'Deposit'
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: 'FeeRecipientUpdated'
  ): TypedContractEvent<
    FeeRecipientUpdatedEvent.InputTuple,
    FeeRecipientUpdatedEvent.OutputTuple,
    FeeRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'FeesWithdrawn'
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: 'GmxParamsUpdated'
  ): TypedContractEvent<
    GmxParamsUpdatedEvent.InputTuple,
    GmxParamsUpdatedEvent.OutputTuple,
    GmxParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Initialized'
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'TokenRedeemded'
  ): TypedContractEvent<
    TokenRedeemdedEvent.InputTuple,
    TokenRedeemdedEvent.OutputTuple,
    TokenRedeemdedEvent.OutputObject
  >;
  getEvent(
    key: 'TokenWithdrawn'
  ): TypedContractEvent<
    TokenWithdrawnEvent.InputTuple,
    TokenWithdrawnEvent.OutputTuple,
    TokenWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: 'Transfer'
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: 'VaultUpdated'
  ): TypedContractEvent<
    VaultUpdatedEvent.InputTuple,
    VaultUpdatedEvent.OutputTuple,
    VaultUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Withdraw'
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    'Deposit(address,address,uint256,uint256)': TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    'FeeRecipientUpdated(address)': TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;
    FeeRecipientUpdated: TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;

    'FeesWithdrawn(uint256)': TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    'GmxParamsUpdated(uint256,uint256,uint256,address)': TypedContractEvent<
      GmxParamsUpdatedEvent.InputTuple,
      GmxParamsUpdatedEvent.OutputTuple,
      GmxParamsUpdatedEvent.OutputObject
    >;
    GmxParamsUpdated: TypedContractEvent<
      GmxParamsUpdatedEvent.InputTuple,
      GmxParamsUpdatedEvent.OutputTuple,
      GmxParamsUpdatedEvent.OutputObject
    >;

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'TokenRedeemded(address,uint256,address)': TypedContractEvent<
      TokenRedeemdedEvent.InputTuple,
      TokenRedeemdedEvent.OutputTuple,
      TokenRedeemdedEvent.OutputObject
    >;
    TokenRedeemded: TypedContractEvent<
      TokenRedeemdedEvent.InputTuple,
      TokenRedeemdedEvent.OutputTuple,
      TokenRedeemdedEvent.OutputObject
    >;

    'TokenWithdrawn(address,uint256,address)': TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;
    TokenWithdrawn: TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    'VaultUpdated(address,bool)': TypedContractEvent<
      VaultUpdatedEvent.InputTuple,
      VaultUpdatedEvent.OutputTuple,
      VaultUpdatedEvent.OutputObject
    >;
    VaultUpdated: TypedContractEvent<
      VaultUpdatedEvent.InputTuple,
      VaultUpdatedEvent.OutputTuple,
      VaultUpdatedEvent.OutputObject
    >;

    'Withdraw(address,address,address,uint256,uint256)': TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
