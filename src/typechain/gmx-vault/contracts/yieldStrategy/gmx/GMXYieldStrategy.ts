/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export declare namespace RageERC4626 {
  export type RageERC4626InitParamsStruct = {
    asset: AddressLike;
    name: string;
    symbol: string;
  };

  export type RageERC4626InitParamsStructOutput = [
    asset: string,
    name: string,
    symbol: string
  ] & { asset: string; name: string; symbol: string };
}

export declare namespace BaseVault {
  export type BaseVaultInitParamsStruct = {
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStruct;
    ethPoolId: BigNumberish;
    swapSimulator: AddressLike;
    rageClearingHouse: AddressLike;
    clearingHouseLens: AddressLike;
    rageCollateralToken: AddressLike;
    rageSettlementToken: AddressLike;
  };

  export type BaseVaultInitParamsStructOutput = [
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStructOutput,
    ethPoolId: bigint,
    swapSimulator: string,
    rageClearingHouse: string,
    clearingHouseLens: string,
    rageCollateralToken: string,
    rageSettlementToken: string
  ] & {
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStructOutput;
    ethPoolId: bigint;
    swapSimulator: string;
    rageClearingHouse: string;
    clearingHouseLens: string;
    rageCollateralToken: string;
    rageSettlementToken: string;
  };
}

export declare namespace EightyTwentyRangeStrategyVault {
  export type EightyTwentyRangeStrategyVaultInitParamsStruct = {
    baseVaultInitParams: BaseVault.BaseVaultInitParamsStruct;
    closePositionSlippageSqrtToleranceBps: BigNumberish;
    resetPositionThresholdBps: BigNumberish;
    minNotionalPositionToCloseThreshold: BigNumberish;
  };

  export type EightyTwentyRangeStrategyVaultInitParamsStructOutput = [
    baseVaultInitParams: BaseVault.BaseVaultInitParamsStructOutput,
    closePositionSlippageSqrtToleranceBps: bigint,
    resetPositionThresholdBps: bigint,
    minNotionalPositionToCloseThreshold: bigint
  ] & {
    baseVaultInitParams: BaseVault.BaseVaultInitParamsStructOutput;
    closePositionSlippageSqrtToleranceBps: bigint;
    resetPositionThresholdBps: bigint;
    minNotionalPositionToCloseThreshold: bigint;
  };
}

export declare namespace GMXYieldStrategy {
  export type GMXYieldStrategyInitParamsStruct = {
    eightyTwentyRangeStrategyVaultInitParams: EightyTwentyRangeStrategyVault.EightyTwentyRangeStrategyVaultInitParamsStruct;
    rewardRouter: AddressLike;
  };

  export type GMXYieldStrategyInitParamsStructOutput = [
    eightyTwentyRangeStrategyVaultInitParams: EightyTwentyRangeStrategyVault.EightyTwentyRangeStrategyVaultInitParamsStructOutput,
    rewardRouter: string
  ] & {
    eightyTwentyRangeStrategyVaultInitParams: EightyTwentyRangeStrategyVault.EightyTwentyRangeStrategyVaultInitParamsStructOutput;
    rewardRouter: string;
  };
}

export interface GMXYieldStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'MAX_BPS'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'baseLiquidity'
      | 'baseTickLower'
      | 'baseTickUpper'
      | 'closePositionSlippageSqrtToleranceBps'
      | 'closeTokenPosition'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositCap'
      | 'ethPoolId'
      | 'extsload(bytes32)'
      | 'extsload(bytes32[])'
      | 'getMarketValue'
      | 'getPriceX128'
      | 'getVaultMarketValue'
      | 'grantAllowances'
      | 'increaseAllowance'
      | 'initialize'
      | 'isReset'
      | 'isValidRebalance'
      | 'keeper'
      | 'lastRebalanceTS'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'minNotionalPositionToCloseThreshold'
      | 'mint'
      | 'name'
      | 'owner'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'rageAccountNo'
      | 'rageClearingHouse'
      | 'rageVPool'
      | 'rebalance'
      | 'rebalancePriceThresholdBps'
      | 'rebalanceTimeThreshold'
      | 'redeem'
      | 'redeemToken'
      | 'renounceOwnership'
      | 'setEightTwentyParams'
      | 'swapSimulator'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'updateBaseParams'
      | 'updateGMXParams'
      | 'usdcConversionThreshold'
      | 'usdcReedemSlippage'
      | 'withdraw'
      | 'withdrawToken'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'Approval'
      | 'Deposit'
      | 'GmxParamsUpdated'
      | 'Initialized'
      | 'OwnershipTransferred'
      | 'TokenWithdrawn'
      | 'Transfer'
      | 'Withdraw'
      | 'BaseParamsUpdated'
      | 'CrvSwapFailedDueToSlippage'
      | 'CurveParamsUpdated'
      | 'EightyTwentyParamsUpdated'
      | 'FeesUpdated'
      | 'FeesWithdrawn'
      | 'Harvested'
      | 'Rebalance'
      | 'Staked'
      | 'StateInfo'
      | 'TokenPositionClosed'
  ): EventFragment;

  encodeFunctionData(functionFragment: 'MAX_BPS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'baseLiquidity',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'baseTickLower',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'baseTickUpper',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'closePositionSlippageSqrtToleranceBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'closeTokenPosition',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCap',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'ethPoolId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'extsload(bytes32)',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'extsload(bytes32[])',
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarketValue',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPriceX128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultMarketValue',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'grantAllowances',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [GMXYieldStrategy.GMXYieldStrategyInitParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: 'isReset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isValidRebalance',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lastRebalanceTS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'maxDeposit',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxMint',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxRedeem',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxWithdraw',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'minNotionalPositionToCloseThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'rageAccountNo',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rageClearingHouse',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'rageVPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rebalance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rebalancePriceThresholdBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceTimeThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemToken',
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setEightTwentyParams',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapSimulator',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateBaseParams',
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateGMXParams',
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'usdcConversionThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'usdcReedemSlippage',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawToken',
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: 'MAX_BPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'baseLiquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'baseTickLower',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'baseTickUpper',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'closePositionSlippageSqrtToleranceBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'closeTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ethPoolId', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'extsload(bytes32)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'extsload(bytes32[])',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVaultMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'grantAllowances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isReset', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isValidRebalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastRebalanceTS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'minNotionalPositionToCloseThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewRedeem',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rageAccountNo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rageClearingHouse',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'rageVPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rebalancePriceThresholdBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceTimeThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'redeemToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setEightTwentyParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapSimulator',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateBaseParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateGMXParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'usdcConversionThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'usdcReedemSlippage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawToken',
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GmxParamsUpdatedEvent {
  export type InputTuple = [
    stakingManager: AddressLike,
    usdcReedemSlippage: BigNumberish,
    usdcConversionThreshold: BigNumberish
  ];
  export type OutputTuple = [
    stakingManager: string,
    usdcReedemSlippage: bigint,
    usdcConversionThreshold: bigint
  ];
  export interface OutputObject {
    stakingManager: string;
    usdcReedemSlippage: bigint;
    usdcConversionThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWithdrawnEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    receiver: AddressLike,
    token: AddressLike,
    sGLPQuantity: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    owner: string,
    receiver: string,
    token: string,
    sGLPQuantity: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    owner: string;
    receiver: string;
    token: string;
    sGLPQuantity: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseParamsUpdatedEvent {
  export type InputTuple = [
    newDepositCap: BigNumberish,
    newKeeperAddress: AddressLike,
    rebalanceTimeThreshold: BigNumberish,
    rebalancePriceThresholdBps: BigNumberish
  ];
  export type OutputTuple = [
    newDepositCap: bigint,
    newKeeperAddress: string,
    rebalanceTimeThreshold: bigint,
    rebalancePriceThresholdBps: bigint
  ];
  export interface OutputObject {
    newDepositCap: bigint;
    newKeeperAddress: string;
    rebalanceTimeThreshold: bigint;
    rebalancePriceThresholdBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrvSwapFailedDueToSlippageEvent {
  export type InputTuple = [crvSlippageTolerance: BigNumberish];
  export type OutputTuple = [crvSlippageTolerance: bigint];
  export interface OutputObject {
    crvSlippageTolerance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CurveParamsUpdatedEvent {
  export type InputTuple = [
    feeBps: BigNumberish,
    stablecoinSlippage: BigNumberish,
    crvHarvestThreshold: BigNumberish,
    crvSlippageTolerance: BigNumberish,
    crvOracle: AddressLike
  ];
  export type OutputTuple = [
    feeBps: bigint,
    stablecoinSlippage: bigint,
    crvHarvestThreshold: bigint,
    crvSlippageTolerance: bigint,
    crvOracle: string
  ];
  export interface OutputObject {
    feeBps: bigint;
    stablecoinSlippage: bigint;
    crvHarvestThreshold: bigint;
    crvSlippageTolerance: bigint;
    crvOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EightyTwentyParamsUpdatedEvent {
  export type InputTuple = [
    closePositionSlippageSqrtToleranceBps: BigNumberish,
    resetPositionThresholdBps: BigNumberish,
    minNotionalPositionToCloseThreshold: BigNumberish
  ];
  export type OutputTuple = [
    closePositionSlippageSqrtToleranceBps: bigint,
    resetPositionThresholdBps: bigint,
    minNotionalPositionToCloseThreshold: bigint
  ];
  export interface OutputObject {
    closePositionSlippageSqrtToleranceBps: bigint;
    resetPositionThresholdBps: bigint;
    minNotionalPositionToCloseThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [total: BigNumberish];
  export type OutputTuple = [total: bigint];
  export interface OutputObject {
    total: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestedEvent {
  export type InputTuple = [crvAmount: BigNumberish];
  export type OutputTuple = [crvAmount: bigint];
  export interface OutputObject {
    crvAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [amount: BigNumberish, depositor: AddressLike];
  export type OutputTuple = [amount: bigint, depositor: string];
  export interface OutputObject {
    amount: bigint;
    depositor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StateInfoEvent {
  export type InputTuple = [lpPrice: BigNumberish];
  export type OutputTuple = [lpPrice: bigint];
  export interface OutputObject {
    lpPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPositionClosedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GMXYieldStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: GMXYieldStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BPS: TypedContractMethod<[], [bigint], 'view'>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    'view'
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  asset: TypedContractMethod<[], [string], 'view'>;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], 'view'>;

  baseLiquidity: TypedContractMethod<[], [bigint], 'view'>;

  baseTickLower: TypedContractMethod<[], [bigint], 'view'>;

  baseTickUpper: TypedContractMethod<[], [bigint], 'view'>;

  closePositionSlippageSqrtToleranceBps: TypedContractMethod<
    [],
    [bigint],
    'view'
  >;

  closeTokenPosition: TypedContractMethod<[], [void], 'nonpayable'>;

  convertToAssets: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    'view'
  >;

  convertToShares: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    'view'
  >;

  decimals: TypedContractMethod<[], [bigint], 'view'>;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  deposit: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;

  depositCap: TypedContractMethod<[], [bigint], 'view'>;

  ethPoolId: TypedContractMethod<[], [bigint], 'view'>;

  'extsload(bytes32)': TypedContractMethod<[slot: BytesLike], [string], 'view'>;

  'extsload(bytes32[])': TypedContractMethod<
    [slots: BytesLike[]],
    [string[]],
    'view'
  >;

  getMarketValue: TypedContractMethod<
    [assetAmount: BigNumberish],
    [bigint],
    'view'
  >;

  getPriceX128: TypedContractMethod<[], [bigint], 'view'>;

  getVaultMarketValue: TypedContractMethod<[], [bigint], 'view'>;

  grantAllowances: TypedContractMethod<[], [void], 'nonpayable'>;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  initialize: TypedContractMethod<
    [
      gmxYieldStrategyInitParams: GMXYieldStrategy.GMXYieldStrategyInitParamsStruct
    ],
    [void],
    'nonpayable'
  >;

  isReset: TypedContractMethod<[], [boolean], 'view'>;

  isValidRebalance: TypedContractMethod<
    [vaultMarketValue: BigNumberish],
    [boolean],
    'view'
  >;

  keeper: TypedContractMethod<[], [string], 'view'>;

  lastRebalanceTS: TypedContractMethod<[], [bigint], 'view'>;

  maxDeposit: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;

  maxMint: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;

  maxRedeem: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  maxWithdraw: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  minNotionalPositionToCloseThreshold: TypedContractMethod<
    [],
    [bigint],
    'view'
  >;

  mint: TypedContractMethod<
    [shares: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;

  name: TypedContractMethod<[], [string], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  previewDeposit: TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;

  previewMint: TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;

  previewRedeem: TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;

  previewWithdraw: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    'view'
  >;

  rageAccountNo: TypedContractMethod<[], [bigint], 'view'>;

  rageClearingHouse: TypedContractMethod<[], [string], 'view'>;

  rageVPool: TypedContractMethod<[], [string], 'view'>;

  rebalance: TypedContractMethod<[], [void], 'nonpayable'>;

  rebalancePriceThresholdBps: TypedContractMethod<[], [bigint], 'view'>;

  rebalanceTimeThreshold: TypedContractMethod<[], [bigint], 'view'>;

  redeem: TypedContractMethod<
    [shares: BigNumberish, to: AddressLike, from: AddressLike],
    [bigint],
    'nonpayable'
  >;

  redeemToken: TypedContractMethod<
    [
      token: AddressLike,
      shares: BigNumberish,
      minTokenOut: BigNumberish,
      from: AddressLike,
      receiver: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  setEightTwentyParams: TypedContractMethod<
    [
      _closePositionSlippageSqrtToleranceBps: BigNumberish,
      _resetPositionThresholdBps: BigNumberish,
      _minNotionalPositionToCloseThreshold: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  swapSimulator: TypedContractMethod<[], [string], 'view'>;

  symbol: TypedContractMethod<[], [string], 'view'>;

  totalAssets: TypedContractMethod<[], [bigint], 'view'>;

  totalSupply: TypedContractMethod<[], [bigint], 'view'>;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  updateBaseParams: TypedContractMethod<
    [
      newDepositCap: BigNumberish,
      newKeeperAddress: AddressLike,
      _rebalanceTimeThreshold: BigNumberish,
      _rebalancePriceThresholdBps: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  updateGMXParams: TypedContractMethod<
    [
      _stakingManager: AddressLike,
      _usdcReedemSlippage: BigNumberish,
      _usdcConversionThreshold: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  usdcConversionThreshold: TypedContractMethod<[], [bigint], 'view'>;

  usdcReedemSlippage: TypedContractMethod<[], [bigint], 'view'>;

  withdraw: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike, from: AddressLike],
    [bigint],
    'nonpayable'
  >;

  withdrawToken: TypedContractMethod<
    [
      token: AddressLike,
      _sGLP: BigNumberish,
      minTokenOut: BigNumberish,
      from: AddressLike,
      receiver: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'MAX_BPS'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'allowance'
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'approve'
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'asset'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'balanceOf'
  ): TypedContractMethod<[account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'baseLiquidity'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'baseTickLower'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'baseTickUpper'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'closePositionSlippageSqrtToleranceBps'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'closeTokenPosition'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'convertToAssets'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'convertToShares'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'decimals'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'decreaseAllowance'
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'deposit'
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'depositCap'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'ethPoolId'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'extsload(bytes32)'
  ): TypedContractMethod<[slot: BytesLike], [string], 'view'>;
  getFunction(
    nameOrSignature: 'extsload(bytes32[])'
  ): TypedContractMethod<[slots: BytesLike[]], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'getMarketValue'
  ): TypedContractMethod<[assetAmount: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getPriceX128'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getVaultMarketValue'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'grantAllowances'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'increaseAllowance'
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [
      gmxYieldStrategyInitParams: GMXYieldStrategy.GMXYieldStrategyInitParamsStruct
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'isReset'
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isValidRebalance'
  ): TypedContractMethod<[vaultMarketValue: BigNumberish], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'keeper'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'lastRebalanceTS'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxDeposit'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxMint'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxRedeem'
  ): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxWithdraw'
  ): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'minNotionalPositionToCloseThreshold'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'mint'
  ): TypedContractMethod<
    [shares: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'name'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'owner'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'previewDeposit'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewMint'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewRedeem'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewWithdraw'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'rageAccountNo'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'rageClearingHouse'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'rageVPool'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'rebalance'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'rebalancePriceThresholdBps'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'rebalanceTimeThreshold'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'redeem'
  ): TypedContractMethod<
    [shares: BigNumberish, to: AddressLike, from: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'redeemToken'
  ): TypedContractMethod<
    [
      token: AddressLike,
      shares: BigNumberish,
      minTokenOut: BigNumberish,
      from: AddressLike,
      receiver: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'renounceOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setEightTwentyParams'
  ): TypedContractMethod<
    [
      _closePositionSlippageSqrtToleranceBps: BigNumberish,
      _resetPositionThresholdBps: BigNumberish,
      _minNotionalPositionToCloseThreshold: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'swapSimulator'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'symbol'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'totalAssets'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'totalSupply'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transfer'
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferFrom'
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateBaseParams'
  ): TypedContractMethod<
    [
      newDepositCap: BigNumberish,
      newKeeperAddress: AddressLike,
      _rebalanceTimeThreshold: BigNumberish,
      _rebalancePriceThresholdBps: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'updateGMXParams'
  ): TypedContractMethod<
    [
      _stakingManager: AddressLike,
      _usdcReedemSlippage: BigNumberish,
      _usdcConversionThreshold: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'usdcConversionThreshold'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'usdcReedemSlippage'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'withdraw'
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike, from: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'withdrawToken'
  ): TypedContractMethod<
    [
      token: AddressLike,
      _sGLP: BigNumberish,
      minTokenOut: BigNumberish,
      from: AddressLike,
      receiver: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  getEvent(
    key: 'Approval'
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: 'Deposit'
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: 'GmxParamsUpdated'
  ): TypedContractEvent<
    GmxParamsUpdatedEvent.InputTuple,
    GmxParamsUpdatedEvent.OutputTuple,
    GmxParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Initialized'
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'TokenWithdrawn'
  ): TypedContractEvent<
    TokenWithdrawnEvent.InputTuple,
    TokenWithdrawnEvent.OutputTuple,
    TokenWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: 'Transfer'
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: 'Withdraw'
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: 'BaseParamsUpdated'
  ): TypedContractEvent<
    BaseParamsUpdatedEvent.InputTuple,
    BaseParamsUpdatedEvent.OutputTuple,
    BaseParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'CrvSwapFailedDueToSlippage'
  ): TypedContractEvent<
    CrvSwapFailedDueToSlippageEvent.InputTuple,
    CrvSwapFailedDueToSlippageEvent.OutputTuple,
    CrvSwapFailedDueToSlippageEvent.OutputObject
  >;
  getEvent(
    key: 'CurveParamsUpdated'
  ): TypedContractEvent<
    CurveParamsUpdatedEvent.InputTuple,
    CurveParamsUpdatedEvent.OutputTuple,
    CurveParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'EightyTwentyParamsUpdated'
  ): TypedContractEvent<
    EightyTwentyParamsUpdatedEvent.InputTuple,
    EightyTwentyParamsUpdatedEvent.OutputTuple,
    EightyTwentyParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'FeesUpdated'
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'FeesWithdrawn'
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: 'Harvested'
  ): TypedContractEvent<
    HarvestedEvent.InputTuple,
    HarvestedEvent.OutputTuple,
    HarvestedEvent.OutputObject
  >;
  getEvent(
    key: 'Rebalance'
  ): TypedContractEvent<
    RebalanceEvent.InputTuple,
    RebalanceEvent.OutputTuple,
    RebalanceEvent.OutputObject
  >;
  getEvent(
    key: 'Staked'
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: 'StateInfo'
  ): TypedContractEvent<
    StateInfoEvent.InputTuple,
    StateInfoEvent.OutputTuple,
    StateInfoEvent.OutputObject
  >;
  getEvent(
    key: 'TokenPositionClosed'
  ): TypedContractEvent<
    TokenPositionClosedEvent.InputTuple,
    TokenPositionClosedEvent.OutputTuple,
    TokenPositionClosedEvent.OutputObject
  >;

  filters: {
    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    'Deposit(address,address,uint256,uint256)': TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    'GmxParamsUpdated(address,uint256,uint240)': TypedContractEvent<
      GmxParamsUpdatedEvent.InputTuple,
      GmxParamsUpdatedEvent.OutputTuple,
      GmxParamsUpdatedEvent.OutputObject
    >;
    GmxParamsUpdated: TypedContractEvent<
      GmxParamsUpdatedEvent.InputTuple,
      GmxParamsUpdatedEvent.OutputTuple,
      GmxParamsUpdatedEvent.OutputObject
    >;

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'TokenWithdrawn(address,address,address,address,uint256,uint256)': TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;
    TokenWithdrawn: TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    'Withdraw(address,address,address,uint256,uint256)': TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    'BaseParamsUpdated(uint256,address,uint32,uint16)': TypedContractEvent<
      BaseParamsUpdatedEvent.InputTuple,
      BaseParamsUpdatedEvent.OutputTuple,
      BaseParamsUpdatedEvent.OutputObject
    >;
    BaseParamsUpdated: TypedContractEvent<
      BaseParamsUpdatedEvent.InputTuple,
      BaseParamsUpdatedEvent.OutputTuple,
      BaseParamsUpdatedEvent.OutputObject
    >;

    'CrvSwapFailedDueToSlippage(uint256)': TypedContractEvent<
      CrvSwapFailedDueToSlippageEvent.InputTuple,
      CrvSwapFailedDueToSlippageEvent.OutputTuple,
      CrvSwapFailedDueToSlippageEvent.OutputObject
    >;
    CrvSwapFailedDueToSlippage: TypedContractEvent<
      CrvSwapFailedDueToSlippageEvent.InputTuple,
      CrvSwapFailedDueToSlippageEvent.OutputTuple,
      CrvSwapFailedDueToSlippageEvent.OutputObject
    >;

    'CurveParamsUpdated(uint256,uint256,uint256,uint256,address)': TypedContractEvent<
      CurveParamsUpdatedEvent.InputTuple,
      CurveParamsUpdatedEvent.OutputTuple,
      CurveParamsUpdatedEvent.OutputObject
    >;
    CurveParamsUpdated: TypedContractEvent<
      CurveParamsUpdatedEvent.InputTuple,
      CurveParamsUpdatedEvent.OutputTuple,
      CurveParamsUpdatedEvent.OutputObject
    >;

    'EightyTwentyParamsUpdated(uint16,uint16,uint64)': TypedContractEvent<
      EightyTwentyParamsUpdatedEvent.InputTuple,
      EightyTwentyParamsUpdatedEvent.OutputTuple,
      EightyTwentyParamsUpdatedEvent.OutputObject
    >;
    EightyTwentyParamsUpdated: TypedContractEvent<
      EightyTwentyParamsUpdatedEvent.InputTuple,
      EightyTwentyParamsUpdatedEvent.OutputTuple,
      EightyTwentyParamsUpdatedEvent.OutputObject
    >;

    'FeesUpdated(uint256)': TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    'FeesWithdrawn(uint256)': TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    'Harvested(uint256)': TypedContractEvent<
      HarvestedEvent.InputTuple,
      HarvestedEvent.OutputTuple,
      HarvestedEvent.OutputObject
    >;
    Harvested: TypedContractEvent<
      HarvestedEvent.InputTuple,
      HarvestedEvent.OutputTuple,
      HarvestedEvent.OutputObject
    >;

    'Rebalance()': TypedContractEvent<
      RebalanceEvent.InputTuple,
      RebalanceEvent.OutputTuple,
      RebalanceEvent.OutputObject
    >;
    Rebalance: TypedContractEvent<
      RebalanceEvent.InputTuple,
      RebalanceEvent.OutputTuple,
      RebalanceEvent.OutputObject
    >;

    'Staked(uint256,address)': TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    'StateInfo(uint256)': TypedContractEvent<
      StateInfoEvent.InputTuple,
      StateInfoEvent.OutputTuple,
      StateInfoEvent.OutputObject
    >;
    StateInfo: TypedContractEvent<
      StateInfoEvent.InputTuple,
      StateInfoEvent.OutputTuple,
      StateInfoEvent.OutputObject
    >;

    'TokenPositionClosed()': TypedContractEvent<
      TokenPositionClosedEvent.InputTuple,
      TokenPositionClosedEvent.OutputTuple,
      TokenPositionClosedEvent.OutputObject
    >;
    TokenPositionClosed: TypedContractEvent<
      TokenPositionClosedEvent.InputTuple,
      TokenPositionClosedEvent.OutputTuple,
      TokenPositionClosedEvent.OutputObject
    >;
  };
}
