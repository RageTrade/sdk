/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export interface ICurveStableSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'add_liquidity'
      | 'balances'
      | 'calc_token_amount'
      | 'exchange(uint256,uint256,uint256,uint256,bool)'
      | 'exchange(int128,int128,uint256,uint256)'
      | 'get_dy'
      | 'get_virtual_price'
      | 'remove_liquidity'
      | 'remove_liquidity_imbalance'
      | 'remove_liquidity_one_coin'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'add_liquidity',
    values: [[BigNumberish, BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'balances',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calc_token_amount',
    values: [[BigNumberish, BigNumberish, BigNumberish], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'exchange(uint256,uint256,uint256,uint256,bool)',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'exchange(int128,int128,uint256,uint256)',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'get_dy',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'get_virtual_price',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'remove_liquidity',
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: 'remove_liquidity_imbalance',
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'remove_liquidity_one_coin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'add_liquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'balances', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calc_token_amount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exchange(uint256,uint256,uint256,uint256,bool)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exchange(int128,int128,uint256,uint256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'get_dy', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'get_virtual_price',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'remove_liquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'remove_liquidity_imbalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'remove_liquidity_one_coin',
    data: BytesLike
  ): Result;
}

export interface ICurveStableSwap extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: ICurveStableSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add_liquidity: TypedContractMethod<
    [
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  balances: TypedContractMethod<[arg0: BigNumberish], [bigint], 'view'>;

  calc_token_amount: TypedContractMethod<
    [amounts: [BigNumberish, BigNumberish, BigNumberish], deposit: boolean],
    [bigint],
    'view'
  >;

  'exchange(uint256,uint256,uint256,uint256,bool)': TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: boolean
    ],
    [void],
    'nonpayable'
  >;

  'exchange(int128,int128,uint256,uint256)': TypedContractMethod<
    [
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      _min_to_amount: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  get_dy: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    'view'
  >;

  get_virtual_price: TypedContractMethod<[], [bigint], 'view'>;

  remove_liquidity: TypedContractMethod<
    [_amount: BigNumberish, amounts: [BigNumberish, BigNumberish]],
    [void],
    'nonpayable'
  >;

  remove_liquidity_imbalance: TypedContractMethod<
    [amounts: [BigNumberish, BigNumberish], max_burn_amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  remove_liquidity_one_coin: TypedContractMethod<
    [token_amount: BigNumberish, index: BigNumberish, min_amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'add_liquidity'
  ): TypedContractMethod<
    [
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'balances'
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'calc_token_amount'
  ): TypedContractMethod<
    [amounts: [BigNumberish, BigNumberish, BigNumberish], deposit: boolean],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'exchange(uint256,uint256,uint256,uint256,bool)'
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: boolean
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'exchange(int128,int128,uint256,uint256)'
  ): TypedContractMethod<
    [
      from: BigNumberish,
      to: BigNumberish,
      _from_amount: BigNumberish,
      _min_to_amount: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'get_dy'
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'get_virtual_price'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'remove_liquidity'
  ): TypedContractMethod<
    [_amount: BigNumberish, amounts: [BigNumberish, BigNumberish]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'remove_liquidity_imbalance'
  ): TypedContractMethod<
    [amounts: [BigNumberish, BigNumberish], max_burn_amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'remove_liquidity_one_coin'
  ): TypedContractMethod<
    [token_amount: BigNumberish, index: BigNumberish, min_amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  filters: {};
}
