/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export interface IGMXBatchingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'claim'
      | 'depositToken(address,uint256,uint256)'
      | 'depositToken(address,address,uint256,uint256,address)'
      | 'executeBatchDeposit'
      | 'glpBalance'
      | 'glpBalanceAllVaults'
      | 'stakingManagerGlpBalance'
      | 'unclaimedShares'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'BatchDeposit'
      | 'DepositToken'
      | 'KeeperUpdated'
      | 'SharesClaimed'
      | 'VaultAdded'
      | 'VaultDeposit'
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'claim',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositToken(address,uint256,uint256)',
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositToken(address,address,uint256,uint256,address)',
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'executeBatchDeposit',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'glpBalance',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'glpBalanceAllVaults',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'stakingManagerGlpBalance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'unclaimedShares',
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositToken(address,uint256,uint256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'depositToken(address,address,uint256,uint256,address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeBatchDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'glpBalance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'glpBalanceAllVaults',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stakingManagerGlpBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unclaimedShares',
    data: BytesLike
  ): Result;
}

export namespace BatchDepositEvent {
  export type InputTuple = [
    round: BigNumberish,
    userGlpAmount: BigNumberish,
    userShareAmount: BigNumberish
  ];
  export type OutputTuple = [
    round: bigint,
    userGlpAmount: bigint,
    userShareAmount: bigint
  ];
  export interface OutputObject {
    round: bigint;
    userGlpAmount: bigint;
    userShareAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositTokenEvent {
  export type InputTuple = [
    round: BigNumberish,
    token: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish,
    glpStaked: BigNumberish
  ];
  export type OutputTuple = [
    round: bigint,
    token: string,
    receiver: string,
    amount: bigint,
    glpStaked: bigint
  ];
  export interface OutputObject {
    round: bigint;
    token: string;
    receiver: string;
    amount: bigint;
    glpStaked: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeeperUpdatedEvent {
  export type InputTuple = [newKeeper: AddressLike];
  export type OutputTuple = [newKeeper: string];
  export interface OutputObject {
    newKeeper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SharesClaimedEvent {
  export type InputTuple = [
    from: AddressLike,
    receiver: AddressLike,
    claimAmount: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    receiver: string,
    claimAmount: bigint
  ];
  export interface OutputObject {
    from: string;
    receiver: string;
    claimAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultAddedEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultDepositEvent {
  export type InputTuple = [vaultGlpAmount: BigNumberish];
  export type OutputTuple = [vaultGlpAmount: bigint];
  export interface OutputObject {
    vaultGlpAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGMXBatchingManager extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: IGMXBatchingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [gmxVault: AddressLike, receiver: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  'depositToken(address,uint256,uint256)': TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, minUSDG: BigNumberish],
    [bigint],
    'nonpayable'
  >;

  'depositToken(address,address,uint256,uint256,address)': TypedContractMethod<
    [
      gmxVault: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      minUSDG: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    'nonpayable'
  >;

  executeBatchDeposit: TypedContractMethod<[], [void], 'nonpayable'>;

  glpBalance: TypedContractMethod<
    [gmxVault: AddressLike, account: AddressLike],
    [bigint],
    'view'
  >;

  glpBalanceAllVaults: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    'view'
  >;

  stakingManagerGlpBalance: TypedContractMethod<[], [bigint], 'view'>;

  unclaimedShares: TypedContractMethod<
    [gmxVault: AddressLike, account: AddressLike],
    [bigint],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'claim'
  ): TypedContractMethod<
    [gmxVault: AddressLike, receiver: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'depositToken(address,uint256,uint256)'
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, minUSDG: BigNumberish],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'depositToken(address,address,uint256,uint256,address)'
  ): TypedContractMethod<
    [
      gmxVault: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      minUSDG: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'executeBatchDeposit'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'glpBalance'
  ): TypedContractMethod<
    [gmxVault: AddressLike, account: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'glpBalanceAllVaults'
  ): TypedContractMethod<[account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'stakingManagerGlpBalance'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'unclaimedShares'
  ): TypedContractMethod<
    [gmxVault: AddressLike, account: AddressLike],
    [bigint],
    'view'
  >;

  getEvent(
    key: 'BatchDeposit'
  ): TypedContractEvent<
    BatchDepositEvent.InputTuple,
    BatchDepositEvent.OutputTuple,
    BatchDepositEvent.OutputObject
  >;
  getEvent(
    key: 'DepositToken'
  ): TypedContractEvent<
    DepositTokenEvent.InputTuple,
    DepositTokenEvent.OutputTuple,
    DepositTokenEvent.OutputObject
  >;
  getEvent(
    key: 'KeeperUpdated'
  ): TypedContractEvent<
    KeeperUpdatedEvent.InputTuple,
    KeeperUpdatedEvent.OutputTuple,
    KeeperUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'SharesClaimed'
  ): TypedContractEvent<
    SharesClaimedEvent.InputTuple,
    SharesClaimedEvent.OutputTuple,
    SharesClaimedEvent.OutputObject
  >;
  getEvent(
    key: 'VaultAdded'
  ): TypedContractEvent<
    VaultAddedEvent.InputTuple,
    VaultAddedEvent.OutputTuple,
    VaultAddedEvent.OutputObject
  >;
  getEvent(
    key: 'VaultDeposit'
  ): TypedContractEvent<
    VaultDepositEvent.InputTuple,
    VaultDepositEvent.OutputTuple,
    VaultDepositEvent.OutputObject
  >;

  filters: {
    'BatchDeposit(uint256,uint256,uint256)': TypedContractEvent<
      BatchDepositEvent.InputTuple,
      BatchDepositEvent.OutputTuple,
      BatchDepositEvent.OutputObject
    >;
    BatchDeposit: TypedContractEvent<
      BatchDepositEvent.InputTuple,
      BatchDepositEvent.OutputTuple,
      BatchDepositEvent.OutputObject
    >;

    'DepositToken(uint256,address,address,uint256,uint256)': TypedContractEvent<
      DepositTokenEvent.InputTuple,
      DepositTokenEvent.OutputTuple,
      DepositTokenEvent.OutputObject
    >;
    DepositToken: TypedContractEvent<
      DepositTokenEvent.InputTuple,
      DepositTokenEvent.OutputTuple,
      DepositTokenEvent.OutputObject
    >;

    'KeeperUpdated(address)': TypedContractEvent<
      KeeperUpdatedEvent.InputTuple,
      KeeperUpdatedEvent.OutputTuple,
      KeeperUpdatedEvent.OutputObject
    >;
    KeeperUpdated: TypedContractEvent<
      KeeperUpdatedEvent.InputTuple,
      KeeperUpdatedEvent.OutputTuple,
      KeeperUpdatedEvent.OutputObject
    >;

    'SharesClaimed(address,address,uint256)': TypedContractEvent<
      SharesClaimedEvent.InputTuple,
      SharesClaimedEvent.OutputTuple,
      SharesClaimedEvent.OutputObject
    >;
    SharesClaimed: TypedContractEvent<
      SharesClaimedEvent.InputTuple,
      SharesClaimedEvent.OutputTuple,
      SharesClaimedEvent.OutputObject
    >;

    'VaultAdded(address)': TypedContractEvent<
      VaultAddedEvent.InputTuple,
      VaultAddedEvent.OutputTuple,
      VaultAddedEvent.OutputObject
    >;
    VaultAdded: TypedContractEvent<
      VaultAddedEvent.InputTuple,
      VaultAddedEvent.OutputTuple,
      VaultAddedEvent.OutputObject
    >;

    'VaultDeposit(uint256)': TypedContractEvent<
      VaultDepositEvent.InputTuple,
      VaultDepositEvent.OutputTuple,
      VaultDepositEvent.OutputObject
    >;
    VaultDeposit: TypedContractEvent<
      VaultDepositEvent.InputTuple,
      VaultDepositEvent.OutputTuple,
      VaultDepositEvent.OutputObject
    >;
  };
}
