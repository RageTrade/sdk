/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export interface IRewardTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'averageStakedAmounts'
      | 'claim'
      | 'claimForAccount'
      | 'claimable'
      | 'cumulativeRewards'
      | 'depositBalances'
      | 'stake'
      | 'stakeForAccount'
      | 'stakedAmounts'
      | 'tokensPerInterval'
      | 'unstake'
      | 'unstakeForAccount'
      | 'updateRewards'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'averageStakedAmounts',
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: 'claim', values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'claimForAccount',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimable',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'cumulativeRewards',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositBalances',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'stake',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeForAccount',
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'stakedAmounts',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'tokensPerInterval',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'unstake',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'unstakeForAccount',
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRewards',
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: 'averageStakedAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'claimForAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'claimable', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'cumulativeRewards',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'depositBalances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'stakeForAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stakedAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokensPerInterval',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'unstakeForAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRewards',
    data: BytesLike
  ): Result;
}

export interface IRewardTracker extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: IRewardTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  averageStakedAmounts: TypedContractMethod<
    [_account: AddressLike],
    [bigint],
    'view'
  >;

  claim: TypedContractMethod<[_receiver: AddressLike], [bigint], 'nonpayable'>;

  claimForAccount: TypedContractMethod<
    [_account: AddressLike, _receiver: AddressLike],
    [bigint],
    'nonpayable'
  >;

  claimable: TypedContractMethod<[_account: AddressLike], [bigint], 'view'>;

  cumulativeRewards: TypedContractMethod<
    [_account: AddressLike],
    [bigint],
    'view'
  >;

  depositBalances: TypedContractMethod<
    [_account: AddressLike, _depositToken: AddressLike],
    [bigint],
    'view'
  >;

  stake: TypedContractMethod<
    [_depositToken: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  stakeForAccount: TypedContractMethod<
    [
      _fundingAccount: AddressLike,
      _account: AddressLike,
      _depositToken: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  stakedAmounts: TypedContractMethod<[_account: AddressLike], [bigint], 'view'>;

  tokensPerInterval: TypedContractMethod<[], [bigint], 'view'>;

  unstake: TypedContractMethod<
    [_depositToken: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  unstakeForAccount: TypedContractMethod<
    [
      _account: AddressLike,
      _depositToken: AddressLike,
      _amount: BigNumberish,
      _receiver: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  updateRewards: TypedContractMethod<[], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'averageStakedAmounts'
  ): TypedContractMethod<[_account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'claim'
  ): TypedContractMethod<[_receiver: AddressLike], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'claimForAccount'
  ): TypedContractMethod<
    [_account: AddressLike, _receiver: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'claimable'
  ): TypedContractMethod<[_account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'cumulativeRewards'
  ): TypedContractMethod<[_account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'depositBalances'
  ): TypedContractMethod<
    [_account: AddressLike, _depositToken: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'stake'
  ): TypedContractMethod<
    [_depositToken: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'stakeForAccount'
  ): TypedContractMethod<
    [
      _fundingAccount: AddressLike,
      _account: AddressLike,
      _depositToken: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'stakedAmounts'
  ): TypedContractMethod<[_account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'tokensPerInterval'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'unstake'
  ): TypedContractMethod<
    [_depositToken: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'unstakeForAccount'
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _depositToken: AddressLike,
      _amount: BigNumberish,
      _receiver: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'updateRewards'
  ): TypedContractMethod<[], [void], 'nonpayable'>;

  filters: {};
}
