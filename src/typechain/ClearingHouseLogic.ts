/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace IClearingHouseStructures {
  export type CollateralSettingsStruct = {
    oracle: string;
    twapDuration: BigNumberish;
    supported: boolean;
  };

  export type CollateralSettingsStructOutput = [string, number, boolean] & {
    oracle: string;
    twapDuration: number;
    supported: boolean;
  };

  export type PoolSettingsStruct = {
    initialMarginRatio: BigNumberish;
    maintainanceMarginRatio: BigNumberish;
    twapDuration: BigNumberish;
    supported: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type PoolSettingsStructOutput = [
    number,
    number,
    number,
    boolean,
    boolean,
    string
  ] & {
    initialMarginRatio: number;
    maintainanceMarginRatio: number;
    twapDuration: number;
    supported: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type LiquidationParamsStruct = {
    liquidationFeeFraction: BigNumberish;
    tokenLiquidationPriceDeltaBps: BigNumberish;
    insuranceFundFeeShareBps: BigNumberish;
    maxRangeLiquidationFees: BigNumberish;
  };

  export type LiquidationParamsStructOutput = [
    number,
    number,
    number,
    BigNumber
  ] & {
    liquidationFeeFraction: number;
    tokenLiquidationPriceDeltaBps: number;
    insuranceFundFeeShareBps: number;
    maxRangeLiquidationFees: BigNumber;
  };

  export type DepositTokenViewStruct = {
    cTokenAddress: string;
    balance: BigNumberish;
  };

  export type DepositTokenViewStructOutput = [string, BigNumber] & {
    cTokenAddress: string;
    balance: BigNumber;
  };

  export type LiquidityPositionViewStruct = {
    limitOrderType: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidity: BigNumberish;
    vTokenAmountIn: BigNumberish;
    sumALastX128: BigNumberish;
    sumBInsideLastX128: BigNumberish;
    sumFpInsideLastX128: BigNumberish;
    sumFeeInsideLastX128: BigNumberish;
  };

  export type LiquidityPositionViewStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    limitOrderType: number;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    vTokenAmountIn: BigNumber;
    sumALastX128: BigNumber;
    sumBInsideLastX128: BigNumber;
    sumFpInsideLastX128: BigNumber;
    sumFeeInsideLastX128: BigNumber;
  };

  export type VTokenPositionViewStruct = {
    vTokenAddress: string;
    balance: BigNumberish;
    netTraderPosition: BigNumberish;
    sumAX128Ckpt: BigNumberish;
    liquidityPositions: IClearingHouseStructures.LiquidityPositionViewStruct[];
  };

  export type VTokenPositionViewStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    IClearingHouseStructures.LiquidityPositionViewStructOutput[]
  ] & {
    vTokenAddress: string;
    balance: BigNumber;
    netTraderPosition: BigNumber;
    sumAX128Ckpt: BigNumber;
    liquidityPositions: IClearingHouseStructures.LiquidityPositionViewStructOutput[];
  };

  export type CollateralStruct = {
    token: string;
    settings: IClearingHouseStructures.CollateralSettingsStruct;
  };

  export type CollateralStructOutput = [
    string,
    IClearingHouseStructures.CollateralSettingsStructOutput
  ] & {
    token: string;
    settings: IClearingHouseStructures.CollateralSettingsStructOutput;
  };

  export type PoolStruct = {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStruct;
  };

  export type PoolStructOutput = [
    string,
    string,
    string,
    IClearingHouseStructures.PoolSettingsStructOutput
  ] & {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  };

  export type BalanceAdjustmentsStruct = {
    vBaseIncrease: BigNumberish;
    vTokenIncrease: BigNumberish;
    traderPositionIncrease: BigNumberish;
  };

  export type BalanceAdjustmentsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    vBaseIncrease: BigNumber;
    vTokenIncrease: BigNumber;
    traderPositionIncrease: BigNumber;
  };

  export type MulticallOperationStruct = {
    operationType: BigNumberish;
    data: BytesLike;
  };

  export type MulticallOperationStructOutput = [number, string] & {
    operationType: number;
    data: string;
  };

  export type SwapParamsStruct = {
    amount: BigNumberish;
    sqrtPriceLimit: BigNumberish;
    isNotional: boolean;
    isPartialAllowed: boolean;
  };

  export type SwapParamsStructOutput = [
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    amount: BigNumber;
    sqrtPriceLimit: BigNumber;
    isNotional: boolean;
    isPartialAllowed: boolean;
  };

  export type LiquidityChangeParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
    sqrtPriceCurrent: BigNumberish;
    slippageToleranceBps: BigNumberish;
    closeTokenPosition: boolean;
    limitOrderType: BigNumberish;
  };

  export type LiquidityChangeParamsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    number,
    boolean,
    number
  ] & {
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
    sqrtPriceCurrent: BigNumber;
    slippageToleranceBps: number;
    closeTokenPosition: boolean;
    limitOrderType: number;
  };
}

export interface ClearingHouseLogicInterface extends utils.Interface {
  contractName: 'ClearingHouseLogic';
  functions: {
    '__initialize_ClearingHouse(address,address,address,address,address,address)': FunctionFragment;
    'addMargin(uint256,uint32,uint256)': FunctionFragment;
    'createAccount()': FunctionFragment;
    'createAccountAndAddMargin(uint32,uint256)': FunctionFragment;
    'extsload(bytes32)': FunctionFragment;
    'getAccountInfo(uint256)': FunctionFragment;
    'getAccountMarketValueAndRequiredMargin(uint256,bool)': FunctionFragment;
    'getAccountNetProfit(uint256)': FunctionFragment;
    'getCollateralInfo(uint32)': FunctionFragment;
    'getNetTokenPosition(uint256,uint32)': FunctionFragment;
    'getPoolInfo(uint32)': FunctionFragment;
    'getTwapSqrtPricesForSetDuration(address)': FunctionFragment;
    'governance()': FunctionFragment;
    'insuranceFund()': FunctionFragment;
    'isVTokenAddressAvailable(uint32)': FunctionFragment;
    'liquidateLiquidityPositions(uint256)': FunctionFragment;
    'liquidateLiquidityPositionsWithGasClaim(uint256,uint256)': FunctionFragment;
    'liquidateTokenPosition(uint256,uint256,uint32,uint16)': FunctionFragment;
    'liquidateTokenPositionWithGasClaim(uint256,uint256,uint32,uint16,uint256)': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'multicallWithSingleMarginCheck(uint256,(uint8,bytes)[])': FunctionFragment;
    'nativeOracle()': FunctionFragment;
    'numAccounts()': FunctionFragment;
    'paused()': FunctionFragment;
    'protocolInfo()': FunctionFragment;
    'rageTradeFactoryAddress()': FunctionFragment;
    'registerPool((address,address,address,(uint16,uint16,uint32,bool,bool,address)))': FunctionFragment;
    'removeLimitOrder(uint256,uint32,int24,int24)': FunctionFragment;
    'removeLimitOrderWithGasClaim(uint256,uint32,int24,int24,uint256)': FunctionFragment;
    'removeMargin(uint256,uint32,uint256)': FunctionFragment;
    'setPaused(bool)': FunctionFragment;
    'setTxGasPriceLimit(uint256)': FunctionFragment;
    'swapToken(uint256,uint32,(int256,uint160,bool,bool))': FunctionFragment;
    'teamMultisig()': FunctionFragment;
    'transferGovernance(address)': FunctionFragment;
    'transferTeamMultisig(address)': FunctionFragment;
    'txGasPriceLimit()': FunctionFragment;
    'updateCollateralSettings(address,(address,uint32,bool))': FunctionFragment;
    'updatePoolSettings(uint32,(uint16,uint16,uint32,bool,bool,address))': FunctionFragment;
    'updateProfit(uint256,int256)': FunctionFragment;
    'updateProtocolSettings((uint16,uint16,uint16,uint128),uint256,uint256,uint256)': FunctionFragment;
    'updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8))': FunctionFragment;
    'withdrawProtocolFee(address[])': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: '__initialize_ClearingHouse',
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'addMargin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccount',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccountAndAddMargin',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'extsload', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'getAccountInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountNetProfit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCollateralInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getNetTokenPosition',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTwapSqrtPricesForSetDuration',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'governance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'insuranceFund',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isVTokenAddressAvailable',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositions',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositionsWithGasClaim',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPosition',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPositionWithGasClaim',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'multicall',
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'multicallWithSingleMarginCheck',
    values: [BigNumberish, IClearingHouseStructures.MulticallOperationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'nativeOracle',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'numAccounts',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'protocolInfo',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rageTradeFactoryAddress',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [IClearingHouseStructures.PoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrder',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrderWithGasClaim',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeMargin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'setPaused', values: [boolean]): string;
  encodeFunctionData(
    functionFragment: 'setTxGasPriceLimit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapToken',
    values: [
      BigNumberish,
      BigNumberish,
      IClearingHouseStructures.SwapParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'teamMultisig',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferGovernance',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTeamMultisig',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'txGasPriceLimit',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'updateCollateralSettings',
    values: [string, IClearingHouseStructures.CollateralSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePoolSettings',
    values: [BigNumberish, IClearingHouseStructures.PoolSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProfit',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProtocolSettings',
    values: [
      IClearingHouseStructures.LiquidationParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRangeOrder',
    values: [
      BigNumberish,
      BigNumberish,
      IClearingHouseStructures.LiquidityChangeParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawProtocolFee',
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: '__initialize_ClearingHouse',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'addMargin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'createAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createAccountAndAddMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'extsload', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountNetProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCollateralInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNetTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPoolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTwapSqrtPricesForSetDuration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'insuranceFund',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isVTokenAddressAvailable',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositionsWithGasClaim',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPositionWithGasClaim',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'multicallWithSingleMarginCheck',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nativeOracle',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'numAccounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'protocolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rageTradeFactoryAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrderWithGasClaim',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setTxGasPriceLimit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'teamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferGovernance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferTeamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'txGasPriceLimit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateCollateralSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updatePoolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProtocolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRangeOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawProtocolFee',
    data: BytesLike
  ): Result;

  events: {
    'AccountCreated(address,uint256)': EventFragment;
    'CollateralSettingsUpdated(address,tuple)': EventFragment;
    'GovernanceTransferred(address,address)': EventFragment;
    'MarginAdded(uint256,uint32,uint256)': EventFragment;
    'MarginRemoved(uint256,uint32,uint256)': EventFragment;
    'PausedUpdated(bool)': EventFragment;
    'PoolSettingsUpdated(uint32,tuple)': EventFragment;
    'ProtocolSettingsUpdated(tuple,uint256,uint256,uint256)': EventFragment;
    'TeamMultisigTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccountCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralSettingsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarginAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarginRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PausedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolSettingsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolSettingsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TeamMultisigTransferred'): EventFragment;
}

export type AccountCreatedEvent = TypedEvent<
  [string, BigNumber],
  { ownerAddress: string; accountId: BigNumber }
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export type CollateralSettingsUpdatedEvent = TypedEvent<
  [string, IClearingHouseStructures.CollateralSettingsStructOutput],
  {
    cToken: string;
    cTokenInfo: IClearingHouseStructures.CollateralSettingsStructOutput;
  }
>;

export type CollateralSettingsUpdatedEventFilter = TypedEventFilter<CollateralSettingsUpdatedEvent>;

export type GovernanceTransferredEvent = TypedEvent<
  [string, string],
  { previousGovernance: string; newGovernance: string }
>;

export type GovernanceTransferredEventFilter = TypedEventFilter<GovernanceTransferredEvent>;

export type MarginAddedEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  { accountId: BigNumber; collateralId: number; amount: BigNumber }
>;

export type MarginAddedEventFilter = TypedEventFilter<MarginAddedEvent>;

export type MarginRemovedEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  { accountId: BigNumber; collateralId: number; amount: BigNumber }
>;

export type MarginRemovedEventFilter = TypedEventFilter<MarginRemovedEvent>;

export type PausedUpdatedEvent = TypedEvent<[boolean], { paused: boolean }>;

export type PausedUpdatedEventFilter = TypedEventFilter<PausedUpdatedEvent>;

export type PoolSettingsUpdatedEvent = TypedEvent<
  [number, IClearingHouseStructures.PoolSettingsStructOutput],
  {
    poolId: number;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  }
>;

export type PoolSettingsUpdatedEventFilter = TypedEventFilter<PoolSettingsUpdatedEvent>;

export type ProtocolSettingsUpdatedEvent = TypedEvent<
  [
    IClearingHouseStructures.LiquidationParamsStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
    removeLimitOrderFee: BigNumber;
    minimumOrderNotional: BigNumber;
    minRequiredMargin: BigNumber;
  }
>;

export type ProtocolSettingsUpdatedEventFilter = TypedEventFilter<ProtocolSettingsUpdatedEvent>;

export type TeamMultisigTransferredEvent = TypedEvent<
  [string, string],
  { previousTeamMultisig: string; newTeamMultisig: string }
>;

export type TeamMultisigTransferredEventFilter = TypedEventFilter<TeamMultisigTransferredEvent>;

export interface ClearingHouseLogic extends BaseContract {
  contractName: 'ClearingHouseLogic';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClearingHouseLogicInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * SYSTEM FUNCTIONS
     */
    __initialize_ClearingHouse(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * deposits 'amount' of token associated with 'poolId'
     */
    addMargin(
      accountId: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * creates a new account and adds it to the accounts map
     */
    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * creates a new account and deposits 'amount' of token associated with 'poolId'
     */
    createAccountAndAddMargin(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { val: string }>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * Account.Info VIEW
     */
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        IClearingHouseStructures.DepositTokenViewStructOutput[],
        IClearingHouseStructures.VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vBaseBalance: BigNumber;
        tokenDeposits: IClearingHouseStructures.DepositTokenViewStructOutput[];
        tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
      }
    >;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accountNetProfit: BigNumber }>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IClearingHouseStructures.CollateralStructOutput]>;

    getNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netPosition: BigNumber }>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IClearingHouseStructures.PoolStructOutput]>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<[string]>;

    insuranceFund(overrides?: CallOverrides): Promise<[string]>;

    isVTokenAddressAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * keeper call for liquidation of range position
     */
    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * keeper call for liquidation of range position
     */
    liquidateLiquidityPositionsWithGasClaim(
      accountId: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * keeper call for liquidation of token position
     */
    liquidateTokenPosition(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * keeper call for liquidation of token position
     */
    liquidateTokenPositionWithGasClaim(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Call multiple functions in the current contract and return the data from all of them if they all succeed
     */
    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicallWithSingleMarginCheck(
      accountId: BigNumberish,
      operations: IClearingHouseStructures.MulticallOperationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nativeOracle(overrides?: CallOverrides): Promise<[string]>;

    numAccounts(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Protocol.Info VIEW
     */
    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * keeper call to remove a limit order
     */
    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * ALTERNATE LIQUIDATION METHODS FOR FIX FEE CLAIM
     */
    removeLimitOrderWithGasClaim(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * withdraws 'amount' of token associated with 'poolId'
     */
    removeMargin(
      accountId: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTxGasPriceLimit(
      _txGasPriceLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<[string]>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    txGasPriceLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * withdraws 'amount' of base token from the profit made
     */
    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolSettings(
      _liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * withdraws protocol fees collected in the supplied wrappers to team multisig
     */
    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * SYSTEM FUNCTIONS
   */
  __initialize_ClearingHouse(
    _rageTradeFactoryAddress: string,
    _defaultCollateralToken: string,
    _defaultCollateralTokenOracle: string,
    _insuranceFund: string,
    _vBase: string,
    _nativeOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * deposits 'amount' of token associated with 'poolId'
   */
  addMargin(
    accountId: BigNumberish,
    cTokenTruncatedAddress: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * creates a new account and adds it to the accounts map
   */
  createAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * creates a new account and deposits 'amount' of token associated with 'poolId'
   */
  createAccountAndAddMargin(
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'extsload(bytes32)'(
    slot: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  'extsload(bytes32[])'(
    slots: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Account.Info VIEW
   */
  getAccountInfo(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      IClearingHouseStructures.DepositTokenViewStructOutput[],
      IClearingHouseStructures.VTokenPositionViewStructOutput[]
    ] & {
      owner: string;
      vBaseBalance: BigNumber;
      tokenDeposits: IClearingHouseStructures.DepositTokenViewStructOutput[];
      tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
    }
  >;

  getAccountMarketValueAndRequiredMargin(
    accountId: BigNumberish,
    isInitialMargin: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      accountMarketValue: BigNumber;
      requiredMargin: BigNumber;
    }
  >;

  getAccountNetProfit(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralInfo(
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IClearingHouseStructures.CollateralStructOutput>;

  getNetTokenPosition(
    accountId: BigNumberish,
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolInfo(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IClearingHouseStructures.PoolStructOutput>;

  getTwapSqrtPricesForSetDuration(
    vToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      realPriceX128: BigNumber;
      virtualPriceX128: BigNumber;
    }
  >;

  governance(overrides?: CallOverrides): Promise<string>;

  insuranceFund(overrides?: CallOverrides): Promise<string>;

  isVTokenAddressAvailable(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * keeper call for liquidation of range position
   */
  liquidateLiquidityPositions(
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * keeper call for liquidation of range position
   */
  liquidateLiquidityPositionsWithGasClaim(
    accountId: BigNumberish,
    gasComputationUnitsClaim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * keeper call for liquidation of token position
   */
  liquidateTokenPosition(
    liquidatorAccountId: BigNumberish,
    targetAccountId: BigNumberish,
    poolId: BigNumberish,
    liquidationBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * keeper call for liquidation of token position
   */
  liquidateTokenPositionWithGasClaim(
    liquidatorAccountId: BigNumberish,
    targetAccountId: BigNumberish,
    poolId: BigNumberish,
    liquidationBps: BigNumberish,
    gasComputationUnitsClaim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Call multiple functions in the current contract and return the data from all of them if they all succeed
   */
  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicallWithSingleMarginCheck(
    accountId: BigNumberish,
    operations: IClearingHouseStructures.MulticallOperationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nativeOracle(overrides?: CallOverrides): Promise<string>;

  numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Protocol.Info VIEW
   */
  protocolInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      IClearingHouseStructures.LiquidationParamsStructOutput,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      vBase: string;
      liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
      minRequiredMargin: BigNumber;
      removeLimitOrderFee: BigNumber;
      minimumOrderNotional: BigNumber;
    }
  >;

  rageTradeFactoryAddress(overrides?: CallOverrides): Promise<string>;

  registerPool(
    poolInfo: IClearingHouseStructures.PoolStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * keeper call to remove a limit order
   */
  removeLimitOrder(
    accountId: BigNumberish,
    poolId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * ALTERNATE LIQUIDATION METHODS FOR FIX FEE CLAIM
   */
  removeLimitOrderWithGasClaim(
    accountId: BigNumberish,
    poolId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    gasComputationUnitsClaim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * withdraws 'amount' of token associated with 'poolId'
   */
  removeMargin(
    accountId: BigNumberish,
    cTokenTruncatedAddress: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTxGasPriceLimit(
    _txGasPriceLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToken(
    accountId: BigNumberish,
    poolId: BigNumberish,
    swapParams: IClearingHouseStructures.SwapParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  teamMultisig(overrides?: CallOverrides): Promise<string>;

  transferGovernance(
    newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTeamMultisig(
    newTeamMultisig: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  txGasPriceLimit(overrides?: CallOverrides): Promise<BigNumber>;

  updateCollateralSettings(
    cToken: string,
    collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolSettings(
    poolId: BigNumberish,
    newSettings: IClearingHouseStructures.PoolSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * withdraws 'amount' of base token from the profit made
   */
  updateProfit(
    accountId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolSettings(
    _liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
    _removeLimitOrderFee: BigNumberish,
    _minimumOrderNotional: BigNumberish,
    _minRequiredMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRangeOrder(
    accountId: BigNumberish,
    poolId: BigNumberish,
    liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * withdraws protocol fees collected in the supplied wrappers to team multisig
   */
  withdrawProtocolFee(
    wrapperAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * SYSTEM FUNCTIONS
     */
    __initialize_ClearingHouse(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * deposits 'amount' of token associated with 'poolId'
     */
    addMargin(
      accountId: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * creates a new account and adds it to the accounts map
     */
    createAccount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * creates a new account and deposits 'amount' of token associated with 'poolId'
     */
    createAccountAndAddMargin(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Account.Info VIEW
     */
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        IClearingHouseStructures.DepositTokenViewStructOutput[],
        IClearingHouseStructures.VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vBaseBalance: BigNumber;
        tokenDeposits: IClearingHouseStructures.DepositTokenViewStructOutput[];
        tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
      }
    >;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.CollateralStructOutput>;

    getNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.PoolStructOutput>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<string>;

    insuranceFund(overrides?: CallOverrides): Promise<string>;

    isVTokenAddressAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * keeper call for liquidation of range position
     */
    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * keeper call for liquidation of range position
     */
    liquidateLiquidityPositionsWithGasClaim(
      accountId: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * keeper call for liquidation of token position
     */
    liquidateTokenPosition(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.BalanceAdjustmentsStructOutput>;

    /**
     * keeper call for liquidation of token position
     */
    liquidateTokenPositionWithGasClaim(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.BalanceAdjustmentsStructOutput>;

    /**
     * Call multiple functions in the current contract and return the data from all of them if they all succeed
     */
    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    multicallWithSingleMarginCheck(
      accountId: BigNumberish,
      operations: IClearingHouseStructures.MulticallOperationStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    nativeOracle(overrides?: CallOverrides): Promise<string>;

    numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Protocol.Info VIEW
     */
    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<string>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * keeper call to remove a limit order
     */
    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * ALTERNATE LIQUIDATION METHODS FOR FIX FEE CLAIM
     */
    removeLimitOrderWithGasClaim(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * withdraws 'amount' of token associated with 'poolId'
     */
    removeMargin(
      accountId: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(_pause: boolean, overrides?: CallOverrides): Promise<void>;

    setTxGasPriceLimit(
      _txGasPriceLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vBaseAmountOut: BigNumber;
      }
    >;

    teamMultisig(overrides?: CallOverrides): Promise<string>;

    transferGovernance(
      newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: CallOverrides
    ): Promise<void>;

    txGasPriceLimit(overrides?: CallOverrides): Promise<BigNumber>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * withdraws 'amount' of base token from the profit made
     */
    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProtocolSettings(
      _liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vBaseAmountOut: BigNumber;
      }
    >;

    /**
     * withdraws protocol fees collected in the supplied wrappers to team multisig
     */
    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AccountCreated(address,uint256)'(
      ownerAddress?: string | null,
      accountId?: null
    ): AccountCreatedEventFilter;
    AccountCreated(
      ownerAddress?: string | null,
      accountId?: null
    ): AccountCreatedEventFilter;

    'CollateralSettingsUpdated(address,tuple)'(
      cToken?: null,
      cTokenInfo?: null
    ): CollateralSettingsUpdatedEventFilter;
    CollateralSettingsUpdated(
      cToken?: null,
      cTokenInfo?: null
    ): CollateralSettingsUpdatedEventFilter;

    'GovernanceTransferred(address,address)'(
      previousGovernance?: string | null,
      newGovernance?: string | null
    ): GovernanceTransferredEventFilter;
    GovernanceTransferred(
      previousGovernance?: string | null,
      newGovernance?: string | null
    ): GovernanceTransferredEventFilter;

    'MarginAdded(uint256,uint32,uint256)'(
      accountId?: BigNumberish | null,
      collateralId?: BigNumberish | null,
      amount?: null
    ): MarginAddedEventFilter;
    MarginAdded(
      accountId?: BigNumberish | null,
      collateralId?: BigNumberish | null,
      amount?: null
    ): MarginAddedEventFilter;

    'MarginRemoved(uint256,uint32,uint256)'(
      accountId?: BigNumberish | null,
      collateralId?: BigNumberish | null,
      amount?: null
    ): MarginRemovedEventFilter;
    MarginRemoved(
      accountId?: BigNumberish | null,
      collateralId?: BigNumberish | null,
      amount?: null
    ): MarginRemovedEventFilter;

    'PausedUpdated(bool)'(paused?: null): PausedUpdatedEventFilter;
    PausedUpdated(paused?: null): PausedUpdatedEventFilter;

    'PoolSettingsUpdated(uint32,tuple)'(
      poolId?: null,
      settings?: null
    ): PoolSettingsUpdatedEventFilter;
    PoolSettingsUpdated(
      poolId?: null,
      settings?: null
    ): PoolSettingsUpdatedEventFilter;

    'ProtocolSettingsUpdated(tuple,uint256,uint256,uint256)'(
      liquidationParams?: null,
      removeLimitOrderFee?: null,
      minimumOrderNotional?: null,
      minRequiredMargin?: null
    ): ProtocolSettingsUpdatedEventFilter;
    ProtocolSettingsUpdated(
      liquidationParams?: null,
      removeLimitOrderFee?: null,
      minimumOrderNotional?: null,
      minRequiredMargin?: null
    ): ProtocolSettingsUpdatedEventFilter;

    'TeamMultisigTransferred(address,address)'(
      previousTeamMultisig?: string | null,
      newTeamMultisig?: string | null
    ): TeamMultisigTransferredEventFilter;
    TeamMultisigTransferred(
      previousTeamMultisig?: string | null,
      newTeamMultisig?: string | null
    ): TeamMultisigTransferredEventFilter;
  };

  estimateGas: {
    /**
     * SYSTEM FUNCTIONS
     */
    __initialize_ClearingHouse(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * deposits 'amount' of token associated with 'poolId'
     */
    addMargin(
      accountId: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * creates a new account and adds it to the accounts map
     */
    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * creates a new account and deposits 'amount' of token associated with 'poolId'
     */
    createAccountAndAddMargin(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Account.Info VIEW
     */
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    isVTokenAddressAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * keeper call for liquidation of range position
     */
    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * keeper call for liquidation of range position
     */
    liquidateLiquidityPositionsWithGasClaim(
      accountId: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * keeper call for liquidation of token position
     */
    liquidateTokenPosition(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * keeper call for liquidation of token position
     */
    liquidateTokenPositionWithGasClaim(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Call multiple functions in the current contract and return the data from all of them if they all succeed
     */
    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicallWithSingleMarginCheck(
      accountId: BigNumberish,
      operations: IClearingHouseStructures.MulticallOperationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nativeOracle(overrides?: CallOverrides): Promise<BigNumber>;

    numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Protocol.Info VIEW
     */
    protocolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * keeper call to remove a limit order
     */
    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * ALTERNATE LIQUIDATION METHODS FOR FIX FEE CLAIM
     */
    removeLimitOrderWithGasClaim(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * withdraws 'amount' of token associated with 'poolId'
     */
    removeMargin(
      accountId: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaused(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTxGasPriceLimit(
      _txGasPriceLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    teamMultisig(overrides?: CallOverrides): Promise<BigNumber>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    txGasPriceLimit(overrides?: CallOverrides): Promise<BigNumber>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * withdraws 'amount' of base token from the profit made
     */
    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProtocolSettings(
      _liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * withdraws protocol fees collected in the supplied wrappers to team multisig
     */
    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * SYSTEM FUNCTIONS
     */
    __initialize_ClearingHouse(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * deposits 'amount' of token associated with 'poolId'
     */
    addMargin(
      accountId: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * creates a new account and adds it to the accounts map
     */
    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * creates a new account and deposits 'amount' of token associated with 'poolId'
     */
    createAccountAndAddMargin(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Account.Info VIEW
     */
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isVTokenAddressAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * keeper call for liquidation of range position
     */
    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * keeper call for liquidation of range position
     */
    liquidateLiquidityPositionsWithGasClaim(
      accountId: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * keeper call for liquidation of token position
     */
    liquidateTokenPosition(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * keeper call for liquidation of token position
     */
    liquidateTokenPositionWithGasClaim(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Call multiple functions in the current contract and return the data from all of them if they all succeed
     */
    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicallWithSingleMarginCheck(
      accountId: BigNumberish,
      operations: IClearingHouseStructures.MulticallOperationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nativeOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numAccounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Protocol.Info VIEW
     */
    protocolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rageTradeFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * keeper call to remove a limit order
     */
    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * ALTERNATE LIQUIDATION METHODS FOR FIX FEE CLAIM
     */
    removeLimitOrderWithGasClaim(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * withdraws 'amount' of token associated with 'poolId'
     */
    removeMargin(
      accountId: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTxGasPriceLimit(
      _txGasPriceLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    txGasPriceLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * withdraws 'amount' of base token from the profit made
     */
    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolSettings(
      _liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * withdraws protocol fees collected in the supplied wrappers to team multisig
     */
    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
