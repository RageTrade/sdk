/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common';

export declare namespace IClearingHouseStructures {
  export type TickRangeStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
  };

  export type TickRangeStructOutput = [number, number] & {
    tickLower: number;
    tickUpper: number;
  };
}

export interface WordHelperTestInterface extends utils.Interface {
  functions: {
    'convertToTickRangeArray(bytes32)': FunctionFragment;
    'convertToUint32Array(bytes32)': FunctionFragment;
    'keccak256One(bytes32)': FunctionFragment;
    'keccak256Two(bytes32,bytes32)': FunctionFragment;
    'offset(bytes32,uint256)': FunctionFragment;
    'pop(bytes32,uint256)': FunctionFragment;
    'popAddress(bytes32)': FunctionFragment;
    'popBool(bytes32)': FunctionFragment;
    'popUint128(bytes32)': FunctionFragment;
    'popUint16(bytes32)': FunctionFragment;
    'popUint32(bytes32)': FunctionFragment;
    'popUint64(bytes32)': FunctionFragment;
    'popUint8(bytes32)': FunctionFragment;
    'slice(bytes32,uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'convertToTickRangeArray'
      | 'convertToUint32Array'
      | 'keccak256One'
      | 'keccak256Two'
      | 'offset'
      | 'pop'
      | 'popAddress'
      | 'popBool'
      | 'popUint128'
      | 'popUint16'
      | 'popUint32'
      | 'popUint64'
      | 'popUint8'
      | 'slice'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'convertToTickRangeArray',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToUint32Array',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'keccak256One',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'keccak256Two',
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'offset',
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'pop',
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'popAddress',
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'popBool', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'popUint128',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'popUint16',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'popUint32',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'popUint64',
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'popUint8', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'slice',
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'convertToTickRangeArray',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToUint32Array',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'keccak256One',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'keccak256Two',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'offset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'popAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'popBool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'popUint128', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'popUint16', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'popUint32', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'popUint64', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'popUint8', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'slice', data: BytesLike): Result;

  events: {};
}

export interface WordHelperTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WordHelperTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    convertToTickRangeArray(
      active: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IClearingHouseStructures.TickRangeStructOutput[]] & {
        activeArr: IClearingHouseStructures.TickRangeStructOutput[];
      }
    >;

    convertToUint32Array(
      active: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number[]] & { activeArr: number[] }>;

    keccak256One(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    keccak256Two(
      input1: BytesLike,
      input2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    offset(
      key: BytesLike,
      offset_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pop(
      input: BytesLike,
      bits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { value: BigNumber; inputUpdated: string }
    >;

    popAddress(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { value: string; inputUpdated: string }>;

    popBool(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { value: boolean; inputUpdated: string }>;

    popUint128(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { value: BigNumber; inputUpdated: string }
    >;

    popUint16(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string] & { value: number; inputUpdated: string }>;

    popUint32(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string] & { value: number; inputUpdated: string }>;

    popUint64(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { value: BigNumber; inputUpdated: string }
    >;

    popUint8(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string] & { value: number; inputUpdated: string }>;

    slice(
      input: BytesLike,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { val: string }>;
  };

  convertToTickRangeArray(
    active: BytesLike,
    overrides?: CallOverrides
  ): Promise<IClearingHouseStructures.TickRangeStructOutput[]>;

  convertToUint32Array(
    active: BytesLike,
    overrides?: CallOverrides
  ): Promise<number[]>;

  keccak256One(input: BytesLike, overrides?: CallOverrides): Promise<string>;

  keccak256Two(
    input1: BytesLike,
    input2: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  offset(
    key: BytesLike,
    offset_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pop(
    input: BytesLike,
    bits: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { value: BigNumber; inputUpdated: string }>;

  popAddress(
    input: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { value: string; inputUpdated: string }>;

  popBool(
    input: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { value: boolean; inputUpdated: string }>;

  popUint128(
    input: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { value: BigNumber; inputUpdated: string }>;

  popUint16(
    input: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string] & { value: number; inputUpdated: string }>;

  popUint32(
    input: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string] & { value: number; inputUpdated: string }>;

  popUint64(
    input: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { value: BigNumber; inputUpdated: string }>;

  popUint8(
    input: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string] & { value: number; inputUpdated: string }>;

  slice(
    input: BytesLike,
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    convertToTickRangeArray(
      active: BytesLike,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.TickRangeStructOutput[]>;

    convertToUint32Array(
      active: BytesLike,
      overrides?: CallOverrides
    ): Promise<number[]>;

    keccak256One(input: BytesLike, overrides?: CallOverrides): Promise<string>;

    keccak256Two(
      input1: BytesLike,
      input2: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    offset(
      key: BytesLike,
      offset_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pop(
      input: BytesLike,
      bits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { value: BigNumber; inputUpdated: string }
    >;

    popAddress(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { value: string; inputUpdated: string }>;

    popBool(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { value: boolean; inputUpdated: string }>;

    popUint128(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { value: BigNumber; inputUpdated: string }
    >;

    popUint16(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string] & { value: number; inputUpdated: string }>;

    popUint32(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string] & { value: number; inputUpdated: string }>;

    popUint64(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { value: BigNumber; inputUpdated: string }
    >;

    popUint8(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string] & { value: number; inputUpdated: string }>;

    slice(
      input: BytesLike,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    convertToTickRangeArray(
      active: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToUint32Array(
      active: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keccak256One(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keccak256Two(
      input1: BytesLike,
      input2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offset(
      key: BytesLike,
      offset_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pop(
      input: BytesLike,
      bits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    popAddress(input: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    popBool(input: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    popUint128(input: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    popUint16(input: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    popUint32(input: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    popUint64(input: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    popUint8(input: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    slice(
      input: BytesLike,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    convertToTickRangeArray(
      active: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToUint32Array(
      active: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keccak256One(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keccak256Two(
      input1: BytesLike,
      input2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offset(
      key: BytesLike,
      offset_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pop(
      input: BytesLike,
      bits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    popAddress(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    popBool(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    popUint128(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    popUint16(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    popUint32(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    popUint64(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    popUint8(
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slice(
      input: BytesLike,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
