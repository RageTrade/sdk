/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../../common';

export interface BatchedLoopTest2Interface extends utils.Interface {
  functions: {
    'getOutput()': FunctionFragment;
    'isInProgress()': FunctionFragment;
    'iterate(uint256,uint256,uint256,bool)': FunctionFragment;
    'iteration()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getOutput'
      | 'isInProgress'
      | 'iterate'
      | 'iteration'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getOutput', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isInProgress',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'iterate',
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: 'iteration', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'getOutput', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isInProgress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'iterate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'iteration', data: BytesLike): Result;

  events: {};
}

export interface BatchedLoopTest2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BatchedLoopTest2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOutput(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    isInProgress(overrides?: CallOverrides): Promise<[boolean]>;

    iterate(
      startAt: BigNumberish,
      endBefore: BigNumberish,
      batchSize: BigNumberish,
      expectTrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    iteration(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { progress: BigNumber }>;
  };

  getOutput(overrides?: CallOverrides): Promise<BigNumber[]>;

  isInProgress(overrides?: CallOverrides): Promise<boolean>;

  iterate(
    startAt: BigNumberish,
    endBefore: BigNumberish,
    batchSize: BigNumberish,
    expectTrue: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  iteration(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getOutput(overrides?: CallOverrides): Promise<BigNumber[]>;

    isInProgress(overrides?: CallOverrides): Promise<boolean>;

    iterate(
      startAt: BigNumberish,
      endBefore: BigNumberish,
      batchSize: BigNumberish,
      expectTrue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    iteration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getOutput(overrides?: CallOverrides): Promise<BigNumber>;

    isInProgress(overrides?: CallOverrides): Promise<BigNumber>;

    iterate(
      startAt: BigNumberish,
      endBefore: BigNumberish,
      batchSize: BigNumberish,
      expectTrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    iteration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getOutput(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInProgress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iterate(
      startAt: BigNumberish,
      endBefore: BigNumberish,
      batchSize: BigNumberish,
      expectTrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    iteration(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
