/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common';

export interface GoodAddressDeployerTestInterface extends utils.Interface {
  functions: {
    'deploy(uint256,bytes)': FunctionFragment;
    'isAddressGood(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'deploy' | 'isAddressGood'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'deploy',
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'isAddressGood',
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: 'deploy', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isAddressGood',
    data: BytesLike
  ): Result;

  events: {
    'Address(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Address'): EventFragment;
}

export interface AddressEventObject {
  val: string;
}
export type AddressEvent = TypedEvent<[string], AddressEventObject>;

export type AddressEventFilter = TypedEventFilter<AddressEvent>;

export interface GoodAddressDeployerTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GoodAddressDeployerTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      amount: BigNumberish,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAddressGood(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  deploy(
    amount: BigNumberish,
    bytecode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAddressGood(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    deploy(
      amount: BigNumberish,
      bytecode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isAddressGood(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'Address(address)'(val?: null): AddressEventFilter;
    Address(val?: null): AddressEventFilter;
  };

  estimateGas: {
    deploy(
      amount: BigNumberish,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAddressGood(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      amount: BigNumberish,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAddressGood(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
