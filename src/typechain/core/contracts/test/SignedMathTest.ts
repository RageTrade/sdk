/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common';

export interface SignedMathTestInterface extends utils.Interface {
  functions: {
    'abs(int256)': FunctionFragment;
    'absUint(int256)': FunctionFragment;
    'extractSign(int256,bool)': FunctionFragment;
    'extractSign(int256)': FunctionFragment;
    'sign(int256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'abs'
      | 'absUint'
      | 'extractSign(int256,bool)'
      | 'extractSign(int256)'
      | 'sign'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'abs', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'absUint',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'extractSign(int256,bool)',
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'extractSign(int256)',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'sign', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'abs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'absUint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'extractSign(int256,bool)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'extractSign(int256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'sign', data: BytesLike): Result;

  events: {};
}

export interface SignedMathTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignedMathTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    abs(value: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    absUint(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'extractSign(int256,bool)'(
      a: BigNumberish,
      positive: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { _a: BigNumber }>;

    'extractSign(int256)'(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { _a: BigNumber }>;

    sign(value: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  abs(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  absUint(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'extractSign(int256,bool)'(
    a: BigNumberish,
    positive: boolean,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { _a: BigNumber }>;

  'extractSign(int256)'(
    a: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { _a: BigNumber }>;

  sign(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    abs(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    absUint(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'extractSign(int256,bool)'(
      a: BigNumberish,
      positive: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { _a: BigNumber }>;

    'extractSign(int256)'(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { _a: BigNumber }>;

    sign(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    abs(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    absUint(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'extractSign(int256,bool)'(
      a: BigNumberish,
      positive: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extractSign(int256)'(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sign(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    abs(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    absUint(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'extractSign(int256,bool)'(
      a: BigNumberish,
      positive: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'extractSign(int256)'(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sign(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
