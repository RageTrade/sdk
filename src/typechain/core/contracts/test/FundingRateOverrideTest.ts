/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common';

export interface FundingRateOverrideTestInterface extends utils.Interface {
  functions: {
    'NULL_VALUE()': FunctionFragment;
    'PREFIX()': FunctionFragment;
    'fundingRateOverride()': FunctionFragment;
    'getValueX128()': FunctionFragment;
    'packInt256(int256)': FunctionFragment;
    'packOracleAddress(address)': FunctionFragment;
    'set(bytes32)': FunctionFragment;
    'setNull()': FunctionFragment;
    'setOracle(address)': FunctionFragment;
    'setValueX128(int256)': FunctionFragment;
    'unpackInt256(bytes32)': FunctionFragment;
    'unpackOracleAddress(bytes32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'NULL_VALUE'
      | 'PREFIX'
      | 'fundingRateOverride'
      | 'getValueX128'
      | 'packInt256'
      | 'packOracleAddress'
      | 'set'
      | 'setNull'
      | 'setOracle'
      | 'setValueX128'
      | 'unpackInt256'
      | 'unpackOracleAddress'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'NULL_VALUE',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'PREFIX', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'fundingRateOverride',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getValueX128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'packInt256',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'packOracleAddress',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'set', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'setNull', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setOracle', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setValueX128',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'unpackInt256',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'unpackOracleAddress',
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: 'NULL_VALUE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PREFIX', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'fundingRateOverride',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getValueX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'packInt256', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'packOracleAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNull', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setValueX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unpackInt256',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unpackOracleAddress',
    data: BytesLike
  ): Result;

  events: {};
}

export interface FundingRateOverrideTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FundingRateOverrideTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NULL_VALUE(overrides?: CallOverrides): Promise<[string]>;

    PREFIX(overrides?: CallOverrides): Promise<[string]>;

    fundingRateOverride(
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getValueX128(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { success: boolean; fundingRateX128: BigNumber }
    >;

    packInt256(
      fundingRateOverrideX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    packOracleAddress(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    set(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNull(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValueX128(
      fundingRateOverrideX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpackInt256(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fundingRateOverrideX128: BigNumber }>;

    unpackOracleAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { oracleAddress: string }>;
  };

  NULL_VALUE(overrides?: CallOverrides): Promise<string>;

  PREFIX(overrides?: CallOverrides): Promise<string>;

  fundingRateOverride(overrides?: CallOverrides): Promise<string>;

  getValueX128(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { success: boolean; fundingRateX128: BigNumber }
  >;

  packInt256(
    fundingRateOverrideX128: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  packOracleAddress(
    oracleAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  set(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNull(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValueX128(
    fundingRateOverrideX128: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpackInt256(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  unpackOracleAddress(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    NULL_VALUE(overrides?: CallOverrides): Promise<string>;

    PREFIX(overrides?: CallOverrides): Promise<string>;

    fundingRateOverride(overrides?: CallOverrides): Promise<string>;

    getValueX128(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { success: boolean; fundingRateX128: BigNumber }
    >;

    packInt256(
      fundingRateOverrideX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    packOracleAddress(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    set(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    setNull(overrides?: CallOverrides): Promise<void>;

    setOracle(oracle: string, overrides?: CallOverrides): Promise<void>;

    setValueX128(
      fundingRateOverrideX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpackInt256(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpackOracleAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    NULL_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateOverride(overrides?: CallOverrides): Promise<BigNumber>;

    getValueX128(overrides?: CallOverrides): Promise<BigNumber>;

    packInt256(
      fundingRateOverrideX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packOracleAddress(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNull(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValueX128(
      fundingRateOverrideX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpackInt256(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpackOracleAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NULL_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PREFIX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingRateOverride(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueX128(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    packInt256(
      fundingRateOverrideX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    packOracleAddress(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNull(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValueX128(
      fundingRateOverrideX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpackInt256(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpackOracleAddress(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
