/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export declare namespace IClearingHouseStructures {
  export type CollateralSettingsStruct = {
    oracle: PromiseOrValue<string>;
    twapDuration: PromiseOrValue<BigNumberish>;
    isAllowedForDeposit: PromiseOrValue<boolean>;
  };

  export type CollateralSettingsStructOutput = [string, number, boolean] & {
    oracle: string;
    twapDuration: number;
    isAllowedForDeposit: boolean;
  };

  export type PoolSettingsStruct = {
    initialMarginRatioBps: PromiseOrValue<BigNumberish>;
    maintainanceMarginRatioBps: PromiseOrValue<BigNumberish>;
    maxVirtualPriceDeviationRatioBps: PromiseOrValue<BigNumberish>;
    twapDuration: PromiseOrValue<BigNumberish>;
    isAllowedForTrade: PromiseOrValue<boolean>;
    isCrossMargined: PromiseOrValue<boolean>;
    oracle: PromiseOrValue<string>;
  };

  export type PoolSettingsStructOutput = [
    number,
    number,
    number,
    number,
    boolean,
    boolean,
    string
  ] & {
    initialMarginRatioBps: number;
    maintainanceMarginRatioBps: number;
    maxVirtualPriceDeviationRatioBps: number;
    twapDuration: number;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type LiquidationParamsStruct = {
    rangeLiquidationFeeFraction: PromiseOrValue<BigNumberish>;
    tokenLiquidationFeeFraction: PromiseOrValue<BigNumberish>;
    closeFactorMMThresholdBps: PromiseOrValue<BigNumberish>;
    partialLiquidationCloseFactorBps: PromiseOrValue<BigNumberish>;
    insuranceFundFeeShareBps: PromiseOrValue<BigNumberish>;
    liquidationSlippageSqrtToleranceBps: PromiseOrValue<BigNumberish>;
    maxRangeLiquidationFees: PromiseOrValue<BigNumberish>;
    minNotionalLiquidatable: PromiseOrValue<BigNumberish>;
  };

  export type LiquidationParamsStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    rangeLiquidationFeeFraction: number;
    tokenLiquidationFeeFraction: number;
    closeFactorMMThresholdBps: number;
    partialLiquidationCloseFactorBps: number;
    insuranceFundFeeShareBps: number;
    liquidationSlippageSqrtToleranceBps: number;
    maxRangeLiquidationFees: BigNumber;
    minNotionalLiquidatable: BigNumber;
  };

  export type PoolStruct = {
    vToken: PromiseOrValue<string>;
    vPool: PromiseOrValue<string>;
    vPoolWrapper: PromiseOrValue<string>;
    settings: IClearingHouseStructures.PoolSettingsStruct;
  };

  export type PoolStructOutput = [
    string,
    string,
    string,
    IClearingHouseStructures.PoolSettingsStructOutput
  ] & {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  };

  export type SwapParamsStruct = {
    amount: PromiseOrValue<BigNumberish>;
    sqrtPriceLimit: PromiseOrValue<BigNumberish>;
    isNotional: PromiseOrValue<boolean>;
    isPartialAllowed: PromiseOrValue<boolean>;
    settleProfit: PromiseOrValue<boolean>;
  };

  export type SwapParamsStructOutput = [
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean
  ] & {
    amount: BigNumber;
    sqrtPriceLimit: BigNumber;
    isNotional: boolean;
    isPartialAllowed: boolean;
    settleProfit: boolean;
  };

  export type LiquidityChangeParamsStruct = {
    tickLower: PromiseOrValue<BigNumberish>;
    tickUpper: PromiseOrValue<BigNumberish>;
    liquidityDelta: PromiseOrValue<BigNumberish>;
    sqrtPriceCurrent: PromiseOrValue<BigNumberish>;
    slippageToleranceBps: PromiseOrValue<BigNumberish>;
    closeTokenPosition: PromiseOrValue<boolean>;
    limitOrderType: PromiseOrValue<BigNumberish>;
    settleProfit: PromiseOrValue<boolean>;
  };

  export type LiquidityChangeParamsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    number,
    boolean,
    number,
    boolean
  ] & {
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
    sqrtPriceCurrent: BigNumber;
    slippageToleranceBps: number;
    closeTokenPosition: boolean;
    limitOrderType: number;
    settleProfit: boolean;
  };
}

export interface IClearingHouseInterface extends utils.Interface {
  functions: {
    'acceptGovernanceTransfer()': FunctionFragment;
    'acceptTeamMultisigTransfer()': FunctionFragment;
    'createAccount()': FunctionFragment;
    'createAccountAndAddMargin(uint32,uint256)': FunctionFragment;
    'extsload(bytes32)': FunctionFragment;
    'extsload(bytes32[])': FunctionFragment;
    'getAccountMarketValueAndRequiredMargin(uint256,bool)': FunctionFragment;
    'getAccountNetProfit(uint256)': FunctionFragment;
    'getAccountNetTokenPosition(uint256,uint32)': FunctionFragment;
    'getRealTwapPriceX128(uint32)': FunctionFragment;
    'getVirtualTwapPriceX128(uint32)': FunctionFragment;
    'governance()': FunctionFragment;
    'governancePending()': FunctionFragment;
    'initialize(address,address,address,address,address,address,address)': FunctionFragment;
    'initiateGovernanceTransfer(address)': FunctionFragment;
    'initiateTeamMultisigTransfer(address)': FunctionFragment;
    'liquidateLiquidityPositions(uint256)': FunctionFragment;
    'liquidateTokenPosition(uint256,uint32)': FunctionFragment;
    'registerPool((address,address,address,(uint16,uint16,uint16,uint32,bool,bool,address)))': FunctionFragment;
    'removeLimitOrder(uint256,uint32,int24,int24)': FunctionFragment;
    'settleProfit(uint256)': FunctionFragment;
    'swapToken(uint256,uint32,(int256,uint160,bool,bool,bool))': FunctionFragment;
    'teamMultisig()': FunctionFragment;
    'teamMultisigPending()': FunctionFragment;
    'updateCollateralSettings(address,(address,uint32,bool))': FunctionFragment;
    'updateMargin(uint256,uint32,int256)': FunctionFragment;
    'updatePoolSettings(uint32,(uint16,uint16,uint16,uint32,bool,bool,address))': FunctionFragment;
    'updateProfit(uint256,int256)': FunctionFragment;
    'updateProtocolSettings((uint16,uint16,uint16,uint16,uint16,uint16,uint64,uint64),uint256,uint256,uint256)': FunctionFragment;
    'updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8,bool))': FunctionFragment;
    'withdrawProtocolFee(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptGovernanceTransfer'
      | 'acceptTeamMultisigTransfer'
      | 'createAccount'
      | 'createAccountAndAddMargin'
      | 'extsload(bytes32)'
      | 'extsload(bytes32[])'
      | 'getAccountMarketValueAndRequiredMargin'
      | 'getAccountNetProfit'
      | 'getAccountNetTokenPosition'
      | 'getRealTwapPriceX128'
      | 'getVirtualTwapPriceX128'
      | 'governance'
      | 'governancePending'
      | 'initialize'
      | 'initiateGovernanceTransfer'
      | 'initiateTeamMultisigTransfer'
      | 'liquidateLiquidityPositions'
      | 'liquidateTokenPosition'
      | 'registerPool'
      | 'removeLimitOrder'
      | 'settleProfit'
      | 'swapToken'
      | 'teamMultisig'
      | 'teamMultisigPending'
      | 'updateCollateralSettings'
      | 'updateMargin'
      | 'updatePoolSettings'
      | 'updateProfit'
      | 'updateProtocolSettings'
      | 'updateRangeOrder'
      | 'withdrawProtocolFee'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'acceptGovernanceTransfer',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'acceptTeamMultisigTransfer',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccount',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccountAndAddMargin',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'extsload(bytes32)',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'extsload(bytes32[])',
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountNetProfit',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountNetTokenPosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRealTwapPriceX128',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVirtualTwapPriceX128',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'governance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'governancePending',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateGovernanceTransfer',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'initiateTeamMultisigTransfer',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositions',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [IClearingHouseStructures.PoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrder',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'settleProfit',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapToken',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IClearingHouseStructures.SwapParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'teamMultisig',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'teamMultisigPending',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'updateCollateralSettings',
    values: [
      PromiseOrValue<string>,
      IClearingHouseStructures.CollateralSettingsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateMargin',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePoolSettings',
    values: [
      PromiseOrValue<BigNumberish>,
      IClearingHouseStructures.PoolSettingsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProfit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProtocolSettings',
    values: [
      IClearingHouseStructures.LiquidationParamsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRangeOrder',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IClearingHouseStructures.LiquidityChangeParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawProtocolFee',
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: 'acceptGovernanceTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'acceptTeamMultisigTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createAccountAndAddMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'extsload(bytes32)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'extsload(bytes32[])',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountNetProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountNetTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRealTwapPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVirtualTwapPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'governancePending',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initiateGovernanceTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initiateTeamMultisigTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'settleProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'teamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'teamMultisigPending',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateCollateralSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updatePoolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProtocolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRangeOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawProtocolFee',
    data: BytesLike
  ): Result;

  events: {
    'AccountCreated(address,uint256)': EventFragment;
    'CollateralSettingsUpdated(address,tuple)': EventFragment;
    'PausedUpdated(bool)': EventFragment;
    'PoolSettingsUpdated(uint32,tuple)': EventFragment;
    'ProtocolSettingsUpdated(tuple,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccountCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralSettingsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PausedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolSettingsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolSettingsUpdated'): EventFragment;
}

export interface AccountCreatedEventObject {
  ownerAddress: string;
  accountId: BigNumber;
}
export type AccountCreatedEvent = TypedEvent<
  [string, BigNumber],
  AccountCreatedEventObject
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export interface CollateralSettingsUpdatedEventObject {
  cToken: string;
  cTokenInfo: IClearingHouseStructures.CollateralSettingsStructOutput;
}
export type CollateralSettingsUpdatedEvent = TypedEvent<
  [string, IClearingHouseStructures.CollateralSettingsStructOutput],
  CollateralSettingsUpdatedEventObject
>;

export type CollateralSettingsUpdatedEventFilter =
  TypedEventFilter<CollateralSettingsUpdatedEvent>;

export interface PausedUpdatedEventObject {
  paused: boolean;
}
export type PausedUpdatedEvent = TypedEvent<
  [boolean],
  PausedUpdatedEventObject
>;

export type PausedUpdatedEventFilter = TypedEventFilter<PausedUpdatedEvent>;

export interface PoolSettingsUpdatedEventObject {
  poolId: number;
  settings: IClearingHouseStructures.PoolSettingsStructOutput;
}
export type PoolSettingsUpdatedEvent = TypedEvent<
  [number, IClearingHouseStructures.PoolSettingsStructOutput],
  PoolSettingsUpdatedEventObject
>;

export type PoolSettingsUpdatedEventFilter =
  TypedEventFilter<PoolSettingsUpdatedEvent>;

export interface ProtocolSettingsUpdatedEventObject {
  liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
  removeLimitOrderFee: BigNumber;
  minimumOrderNotional: BigNumber;
  minRequiredMargin: BigNumber;
}
export type ProtocolSettingsUpdatedEvent = TypedEvent<
  [
    IClearingHouseStructures.LiquidationParamsStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ProtocolSettingsUpdatedEventObject
>;

export type ProtocolSettingsUpdatedEventFilter =
  TypedEventFilter<ProtocolSettingsUpdatedEvent>;

export interface IClearingHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClearingHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernanceTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptTeamMultisigTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAccountAndAddMargin(
      collateralId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    'extsload(bytes32)'(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    'extsload(bytes32[])'(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getAccountMarketValueAndRequiredMargin(
      accountId: PromiseOrValue<BigNumberish>,
      isInitialMargin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accountNetProfit: BigNumber }>;

    getAccountNetTokenPosition(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netPosition: BigNumber }>;

    getRealTwapPriceX128(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { realPriceX128: BigNumber }>;

    getVirtualTwapPriceX128(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { virtualPriceX128: BigNumber }>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    governancePending(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      rageTradeFactoryAddress: PromiseOrValue<string>,
      initialGovernance: PromiseOrValue<string>,
      initialTeamMultisig: PromiseOrValue<string>,
      defaultCollateralToken: PromiseOrValue<string>,
      defaultCollateralTokenOracle: PromiseOrValue<string>,
      insuranceFund: PromiseOrValue<string>,
      vQuote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateGovernanceTransfer(
      newGovernancePending: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateTeamMultisigTransfer(
      newTeamMultisigPending: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidateLiquidityPositions(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidateTokenPosition(
      targetAccountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLimitOrder(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleProfit(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapToken(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<[string]>;

    teamMultisigPending(overrides?: CallOverrides): Promise<[string]>;

    updateCollateralSettings(
      cToken: PromiseOrValue<string>,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMargin(
      accountId: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePoolSettings(
      poolId: PromiseOrValue<BigNumberish>,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProfit(
      accountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: PromiseOrValue<BigNumberish>,
      minimumOrderNotional: PromiseOrValue<BigNumberish>,
      minRequiredMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRangeOrder(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFee(
      numberOfPoolsToUpdateInThisTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptGovernanceTransfer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptTeamMultisigTransfer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAccount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAccountAndAddMargin(
    collateralId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  'extsload(bytes32)'(
    slot: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  'extsload(bytes32[])'(
    slots: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAccountMarketValueAndRequiredMargin(
    accountId: PromiseOrValue<BigNumberish>,
    isInitialMargin: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      accountMarketValue: BigNumber;
      requiredMargin: BigNumber;
    }
  >;

  getAccountNetProfit(
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountNetTokenPosition(
    accountId: PromiseOrValue<BigNumberish>,
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRealTwapPriceX128(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVirtualTwapPriceX128(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  governancePending(overrides?: CallOverrides): Promise<string>;

  initialize(
    rageTradeFactoryAddress: PromiseOrValue<string>,
    initialGovernance: PromiseOrValue<string>,
    initialTeamMultisig: PromiseOrValue<string>,
    defaultCollateralToken: PromiseOrValue<string>,
    defaultCollateralTokenOracle: PromiseOrValue<string>,
    insuranceFund: PromiseOrValue<string>,
    vQuote: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateGovernanceTransfer(
    newGovernancePending: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateTeamMultisigTransfer(
    newTeamMultisigPending: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidateLiquidityPositions(
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidateTokenPosition(
    targetAccountId: PromiseOrValue<BigNumberish>,
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerPool(
    poolInfo: IClearingHouseStructures.PoolStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLimitOrder(
    accountId: PromiseOrValue<BigNumberish>,
    poolId: PromiseOrValue<BigNumberish>,
    tickLower: PromiseOrValue<BigNumberish>,
    tickUpper: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleProfit(
    accountId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapToken(
    accountId: PromiseOrValue<BigNumberish>,
    poolId: PromiseOrValue<BigNumberish>,
    swapParams: IClearingHouseStructures.SwapParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  teamMultisig(overrides?: CallOverrides): Promise<string>;

  teamMultisigPending(overrides?: CallOverrides): Promise<string>;

  updateCollateralSettings(
    cToken: PromiseOrValue<string>,
    collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMargin(
    accountId: PromiseOrValue<BigNumberish>,
    collateralId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePoolSettings(
    poolId: PromiseOrValue<BigNumberish>,
    newSettings: IClearingHouseStructures.PoolSettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProfit(
    accountId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProtocolSettings(
    liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
    removeLimitOrderFee: PromiseOrValue<BigNumberish>,
    minimumOrderNotional: PromiseOrValue<BigNumberish>,
    minRequiredMargin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRangeOrder(
    accountId: PromiseOrValue<BigNumberish>,
    poolId: PromiseOrValue<BigNumberish>,
    liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFee(
    numberOfPoolsToUpdateInThisTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernanceTransfer(overrides?: CallOverrides): Promise<void>;

    acceptTeamMultisigTransfer(overrides?: CallOverrides): Promise<void>;

    createAccount(overrides?: CallOverrides): Promise<BigNumber>;

    createAccountAndAddMargin(
      collateralId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    'extsload(bytes32[])'(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAccountMarketValueAndRequiredMargin(
      accountId: PromiseOrValue<BigNumberish>,
      isInitialMargin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetTokenPosition(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealTwapPriceX128(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVirtualTwapPriceX128(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    governancePending(overrides?: CallOverrides): Promise<string>;

    initialize(
      rageTradeFactoryAddress: PromiseOrValue<string>,
      initialGovernance: PromiseOrValue<string>,
      initialTeamMultisig: PromiseOrValue<string>,
      defaultCollateralToken: PromiseOrValue<string>,
      defaultCollateralTokenOracle: PromiseOrValue<string>,
      insuranceFund: PromiseOrValue<string>,
      vQuote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateGovernanceTransfer(
      newGovernancePending: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateTeamMultisigTransfer(
      newTeamMultisigPending: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateLiquidityPositions(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateTokenPosition(
      targetAccountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLimitOrder(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleProfit(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToken(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vQuoteAmountOut: BigNumber;
      }
    >;

    teamMultisig(overrides?: CallOverrides): Promise<string>;

    teamMultisigPending(overrides?: CallOverrides): Promise<string>;

    updateCollateralSettings(
      cToken: PromiseOrValue<string>,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMargin(
      accountId: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolSettings(
      poolId: PromiseOrValue<BigNumberish>,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProfit(
      accountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: PromiseOrValue<BigNumberish>,
      minimumOrderNotional: PromiseOrValue<BigNumberish>,
      minRequiredMargin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRangeOrder(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vQuoteAmountOut: BigNumber;
      }
    >;

    withdrawProtocolFee(
      numberOfPoolsToUpdateInThisTx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AccountCreated(address,uint256)'(
      ownerAddress?: PromiseOrValue<string> | null,
      accountId?: null
    ): AccountCreatedEventFilter;
    AccountCreated(
      ownerAddress?: PromiseOrValue<string> | null,
      accountId?: null
    ): AccountCreatedEventFilter;

    'CollateralSettingsUpdated(address,tuple)'(
      cToken?: null,
      cTokenInfo?: null
    ): CollateralSettingsUpdatedEventFilter;
    CollateralSettingsUpdated(
      cToken?: null,
      cTokenInfo?: null
    ): CollateralSettingsUpdatedEventFilter;

    'PausedUpdated(bool)'(paused?: null): PausedUpdatedEventFilter;
    PausedUpdated(paused?: null): PausedUpdatedEventFilter;

    'PoolSettingsUpdated(uint32,tuple)'(
      poolId?: null,
      settings?: null
    ): PoolSettingsUpdatedEventFilter;
    PoolSettingsUpdated(
      poolId?: null,
      settings?: null
    ): PoolSettingsUpdatedEventFilter;

    'ProtocolSettingsUpdated(tuple,uint256,uint256,uint256)'(
      liquidationParams?: null,
      removeLimitOrderFee?: null,
      minimumOrderNotional?: null,
      minRequiredMargin?: null
    ): ProtocolSettingsUpdatedEventFilter;
    ProtocolSettingsUpdated(
      liquidationParams?: null,
      removeLimitOrderFee?: null,
      minimumOrderNotional?: null,
      minRequiredMargin?: null
    ): ProtocolSettingsUpdatedEventFilter;
  };

  estimateGas: {
    acceptGovernanceTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptTeamMultisigTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAccountAndAddMargin(
      collateralId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extsload(bytes32[])'(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMarketValueAndRequiredMargin(
      accountId: PromiseOrValue<BigNumberish>,
      isInitialMargin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetProfit(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetTokenPosition(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealTwapPriceX128(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVirtualTwapPriceX128(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    governancePending(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      rageTradeFactoryAddress: PromiseOrValue<string>,
      initialGovernance: PromiseOrValue<string>,
      initialTeamMultisig: PromiseOrValue<string>,
      defaultCollateralToken: PromiseOrValue<string>,
      defaultCollateralTokenOracle: PromiseOrValue<string>,
      insuranceFund: PromiseOrValue<string>,
      vQuote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateGovernanceTransfer(
      newGovernancePending: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateTeamMultisigTransfer(
      newTeamMultisigPending: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidateLiquidityPositions(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidateTokenPosition(
      targetAccountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLimitOrder(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleProfit(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapToken(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    teamMultisig(overrides?: CallOverrides): Promise<BigNumber>;

    teamMultisigPending(overrides?: CallOverrides): Promise<BigNumber>;

    updateCollateralSettings(
      cToken: PromiseOrValue<string>,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMargin(
      accountId: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePoolSettings(
      poolId: PromiseOrValue<BigNumberish>,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProfit(
      accountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: PromiseOrValue<BigNumberish>,
      minimumOrderNotional: PromiseOrValue<BigNumberish>,
      minRequiredMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRangeOrder(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFee(
      numberOfPoolsToUpdateInThisTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernanceTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptTeamMultisigTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAccountAndAddMargin(
      collateralId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32)'(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32[])'(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountMarketValueAndRequiredMargin(
      accountId: PromiseOrValue<BigNumberish>,
      isInitialMargin: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNetProfit(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNetTokenPosition(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealTwapPriceX128(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVirtualTwapPriceX128(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governancePending(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      rageTradeFactoryAddress: PromiseOrValue<string>,
      initialGovernance: PromiseOrValue<string>,
      initialTeamMultisig: PromiseOrValue<string>,
      defaultCollateralToken: PromiseOrValue<string>,
      defaultCollateralTokenOracle: PromiseOrValue<string>,
      insuranceFund: PromiseOrValue<string>,
      vQuote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateGovernanceTransfer(
      newGovernancePending: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateTeamMultisigTransfer(
      newTeamMultisigPending: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPositions(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTokenPosition(
      targetAccountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLimitOrder(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleProfit(
      accountId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapToken(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamMultisigPending(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCollateralSettings(
      cToken: PromiseOrValue<string>,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMargin(
      accountId: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolSettings(
      poolId: PromiseOrValue<BigNumberish>,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProfit(
      accountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: PromiseOrValue<BigNumberish>,
      minimumOrderNotional: PromiseOrValue<BigNumberish>,
      minRequiredMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRangeOrder(
      accountId: PromiseOrValue<BigNumberish>,
      poolId: PromiseOrValue<BigNumberish>,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFee(
      numberOfPoolsToUpdateInThisTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
