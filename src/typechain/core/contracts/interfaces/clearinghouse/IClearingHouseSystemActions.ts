/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export declare namespace IClearingHouseStructures {
  export type PoolSettingsStruct = {
    initialMarginRatioBps: BigNumberish;
    maintainanceMarginRatioBps: BigNumberish;
    maxVirtualPriceDeviationRatioBps: BigNumberish;
    twapDuration: BigNumberish;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: AddressLike;
  };

  export type PoolSettingsStructOutput = [
    initialMarginRatioBps: bigint,
    maintainanceMarginRatioBps: bigint,
    maxVirtualPriceDeviationRatioBps: bigint,
    twapDuration: bigint,
    isAllowedForTrade: boolean,
    isCrossMargined: boolean,
    oracle: string
  ] & {
    initialMarginRatioBps: bigint;
    maintainanceMarginRatioBps: bigint;
    maxVirtualPriceDeviationRatioBps: bigint;
    twapDuration: bigint;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type PoolStruct = {
    vToken: AddressLike;
    vPool: AddressLike;
    vPoolWrapper: AddressLike;
    settings: IClearingHouseStructures.PoolSettingsStruct;
  };

  export type PoolStructOutput = [
    vToken: string,
    vPool: string,
    vPoolWrapper: string,
    settings: IClearingHouseStructures.PoolSettingsStructOutput
  ] & {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  };
}

export interface IClearingHouseSystemActionsInterface extends Interface {
  getFunction(nameOrSignature: 'initialize' | 'registerPool'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [IClearingHouseStructures.PoolStruct]
  ): string;

  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;
}

export interface IClearingHouseSystemActions extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: IClearingHouseSystemActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  initialize: TypedContractMethod<
    [
      rageTradeFactoryAddress: AddressLike,
      initialGovernance: AddressLike,
      initialTeamMultisig: AddressLike,
      defaultCollateralToken: AddressLike,
      defaultCollateralTokenOracle: AddressLike,
      insuranceFund: AddressLike,
      vQuote: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  registerPool: TypedContractMethod<
    [poolInfo: IClearingHouseStructures.PoolStruct],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [
      rageTradeFactoryAddress: AddressLike,
      initialGovernance: AddressLike,
      initialTeamMultisig: AddressLike,
      defaultCollateralToken: AddressLike,
      defaultCollateralTokenOracle: AddressLike,
      insuranceFund: AddressLike,
      vQuote: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'registerPool'
  ): TypedContractMethod<
    [poolInfo: IClearingHouseStructures.PoolStruct],
    [void],
    'nonpayable'
  >;

  filters: {};
}
