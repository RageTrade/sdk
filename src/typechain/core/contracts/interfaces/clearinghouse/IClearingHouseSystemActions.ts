/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../common';

export declare namespace IClearingHouseStructures {
  export type PoolSettingsStruct = {
    initialMarginRatioBps: PromiseOrValue<BigNumberish>;
    maintainanceMarginRatioBps: PromiseOrValue<BigNumberish>;
    maxVirtualPriceDeviationRatioBps: PromiseOrValue<BigNumberish>;
    twapDuration: PromiseOrValue<BigNumberish>;
    isAllowedForTrade: PromiseOrValue<boolean>;
    isCrossMargined: PromiseOrValue<boolean>;
    oracle: PromiseOrValue<string>;
  };

  export type PoolSettingsStructOutput = [
    number,
    number,
    number,
    number,
    boolean,
    boolean,
    string
  ] & {
    initialMarginRatioBps: number;
    maintainanceMarginRatioBps: number;
    maxVirtualPriceDeviationRatioBps: number;
    twapDuration: number;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type PoolStruct = {
    vToken: PromiseOrValue<string>;
    vPool: PromiseOrValue<string>;
    vPoolWrapper: PromiseOrValue<string>;
    settings: IClearingHouseStructures.PoolSettingsStruct;
  };

  export type PoolStructOutput = [
    string,
    string,
    string,
    IClearingHouseStructures.PoolSettingsStructOutput
  ] & {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  };
}

export interface IClearingHouseSystemActionsInterface extends utils.Interface {
  functions: {
    'initialize(address,address,address,address,address,address,address)': FunctionFragment;
    'registerPool((address,address,address,(uint16,uint16,uint16,uint32,bool,bool,address)))': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'initialize' | 'registerPool'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [IClearingHouseStructures.PoolStruct]
  ): string;

  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IClearingHouseSystemActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClearingHouseSystemActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      rageTradeFactoryAddress: PromiseOrValue<string>,
      initialGovernance: PromiseOrValue<string>,
      initialTeamMultisig: PromiseOrValue<string>,
      defaultCollateralToken: PromiseOrValue<string>,
      defaultCollateralTokenOracle: PromiseOrValue<string>,
      insuranceFund: PromiseOrValue<string>,
      vQuote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  initialize(
    rageTradeFactoryAddress: PromiseOrValue<string>,
    initialGovernance: PromiseOrValue<string>,
    initialTeamMultisig: PromiseOrValue<string>,
    defaultCollateralToken: PromiseOrValue<string>,
    defaultCollateralTokenOracle: PromiseOrValue<string>,
    insuranceFund: PromiseOrValue<string>,
    vQuote: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerPool(
    poolInfo: IClearingHouseStructures.PoolStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initialize(
      rageTradeFactoryAddress: PromiseOrValue<string>,
      initialGovernance: PromiseOrValue<string>,
      initialTeamMultisig: PromiseOrValue<string>,
      defaultCollateralToken: PromiseOrValue<string>,
      defaultCollateralTokenOracle: PromiseOrValue<string>,
      insuranceFund: PromiseOrValue<string>,
      vQuote: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    initialize(
      rageTradeFactoryAddress: PromiseOrValue<string>,
      initialGovernance: PromiseOrValue<string>,
      initialTeamMultisig: PromiseOrValue<string>,
      defaultCollateralToken: PromiseOrValue<string>,
      defaultCollateralTokenOracle: PromiseOrValue<string>,
      insuranceFund: PromiseOrValue<string>,
      vQuote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      rageTradeFactoryAddress: PromiseOrValue<string>,
      initialGovernance: PromiseOrValue<string>,
      initialTeamMultisig: PromiseOrValue<string>,
      defaultCollateralToken: PromiseOrValue<string>,
      defaultCollateralTokenOracle: PromiseOrValue<string>,
      insuranceFund: PromiseOrValue<string>,
      vQuote: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
