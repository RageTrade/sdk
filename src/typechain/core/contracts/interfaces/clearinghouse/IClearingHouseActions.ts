/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export declare namespace IClearingHouseStructures {
  export type SwapParamsStruct = {
    amount: BigNumberish;
    sqrtPriceLimit: BigNumberish;
    isNotional: boolean;
    isPartialAllowed: boolean;
    settleProfit: boolean;
  };

  export type SwapParamsStructOutput = [
    amount: bigint,
    sqrtPriceLimit: bigint,
    isNotional: boolean,
    isPartialAllowed: boolean,
    settleProfit: boolean
  ] & {
    amount: bigint;
    sqrtPriceLimit: bigint;
    isNotional: boolean;
    isPartialAllowed: boolean;
    settleProfit: boolean;
  };

  export type LiquidityChangeParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
    sqrtPriceCurrent: BigNumberish;
    slippageToleranceBps: BigNumberish;
    closeTokenPosition: boolean;
    limitOrderType: BigNumberish;
    settleProfit: boolean;
  };

  export type LiquidityChangeParamsStructOutput = [
    tickLower: bigint,
    tickUpper: bigint,
    liquidityDelta: bigint,
    sqrtPriceCurrent: bigint,
    slippageToleranceBps: bigint,
    closeTokenPosition: boolean,
    limitOrderType: bigint,
    settleProfit: boolean
  ] & {
    tickLower: bigint;
    tickUpper: bigint;
    liquidityDelta: bigint;
    sqrtPriceCurrent: bigint;
    slippageToleranceBps: bigint;
    closeTokenPosition: boolean;
    limitOrderType: bigint;
    settleProfit: boolean;
  };
}

export interface IClearingHouseActionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'createAccount'
      | 'createAccountAndAddMargin'
      | 'liquidateLiquidityPositions'
      | 'liquidateTokenPosition'
      | 'removeLimitOrder'
      | 'settleProfit'
      | 'swapToken'
      | 'updateMargin'
      | 'updateProfit'
      | 'updateRangeOrder'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'createAccount',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccountAndAddMargin',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositions',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPosition',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrder',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'settleProfit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapToken',
    values: [
      BigNumberish,
      BigNumberish,
      IClearingHouseStructures.SwapParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateMargin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProfit',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRangeOrder',
    values: [
      BigNumberish,
      BigNumberish,
      IClearingHouseStructures.LiquidityChangeParamsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: 'createAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createAccountAndAddMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'settleProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRangeOrder',
    data: BytesLike
  ): Result;
}

export interface IClearingHouseActions extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: IClearingHouseActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createAccount: TypedContractMethod<[], [bigint], 'nonpayable'>;

  createAccountAndAddMargin: TypedContractMethod<
    [collateralId: BigNumberish, amount: BigNumberish],
    [bigint],
    'nonpayable'
  >;

  liquidateLiquidityPositions: TypedContractMethod<
    [accountId: BigNumberish],
    [void],
    'nonpayable'
  >;

  liquidateTokenPosition: TypedContractMethod<
    [targetAccountId: BigNumberish, poolId: BigNumberish],
    [bigint],
    'nonpayable'
  >;

  removeLimitOrder: TypedContractMethod<
    [
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  settleProfit: TypedContractMethod<
    [accountId: BigNumberish],
    [void],
    'nonpayable'
  >;

  swapToken: TypedContractMethod<
    [
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct
    ],
    [[bigint, bigint] & { vTokenAmountOut: bigint; vQuoteAmountOut: bigint }],
    'nonpayable'
  >;

  updateMargin: TypedContractMethod<
    [accountId: BigNumberish, collateralId: BigNumberish, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  updateProfit: TypedContractMethod<
    [accountId: BigNumberish, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  updateRangeOrder: TypedContractMethod<
    [
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct
    ],
    [[bigint, bigint] & { vTokenAmountOut: bigint; vQuoteAmountOut: bigint }],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'createAccount'
  ): TypedContractMethod<[], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'createAccountAndAddMargin'
  ): TypedContractMethod<
    [collateralId: BigNumberish, amount: BigNumberish],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'liquidateLiquidityPositions'
  ): TypedContractMethod<[accountId: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'liquidateTokenPosition'
  ): TypedContractMethod<
    [targetAccountId: BigNumberish, poolId: BigNumberish],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'removeLimitOrder'
  ): TypedContractMethod<
    [
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'settleProfit'
  ): TypedContractMethod<[accountId: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'swapToken'
  ): TypedContractMethod<
    [
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct
    ],
    [[bigint, bigint] & { vTokenAmountOut: bigint; vQuoteAmountOut: bigint }],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'updateMargin'
  ): TypedContractMethod<
    [accountId: BigNumberish, collateralId: BigNumberish, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'updateProfit'
  ): TypedContractMethod<
    [accountId: BigNumberish, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'updateRangeOrder'
  ): TypedContractMethod<
    [
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct
    ],
    [[bigint, bigint] & { vTokenAmountOut: bigint; vQuoteAmountOut: bigint }],
    'nonpayable'
  >;

  filters: {};
}
