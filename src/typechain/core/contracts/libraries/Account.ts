/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from '../../common';

export interface AccountInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | 'LiquidityPositionsLiquidated'
      | 'MarginUpdated'
      | 'ProfitUpdated'
      | 'TokenPositionLiquidated'
  ): EventFragment;
}

export namespace LiquidityPositionsLiquidatedEvent {
  export type InputTuple = [
    accountId: BigNumberish,
    keeperAddress: AddressLike,
    liquidationFee: BigNumberish,
    keeperFee: BigNumberish,
    insuranceFundFee: BigNumberish,
    accountMarketValueFinal: BigNumberish
  ];
  export type OutputTuple = [
    accountId: bigint,
    keeperAddress: string,
    liquidationFee: bigint,
    keeperFee: bigint,
    insuranceFundFee: bigint,
    accountMarketValueFinal: bigint
  ];
  export interface OutputObject {
    accountId: bigint;
    keeperAddress: string;
    liquidationFee: bigint;
    keeperFee: bigint;
    insuranceFundFee: bigint;
    accountMarketValueFinal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarginUpdatedEvent {
  export type InputTuple = [
    accountId: BigNumberish,
    collateralId: BigNumberish,
    amount: BigNumberish,
    isSettleProfit: boolean
  ];
  export type OutputTuple = [
    accountId: bigint,
    collateralId: bigint,
    amount: bigint,
    isSettleProfit: boolean
  ];
  export interface OutputObject {
    accountId: bigint;
    collateralId: bigint;
    amount: bigint;
    isSettleProfit: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfitUpdatedEvent {
  export type InputTuple = [accountId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [accountId: bigint, amount: bigint];
  export interface OutputObject {
    accountId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPositionLiquidatedEvent {
  export type InputTuple = [
    accountId: BigNumberish,
    poolId: BigNumberish,
    keeperFee: BigNumberish,
    insuranceFundFee: BigNumberish,
    accountMarketValueFinal: BigNumberish
  ];
  export type OutputTuple = [
    accountId: bigint,
    poolId: bigint,
    keeperFee: bigint,
    insuranceFundFee: bigint,
    accountMarketValueFinal: bigint
  ];
  export interface OutputObject {
    accountId: bigint;
    poolId: bigint;
    keeperFee: bigint;
    insuranceFundFee: bigint;
    accountMarketValueFinal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Account extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: AccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: 'LiquidityPositionsLiquidated'
  ): TypedContractEvent<
    LiquidityPositionsLiquidatedEvent.InputTuple,
    LiquidityPositionsLiquidatedEvent.OutputTuple,
    LiquidityPositionsLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: 'MarginUpdated'
  ): TypedContractEvent<
    MarginUpdatedEvent.InputTuple,
    MarginUpdatedEvent.OutputTuple,
    MarginUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'ProfitUpdated'
  ): TypedContractEvent<
    ProfitUpdatedEvent.InputTuple,
    ProfitUpdatedEvent.OutputTuple,
    ProfitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'TokenPositionLiquidated'
  ): TypedContractEvent<
    TokenPositionLiquidatedEvent.InputTuple,
    TokenPositionLiquidatedEvent.OutputTuple,
    TokenPositionLiquidatedEvent.OutputObject
  >;

  filters: {
    'LiquidityPositionsLiquidated(uint256,address,int256,int256,int256,int256)': TypedContractEvent<
      LiquidityPositionsLiquidatedEvent.InputTuple,
      LiquidityPositionsLiquidatedEvent.OutputTuple,
      LiquidityPositionsLiquidatedEvent.OutputObject
    >;
    LiquidityPositionsLiquidated: TypedContractEvent<
      LiquidityPositionsLiquidatedEvent.InputTuple,
      LiquidityPositionsLiquidatedEvent.OutputTuple,
      LiquidityPositionsLiquidatedEvent.OutputObject
    >;

    'MarginUpdated(uint256,uint32,int256,bool)': TypedContractEvent<
      MarginUpdatedEvent.InputTuple,
      MarginUpdatedEvent.OutputTuple,
      MarginUpdatedEvent.OutputObject
    >;
    MarginUpdated: TypedContractEvent<
      MarginUpdatedEvent.InputTuple,
      MarginUpdatedEvent.OutputTuple,
      MarginUpdatedEvent.OutputObject
    >;

    'ProfitUpdated(uint256,int256)': TypedContractEvent<
      ProfitUpdatedEvent.InputTuple,
      ProfitUpdatedEvent.OutputTuple,
      ProfitUpdatedEvent.OutputObject
    >;
    ProfitUpdated: TypedContractEvent<
      ProfitUpdatedEvent.InputTuple,
      ProfitUpdatedEvent.OutputTuple,
      ProfitUpdatedEvent.OutputObject
    >;

    'TokenPositionLiquidated(uint256,uint32,int256,int256,int256)': TypedContractEvent<
      TokenPositionLiquidatedEvent.InputTuple,
      TokenPositionLiquidatedEvent.OutputTuple,
      TokenPositionLiquidatedEvent.OutputObject
    >;
    TokenPositionLiquidated: TypedContractEvent<
      TokenPositionLiquidatedEvent.InputTuple,
      TokenPositionLiquidatedEvent.OutputTuple,
      TokenPositionLiquidatedEvent.OutputObject
    >;
  };
}
