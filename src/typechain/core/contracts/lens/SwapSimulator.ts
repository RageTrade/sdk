/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export declare namespace IVPoolWrapper {
  export type SwapResultStruct = {
    amountSpecified: PromiseOrValue<BigNumberish>;
    vTokenIn: PromiseOrValue<BigNumberish>;
    vQuoteIn: PromiseOrValue<BigNumberish>;
    liquidityFees: PromiseOrValue<BigNumberish>;
    protocolFees: PromiseOrValue<BigNumberish>;
    sqrtPriceX96Start: PromiseOrValue<BigNumberish>;
    sqrtPriceX96End: PromiseOrValue<BigNumberish>;
  };

  export type SwapResultStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    amountSpecified: BigNumber;
    vTokenIn: BigNumber;
    vQuoteIn: BigNumber;
    liquidityFees: BigNumber;
    protocolFees: BigNumber;
    sqrtPriceX96Start: BigNumber;
    sqrtPriceX96End: BigNumber;
  };
}

export declare namespace SimulateSwap {
  export type CacheStruct = {
    sqrtPriceX96Start: PromiseOrValue<BigNumberish>;
    tickStart: PromiseOrValue<BigNumberish>;
    feeProtocol: PromiseOrValue<BigNumberish>;
    liquidityStart: PromiseOrValue<BigNumberish>;
    tickSpacing: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    value1: PromiseOrValue<BigNumberish>;
    value2: PromiseOrValue<BigNumberish>;
  };

  export type CacheStructOutput = [
    BigNumber,
    number,
    number,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    sqrtPriceX96Start: BigNumber;
    tickStart: number;
    feeProtocol: number;
    liquidityStart: BigNumber;
    tickSpacing: number;
    fee: number;
    value1: BigNumber;
    value2: BigNumber;
  };

  export type StepStruct = {
    sqrtPriceStartX96: PromiseOrValue<BigNumberish>;
    tickNext: PromiseOrValue<BigNumberish>;
    initialized: PromiseOrValue<boolean>;
    sqrtPriceNextX96: PromiseOrValue<BigNumberish>;
    amountIn: PromiseOrValue<BigNumberish>;
    amountOut: PromiseOrValue<BigNumberish>;
    feeAmount: PromiseOrValue<BigNumberish>;
  };

  export type StepStructOutput = [
    BigNumber,
    number,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sqrtPriceStartX96: BigNumber;
    tickNext: number;
    initialized: boolean;
    sqrtPriceNextX96: BigNumber;
    amountIn: BigNumber;
    amountOut: BigNumber;
    feeAmount: BigNumber;
  };

  export type StateStruct = {
    amountSpecifiedRemaining: PromiseOrValue<BigNumberish>;
    amountCalculated: PromiseOrValue<BigNumberish>;
    sqrtPriceX96: PromiseOrValue<BigNumberish>;
    tick: PromiseOrValue<BigNumberish>;
    feeGrowthGlobalIncreaseX128: PromiseOrValue<BigNumberish>;
    protocolFee: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
  };

  export type StateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    amountSpecifiedRemaining: BigNumber;
    amountCalculated: BigNumber;
    sqrtPriceX96: BigNumber;
    tick: number;
    feeGrowthGlobalIncreaseX128: BigNumber;
    protocolFee: BigNumber;
    liquidity: BigNumber;
  };
}

export declare namespace SwapSimulator {
  export type SwapStepAndStateStruct = {
    step: SimulateSwap.StepStruct;
    state: SimulateSwap.StateStruct;
  };

  export type SwapStepAndStateStructOutput = [
    SimulateSwap.StepStructOutput,
    SimulateSwap.StateStructOutput
  ] & {
    step: SimulateSwap.StepStructOutput;
    state: SimulateSwap.StateStructOutput;
  };
}

export interface SwapSimulatorInterface extends utils.Interface {
  functions: {
    'simulateSwap(address,uint32,int256,uint160,bool)': FunctionFragment;
    'simulateSwapOnVPool(address,uint24,uint24,bool,int256,uint160)': FunctionFragment;
    'simulateSwapOnVPoolView(address,uint24,uint24,bool,int256,uint160)': FunctionFragment;
    'simulateSwapView(address,uint32,int256,uint160,bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'simulateSwap'
      | 'simulateSwapOnVPool'
      | 'simulateSwapOnVPoolView'
      | 'simulateSwapView'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'simulateSwap',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'simulateSwapOnVPool',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'simulateSwapOnVPoolView',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'simulateSwapView',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: 'simulateSwap',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'simulateSwapOnVPool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'simulateSwapOnVPoolView',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'simulateSwapView',
    data: BytesLike
  ): Result;

  events: {};
}

export interface SwapSimulator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapSimulatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    simulateSwap(
      clearingHouse: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      isNotional: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    simulateSwapOnVPool(
      vPool: PromiseOrValue<string>,
      liquidityFeePips: PromiseOrValue<BigNumberish>,
      protocolFeePips: PromiseOrValue<BigNumberish>,
      swapVTokenForVQuote: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    simulateSwapOnVPoolView(
      vPool: PromiseOrValue<string>,
      liquidityFeePips: PromiseOrValue<BigNumberish>,
      protocolFeePips: PromiseOrValue<BigNumberish>,
      swapVTokenForVQuote: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IVPoolWrapper.SwapResultStructOutput] & {
        swapResult: IVPoolWrapper.SwapResultStructOutput;
      }
    >;

    simulateSwapView(
      clearingHouse: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      isNotional: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [IVPoolWrapper.SwapResultStructOutput] & {
        swapResult: IVPoolWrapper.SwapResultStructOutput;
      }
    >;
  };

  simulateSwap(
    clearingHouse: PromiseOrValue<string>,
    poolId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
    isNotional: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  simulateSwapOnVPool(
    vPool: PromiseOrValue<string>,
    liquidityFeePips: PromiseOrValue<BigNumberish>,
    protocolFeePips: PromiseOrValue<BigNumberish>,
    swapVTokenForVQuote: PromiseOrValue<boolean>,
    amountSpecified: PromiseOrValue<BigNumberish>,
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  simulateSwapOnVPoolView(
    vPool: PromiseOrValue<string>,
    liquidityFeePips: PromiseOrValue<BigNumberish>,
    protocolFeePips: PromiseOrValue<BigNumberish>,
    swapVTokenForVQuote: PromiseOrValue<boolean>,
    amountSpecified: PromiseOrValue<BigNumberish>,
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IVPoolWrapper.SwapResultStructOutput>;

  simulateSwapView(
    clearingHouse: PromiseOrValue<string>,
    poolId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
    isNotional: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<IVPoolWrapper.SwapResultStructOutput>;

  callStatic: {
    simulateSwap(
      clearingHouse: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      isNotional: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [
        IVPoolWrapper.SwapResultStructOutput,
        SimulateSwap.CacheStructOutput,
        SwapSimulator.SwapStepAndStateStructOutput[]
      ] & {
        swapResult: IVPoolWrapper.SwapResultStructOutput;
        cache: SimulateSwap.CacheStructOutput;
        steps: SwapSimulator.SwapStepAndStateStructOutput[];
      }
    >;

    simulateSwapOnVPool(
      vPool: PromiseOrValue<string>,
      liquidityFeePips: PromiseOrValue<BigNumberish>,
      protocolFeePips: PromiseOrValue<BigNumberish>,
      swapVTokenForVQuote: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        IVPoolWrapper.SwapResultStructOutput,
        SimulateSwap.CacheStructOutput,
        SwapSimulator.SwapStepAndStateStructOutput[]
      ] & {
        swapResult: IVPoolWrapper.SwapResultStructOutput;
        cache: SimulateSwap.CacheStructOutput;
        steps: SwapSimulator.SwapStepAndStateStructOutput[];
      }
    >;

    simulateSwapOnVPoolView(
      vPool: PromiseOrValue<string>,
      liquidityFeePips: PromiseOrValue<BigNumberish>,
      protocolFeePips: PromiseOrValue<BigNumberish>,
      swapVTokenForVQuote: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IVPoolWrapper.SwapResultStructOutput>;

    simulateSwapView(
      clearingHouse: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      isNotional: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<IVPoolWrapper.SwapResultStructOutput>;
  };

  filters: {};

  estimateGas: {
    simulateSwap(
      clearingHouse: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      isNotional: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    simulateSwapOnVPool(
      vPool: PromiseOrValue<string>,
      liquidityFeePips: PromiseOrValue<BigNumberish>,
      protocolFeePips: PromiseOrValue<BigNumberish>,
      swapVTokenForVQuote: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    simulateSwapOnVPoolView(
      vPool: PromiseOrValue<string>,
      liquidityFeePips: PromiseOrValue<BigNumberish>,
      protocolFeePips: PromiseOrValue<BigNumberish>,
      swapVTokenForVQuote: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simulateSwapView(
      clearingHouse: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      isNotional: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    simulateSwap(
      clearingHouse: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      isNotional: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    simulateSwapOnVPool(
      vPool: PromiseOrValue<string>,
      liquidityFeePips: PromiseOrValue<BigNumberish>,
      protocolFeePips: PromiseOrValue<BigNumberish>,
      swapVTokenForVQuote: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    simulateSwapOnVPoolView(
      vPool: PromiseOrValue<string>,
      liquidityFeePips: PromiseOrValue<BigNumberish>,
      protocolFeePips: PromiseOrValue<BigNumberish>,
      swapVTokenForVQuote: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    simulateSwapView(
      clearingHouse: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      sqrtPriceLimitX96: PromiseOrValue<BigNumberish>,
      isNotional: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
