/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  LiquidityPositionSetTest,
  LiquidityPositionSetTestInterface,
} from '../../../contracts/test/LiquidityPositionSetTest';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'LPS_IllegalTicks',
    type: 'error',
  },
  {
    inputs: [],
    name: 'LP_AlreadyInitialized',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'U48L5_IllegalElement',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'U48L5_NoSpaceLeftToInsert',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'createEmptyPosition',
    outputs: [
      {
        components: [
          {
            internalType: 'enum IClearingHouseEnums.LimitOrderType',
            name: 'limitOrderType',
            type: 'uint8',
          },
          {
            internalType: 'int24',
            name: 'tickLower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'tickUpper',
            type: 'int24',
          },
          {
            internalType: 'uint128',
            name: 'liquidity',
            type: 'uint128',
          },
          {
            internalType: 'int256',
            name: 'vTokenAmountIn',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumALastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBInsideLastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpInsideLastX128',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'sumFeeInsideLastX128',
            type: 'uint256',
          },
          {
            internalType: 'uint256[100]',
            name: '_emptySlots',
            type: 'uint256[100]',
          },
        ],
        internalType: 'struct LiquidityPosition.Info',
        name: 'info',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'isPositionActive',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'wrapper',
    outputs: [
      {
        internalType: 'contract VPoolWrapperMock',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50606680546001600160a01b0319166001600160a01b039290921691909117905561006c565b610afd8061080a83390190565b61078f8061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063623b4c2e14610046578063810065f21461006e578063ac210cc71461008e575b600080fd5b6100596100543660046105b0565b6100d3565b60405190151581526020015b60405180910390f35b61008161007c3660046105b0565b6100e9565b6040516100659190610644565b6066546100ae9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610065565b60006100e08184846101f0565b90505b92915050565b6100f1610509565b6100fd60008484610212565b6040805161014081019091528154909190829060ff166002811115610124576101246105e3565b6002811115610135576101356105e3565b81528154610100808204600290810b60208501526401000000008304810b6040808601919091526701000000000000009093046fffffffffffffffffffffffffffffffff1660608501526001850154608085015284015460a0840152600384015460c0840152600484015460e08401526005840154908301528051610c808101918290526101209092019190600684019060649082845b8154815260200190600101908083116101cc57505050505081525050905092915050565b600061020a8462ffffff8416601886901b60050b016102a2565b949350505050565b60008160020b8360020b131561024e57604051630345045960e51b8152600284810b600483015283900b60248201526044015b60405180910390fd5b62ffffff8216601884901b60050b0161026785826102bc565b65ffffffffffff811660009081526001860160205260409020915061028b8261040d565b61029a5761029a828585610434565b509392505050565b600060056102b0848461048d565b60ff1614159392505050565b8065ffffffffffff166000036102e85760405163c712b5e960e01b815260006004820152602401610245565b600560005b600581101561039b578265ffffffffffff16848260058110610311576103116106f5565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16036103425750505050565b6000848260058110610356576103566106f5565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16036103895780915061039b565b8061039381610721565b9150506102ed565b5060041981016103c857604051635503aeb560e01b815265ffffffffffff83166004820152602401610245565b818382600581106103db576103db6106f5565b600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505050565b8054600090610100900460020b1515806100e357505054640100000000900460020b151590565b61043d8361040d565b1561045b5760405163a0bb33f960e01b815260040160405180910390fd5b825466ffffffffffff00191661010062ffffff9384160266ffffff000000001916176401000000009190921602179055565b6000805b600560ff821610156104ff578265ffffffffffff16848260ff16600581106104bb576104bb6106f5565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16036104ed5790506100e3565b806104f78161073a565b915050610491565b5060059392505050565b6040805161014081019091528060008152602001600060020b8152602001600060020b815260200160006fffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200161057561057a565b905290565b60405180610c8001604052806064906020820280368337509192915050565b8035600281900b81146105ab57600080fd5b919050565b600080604083850312156105c357600080fd5b6105cc83610599565b91506105da60208401610599565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6003811061061757634e487b7160e01b600052602160045260246000fd5b9052565b8060005b606481101561063e57815184526020938401939091019060010161061f565b50505050565b6000610da0820190506106588284516105f9565b602083015161066c602084018260020b9052565b506040830151610681604084018260020b9052565b5060608301516106a560608401826fffffffffffffffffffffffffffffffff169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401516106ed8285018261061b565b505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016107335761073361070b565b5060010190565b600060ff821660ff81036107505761075061070b565b6001019291505056fea26469706673582212205d96660ed71bc9504d354ec29f039a325b1b7d9d645fd3217134d6660c14509364736f6c634300080d0033608060405234801561001057600080fd5b50610add806100206000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80636719578c116100cd578063a3a1e7e911610081578063d74dcaca11610066578063d74dcaca14610366578063ea6e4e521461039f578063fca6fbf2146103e757600080fd5b8063a3a1e7e914610313578063a3c35e2c1461023957600080fd5b806386c8e9a7116100b257806386c8e9a71461032a57806397c71faf14610340578063a34123a71461035357600080fd5b80636719578c146102e85780637779815c1461031357600080fd5b80632a99a79211610124578063512403361161010957806351240336146102c257806356d15a88146102d35780635e622abc146102e157600080fd5b80632a99a792146102395780634c2ebc581461025957600080fd5b806302dc9951146101565780630d8f6f461461017e578063195cd92c1461019f5780631dce5fcf14610217575b600080fd5b6001546101659062ffffff1681565b60405162ffffff90911681526020015b60405180910390f35b61019161018c3660046106e5565b610400565b604051908152602001610175565b6101b26101ad366004610728565b610415565b6040516101759190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a08301516001600160a01b0380821660a08501528060c08601511660c0850152505092915050565b61022a61022536600461077a565b6104c3565b604051610175939291906107c2565b61024c610247366004610806565b610594565b6040516101759190610839565b6102c0610267366004610864565b60408051608081018252948552602080860194855285820193845260608601928352600297880b600090815280825282812097890b81529690529094209251835590516001830155519281019290925551600390910155565b005b6102c06102d03660046108b9565b50565b6102c06102d03660046108d4565b6000610191565b6003546102fb906001600160a01b031681565b6040516001600160a01b039091168152602001610175565b701400000000000000000000000000000000610191565b600154610165906301000000900462ffffff1681565b61019161034e3660046106e5565b610611565b61022a61036136600461077a565b61061f565b6102c06103743660046108ec565b600293840b6000908152602085815260408083209590960b8252939093529290912090815560010155565b6102c06103ad36600461092e565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600154610165906601000000000000900462ffffff1681565b600061040f82610f9f19610961565b92915050565b6104676040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b8315156000841303610499576020810183905261048383610a01565b61048f90610fa0610961565b60408201526104bc565b610fa06104a584610a01565b6104af9190610a1d565b6020820152604081018390525b9392505050565b6000806104f16040518060800160405280600081526020016000815260200160008152602001600081525090565b836001600160801b03166004600082825461050c9190610a59565b9091555050600286810b6000908152602082815260408083209389900b83529290522060010154610547906001600160801b03861690610a71565b600287810b600090815260208281526040808320938a900b8352929052205490935061057d906001600160801b03861690610a71565b91506105898686610594565b905093509350939050565b6105bf6040518060800160405280600081526020016000815260200160008152602001600081525090565b50600291820b60009081526020818152604080832093850b8352928152908290208251608081018452815481526001820154928101929092529283015491810191909152600390910154606082015290565b600061040f610fa083610a1d565b60008061064d6040518060800160405280600081526020016000815260200160008152602001600081525090565b836001600160801b0316600460008282546106689190610a90565b9091555050600286810b6000908152602082815260408083209389900b835292905220546106a0906001600160801b03861690610a71565b600287810b600090815260208281526040808320938a900b835292905220600101549092506106d9906001600160801b03861690610a71565b92506105898686610594565b6000602082840312156106f757600080fd5b5035919050565b8035801515811461070e57600080fd5b919050565b6001600160a01b03811681146102d057600080fd5b60008060006060848603121561073d57600080fd5b610746846106fe565b925060208401359150604084013561075d81610713565b809150509250925092565b8035600281900b811461070e57600080fd5b60008060006060848603121561078f57600080fd5b61079884610768565b92506107a660208501610768565b915060408401356001600160801b038116811461075d57600080fd5b8381526020810183905260c081016107fe6040830184805182526020810151602083015260408101516040830152606081015160608301525050565b949350505050565b6000806040838503121561081957600080fd5b61082283610768565b915061083060208401610768565b90509250929050565b815181526020808301519082015260408083015190820152606080830151908201526080810161040f565b60008060008060008060c0878903121561087d57600080fd5b61088687610768565b955061089460208801610768565b95989597505050506040840135936060810135936080820135935060a0909101359150565b6000602082840312156108cb57600080fd5b6104bc826106fe565b600060c082840312156108e657600080fd5b50919050565b6000806000806080858703121561090257600080fd5b61090b85610768565b935061091960208601610768565b93969395505050506040820135916060013590565b60006020828403121561094057600080fd5b81356104bc81610713565b634e487b7160e01b600052601160045260246000fd5b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156109a2576109a261094b565b600160ff1b60008712828116878305891216156109c1576109c161094b565b600087129250878205871284841616156109dd576109dd61094b565b878505871281841616156109f3576109f361094b565b505050929093029392505050565b6000600160ff1b8201610a1657610a1661094b565b5060000390565b600082610a3a57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610a5457610a5461094b565b500590565b60008219821115610a6c57610a6c61094b565b500190565b6000816000190483118215151615610a8b57610a8b61094b565b500290565b600082821015610aa257610aa261094b565b50039056fea2646970667358221220263efaa3aa4f2f1eabb69c985bfda5e99c93e51dbf8b24c9c9e3453c8f3ab94464736f6c634300080d0033';

type LiquidityPositionSetTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityPositionSetTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityPositionSetTest__factory extends ContractFactory {
  constructor(...args: LiquidityPositionSetTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityPositionSetTest> {
    return super.deploy(overrides || {}) as Promise<LiquidityPositionSetTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LiquidityPositionSetTest {
    return super.attach(address) as LiquidityPositionSetTest;
  }
  override connect(signer: Signer): LiquidityPositionSetTest__factory {
    return super.connect(signer) as LiquidityPositionSetTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityPositionSetTestInterface {
    return new utils.Interface(_abi) as LiquidityPositionSetTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityPositionSetTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LiquidityPositionSetTest;
  }
}
