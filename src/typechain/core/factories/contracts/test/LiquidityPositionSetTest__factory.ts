/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  LiquidityPositionSetTest,
  LiquidityPositionSetTestInterface,
} from '../../../contracts/test/LiquidityPositionSetTest';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'LPS_IllegalTicks',
    type: 'error',
  },
  {
    inputs: [],
    name: 'LP_AlreadyInitialized',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'U48L5_IllegalElement',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'U48L5_NoSpaceLeftToInsert',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'createEmptyPosition',
    outputs: [
      {
        components: [
          {
            internalType: 'enum IClearingHouseEnums.LimitOrderType',
            name: 'limitOrderType',
            type: 'uint8',
          },
          {
            internalType: 'int24',
            name: 'tickLower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'tickUpper',
            type: 'int24',
          },
          {
            internalType: 'uint128',
            name: 'liquidity',
            type: 'uint128',
          },
          {
            internalType: 'int256',
            name: 'vTokenAmountIn',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumALastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBInsideLastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpInsideLastX128',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'sumFeeInsideLastX128',
            type: 'uint256',
          },
          {
            internalType: 'uint256[100]',
            name: '_emptySlots',
            type: 'uint256[100]',
          },
        ],
        internalType: 'struct LiquidityPosition.Info',
        name: 'info',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'isPositionActive',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'wrapper',
    outputs: [
      {
        internalType: 'contract VPoolWrapperMock',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x6080806040523461008557610ad48181016001600160401b0381118382101761006f57829161082b833903906000f0801561006357606680546001600160a01b0319166001600160a01b03929092169190911790556040516107a0908161008b8239f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c8063623b4c2e1461004f578063810065f2146100465763ac210cc71461003e57600080fd5b61000e6102d7565b5061000e6101a9565b3461000e57604060031936011261000e576020600560ff610088610071610093565b62ffffff61007d6100a3565b169060181b01610382565b161415604051908152f35b600435908160020b820361000e57565b602435908160020b820361000e57565b9060038210156100c05752565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000915b6064831061010057505050565b6001908251815260208091019201920191906100f3565b6101a790929192610da081019361012f8282516100b3565b60208181015160020b9083015260408181015160020b908301526060818101516fffffffffffffffffffffffffffffffff16908301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120809101519101906100ef565b565b503461000e5760408060031936011261000e576101c4610093565b6101cc6100a3565b9082516101d881610410565b60009081815281602082015281858201528160608201528160808201528160a08201528160c08201528160e08201528161010082015261012085519161021d8361043a565b610c8036843701528260020b8260020b908082136102a15761028c866102818787838865ffffffffffff62ffffff85168460181b0161025b81610642565b16815260016020522091610275610271846105e6565b1590565b610290575b50506104b7565b905191829182610117565b0390f35b61029a9183610563565b848061027a565b604492508551917f68a08b2000000000000000000000000000000000000000000000000000000000835260048301526024820152fd5b503461000e57600060031936011261000e57602073ffffffffffffffffffffffffffffffffffffffff60665416604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b906005821015610353576006600580840493060290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b600560ff821610610397575050600590565b6103a08161033c565b905465ffffffffffff908185169260031b1c16146103db5760019060ff8091169081146103ce575b01610385565b6103d661030c565b6103c8565b905090565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610140810190811067ffffffffffffffff82111761042d57604052565b6104356103e0565b604052565b610c80810190811067ffffffffffffffff82111761042d57604052565b604051906101a782610410565b60038210156100c05752565b60405191906000835b606482106104a157505050610c80820182811067ffffffffffffffff82111761042d57604052565b6001602081928554815201930191019091610479565b9061055b60066104c5610457565b936105226fffffffffffffffffffffffffffffffff82546104e960ff821689610464565b600881901c60020b6020890152602081901c60020b604089015260381c1660608701906fffffffffffffffffffffffffffffffff169052565b60018101546080860152600281015460a0860152600381015460c0860152600481015460e0860152600581015461010086015201610470565b610120830152565b919061056e836105e6565b6105bc57825460209290921b66ffffff000000001660089190911b63ffffff00167fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000ff90921691909117179055565b60046040517fa0bb33f9000000000000000000000000000000000000000000000000000000008152fd5b548060081c60020b15908115916105fb575090565b905060201c60020b151590565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610636570190565b61063e61030c565b0190565b65ffffffffffff81168015610738576005809160005b8281106106d2575b5050811461069957906106756101a79261033c565b90919082549060031b9165ffffffffffff9283811b93849216901b16911916179055565b6040517f5503aeb500000000000000000000000000000000000000000000000000000000815265ffffffffffff83166004820152602490fd5b816106ff6106f46106e28461033c565b905465ffffffffffff9160031b1c1690565b65ffffffffffff1690565b14610731576107136106f46106e28361033c565b156107265761072190610608565b610658565b925038905080610660565b5050505050565b6040517fc712b5e900000000000000000000000000000000000000000000000000000000815260006004820152602490fdfea2646970667358221220b4652cbd02636d2350a97928cb4151f03fda573a3abb76dbbc20a5adcb18656164736f6c634300080e00336080806040523461001657610ab8908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806302dc99511461017d5780630d8f6f4614610174578063195cd92c1461016b5780631dce5fcf146101625780632a99a792146101085780634c2ebc5814610159578063512403361461015057806356d15a88146101475780635e622abc1461013e5780636719578c146101355780637779815c1461011157806386c8e9a71461012c57806397c71faf14610123578063a34123a71461011a578063a3a1e7e914610111578063a3c35e2c14610108578063d74dcaca146100ff578063ea6e4e52146100f65763fca6fbf2146100ee57600080fd5b61000e610850565b5061000e6107ec565b5061000e610794565b5061000e610508565b5061000e61066f565b5061000e6106e5565b5061000e6106c3565b5061000e61069c565b5061000e61063a565b5061000e61061d565b5061000e610609565b5061000e6105ed565b5061000e610562565b5061000e61043e565b5061000e61028b565b5061000e6101a1565b503461000e57600060031936011261000e57602062ffffff60015416604051908152f35b503461000e57602060031936011261000e5760206004357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0606001827f8000000000000000000000000000000000000000000000000000000000000000058212600084131616610251575b60017ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c8312600084121616610244575b60405191028152f35b61024c610967565b61023b565b610259610967565b61020b565b60043590811515820361000e57565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e57606060031936011261000e576103796102a861025e565b6024356102b660443561026d565b6102be610877565b916000808452602084019080825260408501928184528160608701528160808701528160a08701528160c087015215159084131460001461037d578261030e92936103099252610a47565b6109d4565b90525b6040519182918291909160c060e082019380518352602081015160208401526040810151604084015260608101516060840152608081015160808401528173ffffffffffffffffffffffffffffffffffffffff918260a08201511660a0860152015116910152565b0390f35b61039161038984610a47565b610fa0900590565b905252610311565b600435908160020b820361000e57565b602435908160020b820361000e57565b600319606091011261000e576004358060020b810361000e57906024358060020b810361000e57906044356fffffffffffffffffffffffffffffffff8116810361000e5790565b60409061043c939594929560c0820196825260208201520190606080918051845260208101516020850152604081015160408501520151910152565b565b503461000e576104ef6fffffffffffffffffffffffffffffffff610379610464366103b9565b6104729592959491946108e6565b50169283600454811981116104fb575b016004556104e98560020b948560005260026020526104bf8160016104b88660406000209060020b600052602052604060002090565b0154610997565b9560005260026020526104e38360406000209060020b600052602052604060002090565b54610997565b9461090a565b60405193849384610400565b610503610967565b610482565b503461000e57604060031936011261000e576080610535610527610399565b61052f6103a9565b9061090a565b6105606040518092606080918051845260208101516020850152604081015160408501520151910152565bf35b503461000e5760c060031936011261000e5761057c610399565b60036105866103a9565b9161058f6108c6565b9260443584526020840160643581526105d760408601926084358452606087019460a435865260020b600052600060205260406000209060020b600052602052604060002090565b9451855551600185015551600284015551910155005b503461000e57602060031936011261000e5761060761025e565b005b503461000e5760c060031936011261000e57005b503461000e57600060031936011261000e57602060405160008152f35b503461000e57600060031936011261000e57602073ffffffffffffffffffffffffffffffffffffffff60035416604051908152f35b503461000e57600060031936011261000e5760206040517014000000000000000000000000000000008152f35b503461000e57600060031936011261000e57602062ffffff60015460181c16604051908152f35b503461000e57602060031936011261000e576020604051610fa0600435058152f35b503461000e576104ef6fffffffffffffffffffffffffffffffff61037961070b366103b9565b61071895929491956108e6565b50169384600454818110610787575b036004556107818460020b9586600052600260205261075b816104e38560406000209060020b600052602052604060002090565b96600052600260205260016104b88460406000209060020b600052602052604060002090565b9361090a565b61078f610967565b610727565b503461000e57608060031936011261000e576107dc6107b1610399565b6107b96103a9565b9060020b600052600260205260406000209060020b600052602052604060002090565b6044358155606435600190910155005b503461000e57602060031936011261000e5773ffffffffffffffffffffffffffffffffffffffff60043561081f8161026d565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060035416176003556000604051f35b503461000e57600060031936011261000e57602062ffffff60015460301c16604051908152f35b6040519060e0820182811067ffffffffffffffff82111761089757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051906080820182811067ffffffffffffffff82111761089757604052565b6108ee6108c6565b9060008252600060208301526000604083015260006060830152565b9061093a916109176108e6565b5060020b600052600060205260406000209060020b600052602052604060002090565b60036109446108c6565b918054835260018101546020840152600281015460408401520154606082015290565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211811515166109c8570290565b6109d0610967565b0290565b610fa09060017e083126e978d4fdf3b645a1cac083126e978d4fdf3b645a1cac083126e978d48211600083131616610a3a575b60017ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c82126000831216166109c8570290565b610a42610967565b610a07565b7f80000000000000000000000000000000000000000000000000000000000000008114610a75575b60000390565b610a7d610967565b610a6f56fea26469706673582212200f9a172143839e71b45fba9b45692bcf7f87ac43051223cc076de54e4110c29864736f6c634300080e0033';

type LiquidityPositionSetTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityPositionSetTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityPositionSetTest__factory extends ContractFactory {
  constructor(...args: LiquidityPositionSetTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityPositionSetTest> {
    return super.deploy(overrides || {}) as Promise<LiquidityPositionSetTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LiquidityPositionSetTest {
    return super.attach(address) as LiquidityPositionSetTest;
  }
  override connect(signer: Signer): LiquidityPositionSetTest__factory {
    return super.connect(signer) as LiquidityPositionSetTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityPositionSetTestInterface {
    return new utils.Interface(_abi) as LiquidityPositionSetTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityPositionSetTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LiquidityPositionSetTest;
  }
}
