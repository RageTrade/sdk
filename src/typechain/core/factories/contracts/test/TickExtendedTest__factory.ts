/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  TickExtendedTest,
  TickExtendedTestInterface,
} from '../../../contracts/test/TickExtendedTest';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickNext',
        type: 'int24',
      },
    ],
    name: 'cross',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fpGlobal',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickCurrent',
        type: 'int24',
      },
    ],
    name: 'getFeeGrowthInside',
    outputs: [
      {
        internalType: 'uint256',
        name: 'extendedFeeGrowthInside',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickCurrent',
        type: 'int24',
      },
    ],
    name: 'getFundingPaymentGrowthInside',
    outputs: [
      {
        internalType: 'int256',
        name: 'fundingPaymentGrowth',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickCurrent',
        type: 'int24',
      },
    ],
    name: 'getNetPositionInside',
    outputs: [
      {
        internalType: 'int256',
        name: 'netPositionGrowthX128',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'vTokenAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'liquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'int256',
        name: 'fundingRateX128',
        type: 'int256',
      },
    ],
    name: 'registerTrade',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_extendedFeeGrowthOutsideX128',
        type: 'uint256',
      },
    ],
    name: 'setFeeGrowthOutsideX128',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'int256',
            name: 'sumAX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpX128',
            type: 'int256',
          },
          {
            internalType: 'uint48',
            name: 'timestampLast',
            type: 'uint48',
          },
        ],
        internalType: 'struct FundingPayment.Info',
        name: 'fpGlobal_',
        type: 'tuple',
      },
    ],
    name: 'setFpGlobal',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickIndex',
        type: 'int24',
      },
      {
        components: [
          {
            internalType: 'int256',
            name: 'sumALastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBOutsideX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpOutsideX128',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'sumFeeOutsideX128',
            type: 'uint256',
          },
        ],
        internalType: 'struct TickExtended.Info',
        name: 'tick',
        type: 'tuple',
      },
    ],
    name: 'setTick',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'sumFeeGlobalX128',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: '',
        type: 'int24',
      },
    ],
    name: 'ticksExtended',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumALastX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBOutsideX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpOutsideX128',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'sumFeeOutsideX128',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'vPool',
    outputs: [
      {
        internalType: 'contract IUniswapV3Pool',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040526001600160ff1b0360065534801561001b57600080fd5b506040516100289061006a565b604051809103906000f080158015610044573d6000803e3d6000fd5b50600780546001600160a01b0319166001600160a01b0392909216919091179055610077565b6103d380610d4b83390190565b610cc5806100866000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063aac9125111610071578063aac91251146101cd578063c04b98c4146101e0578063c13a44f6146101e9578063d31834e314610230578063d5a8399514610243578063ef2c9daa1461025657600080fd5b80633e89175b146100b957806348aaa8c0146100ce57806348effdd7146101285780636719578c1461013b5780636c54433514610166578063a885d285146101ac575b600080fd5b6100cc6100c7366004610938565b600555565b005b6101036100dc366004610968565b60006020819052908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b6100cc610136366004610983565b610269565b60075461014e906001600160a01b031681565b6040516001600160a01b03909116815260200161011f565b6001546002546003546004546101849392919065ffffffffffff1684565b6040805194855260208501939093529183015265ffffffffffff16606082015260800161011f565b6101bf6101ba36600461099b565b61027b565b60405190815260200161011f565b6101bf6101db36600461099b565b6102cd565b6101bf60055481565b6100cc6101f73660046109de565b600291820b6000908152602081815260409182902083518155908301516001820155908201519281019290925560600151600390910155565b6100cc61023e366004610968565b61031f565b6101bf61025136600461099b565b610365565b6100cc610264366004610a8a565b6103b8565b8060016102768282610ad3565b505050565b60408051608081018252600154815260025460208201526003549181019190915260045465ffffffffffff1660608201526005546000916102c39183918791879187916103ce565b5095945050505050565b60408051608081018252600154815260025460208201526003549181019190915260045465ffffffffffff1660608201526005546000916103159183918791879187916103ce565b9695505050505050565b60408051608081018252600154815260025460208201526003549181019190915260045465ffffffffffff16606082015260055461036291600091849190610526565b50565b60408051608081018252600154815260025460208201526003549181019190915260045465ffffffffffff1660608201526005546000916103ad9183918791879187916103ce565b509095945050505050565b6103c7600186868685876105a7565b5050505050565b600285810b60009081526020889052604080822087840b835290822060018201548254948301548751949586958695949392869261040f92909185916106b8565b90506000846003015490508a60020b8d60020b131561045957828a602001516104389190610b30565b9250818a6040015161044a9190610b30565b9150610456818a610b6f565b90505b6001840154845460028601548c516000926104789290918591906106b8565b90506000866003015490508d60020b8f60020b136104c157828d602001516104a09190610b30565b9250818d604001516104b29190610b30565b91506104be818d610b6f565b90505b82868e602001516104d29190610b30565b6104dc9190610b30565b9a5081858e604001516104ef9190610b30565b6104f99190610b30565b995080610506858e610b6f565b6105109190610b6f565b9850505050505050505096509650969350505050565b600283810b6000908152602086905260408120805460018201549382015486519294610554939091906106b8565b845183556001830154602086015191925061056e91610b30565b60018301556040840151610583908290610b30565b600283015560038201546105979084610b6f565b8260030181905550505050505050565b60038601546000906105c39065ffffffffffff168585856106e6565b60018801549091506105db908290600160801b61070e565b8760020160008282546105ee9190610b86565b9091555050865481908890600090610607908490610b86565b9091555061061c905086600160801b87610766565b87600101600082825461062f9190610b86565b909155505060038701805465ffffffffffff861665ffffffffffff199091168117909155604080518954815260018a0154602082015260028a01548183015260608101929092526080820185905260a08201849052517f62187ed3f133848cd15541a988e634a4c2e6a75750e025c69ea914b1ea2263cc9181900360c00190a150505050505050565b60006106d36106c78684610b30565b8590600160801b610766565b6106dd9084610b86565b95945050505050565b60006106f28585610bc7565b60050b6107048484600160801b6107c8565b6106dd9190610bee565b600061071b848484610766565b905060008112801561074b575061074b61073485610805565b61073d85610805565b61074685610805565b610816565b1561075f5761075c60001982610b86565b90505b9392505050565b60006001818080610777888561082f565b94509250610785878561082f565b94509150610793868561082f565b945090506107aa6107a5848484610859565b61090b565b9450836107bd576107ba85610c73565b94505b505050509392505050565b60006107f16107a5600086126107de57856107ea565b6107ea86600019610bee565b8585610859565b9050600084121561075f5761075c81610c73565b600061081082610921565b92915050565b600081838509801561082757600191505b509392505050565b600080600084121561084e5791159161084784610c73565b9150610852565b8391505b5092909150565b6000808060001985870985870292508281108382030391505080600003610892576000841161088757600080fd5b50829004905061075f565b80841161089e57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000600160ff1b821061091d57600080fd5b5090565b600080821361091d5761093382610c73565b610810565b60006020828403121561094a57600080fd5b5035919050565b8035600281900b811461096357600080fd5b919050565b60006020828403121561097a57600080fd5b61075f82610951565b60006080828403121561099557600080fd5b50919050565b6000806000606084860312156109b057600080fd5b6109b984610951565b92506109c760208501610951565b91506109d560408501610951565b90509250925092565b60008082840360a08112156109f257600080fd5b6109fb84610951565b92506080601f1982011215610a0f57600080fd5b506040516080810181811067ffffffffffffffff82111715610a4157634e487b7160e01b600052604160045260246000fd5b806040525060208401358152604084013560208201526060840135604082015260808401356060820152809150509250929050565b65ffffffffffff8116811461036257600080fd5b600080600080600060a08688031215610aa257600080fd5b85359450602086013593506040860135610abb81610a76565b94979396509394606081013594506080013592915050565b813581556020820135600182015560408201356002820155600381016060830135610afd81610a76565b815465ffffffffffff191665ffffffffffff919091161790555050565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b850184121615610b4e57610b4e610b1a565b6001600160ff1b0384018313811615610b6957610b69610b1a565b50500390565b600082821015610b8157610b81610b1a565b500390565b600080821280156001600160ff1b0384900385131615610ba857610ba8610b1a565b600160ff1b8390038412811615610bc157610bc1610b1a565b50500190565b600065ffffffffffff83811690831681811015610be657610be6610b1a565b039392505050565b60006001600160ff1b0381841382841380821686840486111615610c1457610c14610b1a565b600160ff1b6000871282811687830589121615610c3357610c33610b1a565b60008712925087820587128484161615610c4f57610c4f610b1a565b87850587128184161615610c6557610c65610b1a565b505050929093029392505050565b6000600160ff1b8201610c8857610c88610b1a565b506000039056fea2646970667358221220b6947d7df28234fe68a7ba58fe61f5139ff09e385acd7df07dfe45153efb7ece64736f6c634300080d0033608060405234801561001057600080fd5b506103b3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063461413191461005c5780637a79037514610078578063ecb217ea14610093578063f305839914610150578063f30dba9314610159575b600080fd5b61006560025481565b6040519081526020015b60405180910390f35b61009161008636600461022d565b600191909155600255565b005b6100916100a13660046102a1565b600298890b60009081526020819052604090206001600160801b03978816600160801b029790981696909617875560018701949094559585019190915560039093018054921515600160f81b026001600160f81b0363ffffffff909316600160d81b02929092166001600160d81b036001600160a01b03909616600160381b026001600160d81b031990941666ffffffffffffff90951694909417929092179390931691909117919091179055565b61006560015481565b6101d161016736600461035b565b60006020819052908152604090208054600182015460028301546003909301546001600160801b03831693600160801b909304600f0b9290600681900b90600160381b81046001600160a01b031690600160d81b810463ffffffff1690600160f81b900460ff1688565b604080516001600160801b039099168952600f9790970b602089015295870194909452606086019290925260060b60808501526001600160a01b031660a084015263ffffffff1660c0830152151560e08201526101000161006f565b6000806040838503121561024057600080fd5b50508035926020909101359150565b8035600281900b811461026157600080fd5b919050565b80356001600160a01b038116811461026157600080fd5b803563ffffffff8116811461026157600080fd5b8035801515811461026157600080fd5b60008060008060008060008060006101208a8c0312156102c057600080fd5b6102c98a61024f565b985060208a01356001600160801b03811681146102e557600080fd5b975060408a0135600f81900b81146102fc57600080fd5b965060608a0135955060808a0135945060a08a0135600681900b811461032157600080fd5b935061032f60c08b01610266565b925061033d60e08b0161027d565b915061034c6101008b01610291565b90509295985092959850929598565b60006020828403121561036d57600080fd5b6103768261024f565b939250505056fea2646970667358221220d407d88044d4f1a61713bd529c3440e12ef1572348b615d3d56273b82426bf6464736f6c634300080d0033';

type TickExtendedTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickExtendedTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TickExtendedTest__factory extends ContractFactory {
  constructor(...args: TickExtendedTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickExtendedTest> {
    return super.deploy(overrides || {}) as Promise<TickExtendedTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TickExtendedTest {
    return super.attach(address) as TickExtendedTest;
  }
  override connect(signer: Signer): TickExtendedTest__factory {
    return super.connect(signer) as TickExtendedTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickExtendedTestInterface {
    return new utils.Interface(_abi) as TickExtendedTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickExtendedTest {
    return new Contract(address, _abi, signerOrProvider) as TickExtendedTest;
  }
}
