/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  FundingPaymentTest,
  FundingPaymentTestInterface,
} from '../../../contracts/test/FundingPaymentTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumA',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'extrapolatedSumAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumALatestX128',
        type: 'int256',
      },
    ],
    name: 'extrapolatedSumFpX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fpGlobal',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'nextAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'vTokenAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'liquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'update',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610832806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80636c544335116100505780636c544335146100a55780637cfee5a8146100eb578063951d34f01461010057600080fd5b8063115635da1461006c5780631d14114f14610092575b600080fd5b61007f61007a366004610570565b610113565b6040519081526020015b60405180910390f35b61007f6100a03660046105be565b610135565b6000546001546002546003546100c39392919065ffffffffffff1684565b6040805194855260208501939093529183015265ffffffffffff166060820152608001610089565b6100fe6100f9366004610600565b610155565b005b61007f61010e36600461062f565b610178565b600061012b8686866101258787610186565b866101b7565b9695505050505050565b600061014c85856101468686610186565b856101cf565b95945050505050565b6101718585856101658686610186565b600093929190866101f7565b5050505050565b600061014c85858585610308565b6000620151806101a6600160801b8561019f8682610677565b919061032d565b6101b091906106b6565b9392505050565b60006101c5858585856101cf565b61012b90876106f2565b60006101db8585610732565b60050b6101ed8484600160801b61032d565b61014c9190610759565b60038601546000906102139065ffffffffffff168585856101cf565b600188015490915061022b908290600160801b610377565b87600201600082825461023e91906106f2565b90915550508654819088906000906102579084906106f2565b9091555061026c905086600160801b876103c5565b87600101600082825461027f91906106f2565b909155505060038701805465ffffffffffff861665ffffffffffff199091168117909155604080518954815260018a0154602082015260028a01548183015260608101929092526080820185905260a08201849052517f62187ed3f133848cd15541a988e634a4c2e6a75750e025c69ea914b1ea2263cc9181900360c00190a150505050505050565b60006103236103178684610677565b8590600160801b6103c5565b61014c90846106f2565b600061035b61035660008612610343578561034f565b61034f86600019610759565b8585610422565b6104d4565b905060008412156101b05761036f816107e0565b949350505050565b60006103848484846103c5565b90506000811280156103b457506103b461039d856104ea565b6103a6856104ea565b6103af856104ea565b6104fb565b156101b05761036f600019826106f2565b600060018180806103d68885610514565b945092506103e48785610514565b945091506103f28685610514565b94509050610404610356848484610422565b94508361041757610414856107e0565b94505b505050509392505050565b600080806000198587098587029250828110838203039150508060000361045b576000841161045057600080fd5b5082900490506101b0565b80841161046757600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000600160ff1b82106104e657600080fd5b5090565b60006104f58261053e565b92915050565b600081838509801561050c57600191505b509392505050565b60008060008412156105335791159161052c846107e0565b9150610537565b8391505b5092909150565b60008082136104e657610550826107e0565b6104f5565b803565ffffffffffff8116811461056b57600080fd5b919050565b600080600080600060a0868803121561058857600080fd5b8535945061059860208701610555565b93506105a660408701610555565b94979396509394606081013594506080013592915050565b600080600080608085870312156105d457600080fd5b6105dd85610555565b93506105eb60208601610555565b93969395505050506040820135916060013590565b600080600080600060a0868803121561061857600080fd5b85359450602086013593506105a660408701610555565b6000806000806080858703121561064557600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b85018412161561069557610695610661565b836001600160ff1b030183138116156106b0576106b0610661565b50500390565b6000826106d357634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156106ed576106ed610661565b500590565b6000808212826001600160ff1b030384138115161561071357610713610661565b600160ff1b839003841281161561072c5761072c610661565b50500190565b600065ffffffffffff8381169083168181101561075157610751610661565b039392505050565b60006001600160ff1b0360008413600084138583048511828216161561078157610781610661565b600160ff1b60008712828116878305891216156107a0576107a0610661565b600087129250878205871284841616156107bc576107bc610661565b878505871281841616156107d2576107d2610661565b505050929093029392505050565b6000600160ff1b82016107f5576107f5610661565b506000039056fea2646970667358221220a780ff7e064a766d84b5f12976901ff964b1c0530a189e2ed831c6e1e2106abb64736f6c634300080d0033';

type FundingPaymentTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingPaymentTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundingPaymentTest__factory extends ContractFactory {
  constructor(...args: FundingPaymentTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundingPaymentTest> {
    return super.deploy(overrides || {}) as Promise<FundingPaymentTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FundingPaymentTest {
    return super.attach(address) as FundingPaymentTest;
  }
  override connect(signer: Signer): FundingPaymentTest__factory {
    return super.connect(signer) as FundingPaymentTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingPaymentTestInterface {
    return new utils.Interface(_abi) as FundingPaymentTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundingPaymentTest {
    return new Contract(address, _abi, signerOrProvider) as FundingPaymentTest;
  }
}
