/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  FundingPaymentTest,
  FundingPaymentTestInterface,
} from '../../../contracts/test/FundingPaymentTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumA',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'extrapolatedSumAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumALatestX128',
        type: 'int256',
      },
    ],
    name: 'extrapolatedSumFpX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fpGlobal',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'nextAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'vTokenAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'liquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'update',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610821806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063115635da1461005c5780631d14114f146100825780636c544335146100955780637cfee5a8146100db578063951d34f0146100f0575b600080fd5b61006f61006a366004610560565b610103565b6040519081526020015b60405180910390f35b61006f6100903660046105ae565b610125565b6000546001546002546003546100b39392919065ffffffffffff1684565b6040805194855260208501939093529183015265ffffffffffff166060820152608001610079565b6100ee6100e93660046105f0565b610145565b005b61006f6100fe36600461061f565b610168565b600061011b8686866101158787610176565b866101a7565b9695505050505050565b600061013c85856101368686610176565b856101bf565b95945050505050565b6101618585856101558686610176565b600093929190866101e7565b5050505050565b600061013c858585856102f8565b600062015180610196600160801b8561018f8682610667565b919061031d565b6101a091906106a6565b9392505050565b60006101b5858585856101bf565b61011b90876106e2565b60006101cb8585610723565b60050b6101dd8484600160801b61031d565b61013c919061074a565b60038601546000906102039065ffffffffffff168585856101bf565b600188015490915061021b908290600160801b610367565b87600201600082825461022e91906106e2565b90915550508654819088906000906102479084906106e2565b9091555061025c905086600160801b876103b5565b87600101600082825461026f91906106e2565b909155505060038701805465ffffffffffff861665ffffffffffff199091168117909155604080518954815260018a0154602082015260028a01548183015260608101929092526080820185905260a08201849052517f62187ed3f133848cd15541a988e634a4c2e6a75750e025c69ea914b1ea2263cc9181900360c00190a150505050505050565b60006103136103078684610667565b8590600160801b6103b5565b61013c90846106e2565b600061034b61034660008612610333578561033f565b61033f8660001961074a565b8585610412565b6104c4565b905060008412156101a05761035f816107cf565b949350505050565b60006103748484846103b5565b90506000811280156103a457506103a461038d856104da565b610396856104da565b61039f856104da565b6104eb565b156101a05761035f600019826106e2565b600060018180806103c68885610504565b945092506103d48785610504565b945091506103e28685610504565b945090506103f4610346848484610412565b94508361040757610404856107cf565b94505b505050509392505050565b600080806000198587098587029250828110838203039150508060000361044b576000841161044057600080fd5b5082900490506101a0565b80841161045757600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000600160ff1b82106104d657600080fd5b5090565b60006104e58261052e565b92915050565b60008183850980156104fc57600191505b509392505050565b60008060008412156105235791159161051c846107cf565b9150610527565b8391505b5092909150565b60008082136104d657610540826107cf565b6104e5565b803565ffffffffffff8116811461055b57600080fd5b919050565b600080600080600060a0868803121561057857600080fd5b8535945061058860208701610545565b935061059660408701610545565b94979396509394606081013594506080013592915050565b600080600080608085870312156105c457600080fd5b6105cd85610545565b93506105db60208601610545565b93969395505050506040820135916060013590565b600080600080600060a0868803121561060857600080fd5b853594506020860135935061059660408701610545565b6000806000806080858703121561063557600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b85018412161561068557610685610651565b6001600160ff1b03840183138116156106a0576106a0610651565b50500390565b6000826106c357634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156106dd576106dd610651565b500590565b600080821280156001600160ff1b038490038513161561070457610704610651565b600160ff1b839003841281161561071d5761071d610651565b50500190565b600065ffffffffffff8381169083168181101561074257610742610651565b039392505050565b60006001600160ff1b038184138284138082168684048611161561077057610770610651565b600160ff1b600087128281168783058912161561078f5761078f610651565b600087129250878205871284841616156107ab576107ab610651565b878505871281841616156107c1576107c1610651565b505050929093029392505050565b6000600160ff1b82016107e4576107e4610651565b506000039056fea2646970667358221220814bc3b132015279d643700d7c5ef80a4816329b18dbe311193f9d1ac0216caf64736f6c634300080d0033';

type FundingPaymentTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingPaymentTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundingPaymentTest__factory extends ContractFactory {
  constructor(...args: FundingPaymentTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundingPaymentTest> {
    return super.deploy(overrides || {}) as Promise<FundingPaymentTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FundingPaymentTest {
    return super.attach(address) as FundingPaymentTest;
  }
  override connect(signer: Signer): FundingPaymentTest__factory {
    return super.connect(signer) as FundingPaymentTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingPaymentTestInterface {
    return new utils.Interface(_abi) as FundingPaymentTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundingPaymentTest {
    return new Contract(address, _abi, signerOrProvider) as FundingPaymentTest;
  }
}
