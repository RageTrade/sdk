/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  FundingPaymentTest,
  FundingPaymentTestInterface,
} from '../../../contracts/test/FundingPaymentTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'SafeCast_Int256Overflow',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumA',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'extrapolatedSumAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumALatestX128',
        type: 'int256',
      },
    ],
    name: 'extrapolatedSumFpX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fpGlobal',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'nextAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'vTokenAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'liquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'update',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608080604052346100165761086c908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c8063115635da146100775780631d14114f1461006e5780636c544335146100655780637cfee5a81461005c5763951d34f01461005457600080fd5b61000e610301565b5061000e610174565b5061000e610134565b5061000e6100f1565b3461000e5760a060031936011261000e5760206100bf6100b76100986100c7565b6100a06100dc565b90608435916100b1836064356103c5565b9161052b565b600435610480565b604051908152f35b6024359065ffffffffffff8216820361000e57565b6044359065ffffffffffff8216820361000e57565b503461000e57608060031936011261000e5760043565ffffffffffff8116810361000e576100bf6020916101236100c7565b90606435916100b1836044356103c5565b503461000e57600060031936011261000e57608060005460015460025465ffffffffffff6003541691604051938452602084015260408301526060820152f35b503461000e5760a060031936011261000e577f62187ed3f133848cd15541a988e634a4c2e6a75750e025c69ea914b1ea2263cc6101af6100dc565b6084359061026d6101c2836064356103c5565b916102166101dc85858465ffffffffffff6003541661052b565b61020e6102096001546101ef818561078d565b906000821290816102c4575b506102b6575b600254610480565b600255565b600054610480565b60005561023a61023561022d6024356004356107db565b600154610480565b600155565b65ffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000006003541617600355565b6102b16040519283928360a0909392919360c081019460005482526001546020830152600254604083015265ffffffffffff60035416606083015260808201520152565b0390a1005b6102bf9061041f565b610201565b90507001000000000000000000000000000000006102ea6102e487610807565b92610807565b600092096102f9575b386101fb565b5060016102f3565b503461000e57608060031936011261000e5760206100bf610331610329600435606435610369565b60243561078d565b604435610480565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821282600160ff1b0182128115166103b8575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213166103ac570390565b6103b4610339565b0390565b6103c0610339565b61037e565b6104096104046103ea6103db6201518095610635565b6103e485610635565b90610369565b60008112939084156103ff576103ff906104c2565b61068d565b61077e565b90610412570590565b61041b90610675565b0590565b600081129060001991817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516610473575b81600160ff1b03831216610467570190565b61046f610339565b0190565b61047b610339565b610455565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166104735781600160ff1b03831216610467570190565b60016000198183600160ff1b05821260008513161661051e575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0513600083121616610511575b60000390565b610519610339565b61050b565b610526610339565b6104dc565b600083129391929091610551916104049190861561054c5761054c906104c2565b61072c565b92610625575b65ffffffffffff80809316911690818110610618575b031660050b90600082136000821390837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81810485118385161661060b575b6000821292600160ff1b948487870585129116166105fe575b826000871295058612908516166105f1575b0583129116166105e5570290565b6105ed610339565b0290565b6105f9610339565b6105d7565b610606610339565b6105c5565b610613610339565b6105ac565b610620610339565b61056d565b9161062f90610675565b91610557565b600160ff1b8110156106445790565b602490604051907f8320b7bc0000000000000000000000000000000000000000000000000000000082526004820152fd5b600160ff1b81146105115760000390565b1561000e57565b70010000000000000000000000000000000091600019838309928260801b92838086109503948086039514610719579082916106ca868411610686565b0981806000031680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b50509150610728821515610686565b0490565b600019828209908281029283808410930392808403931461077557700100000000000000000000000000000000918383111561000e570990828211900360801b910360801c1790565b50505060801c90565b600160ff1b81101561000e5790565b6104046107b96107bf929493946001600082126000146107d457506107b3600091610675565b9561081c565b9461072c565b91156107c757565b906107d190610675565b90565b909561081c565b6104046108016107bf929493946001600082126000146107d457506107b3600091610675565b9461068d565b60008113156108135790565b6107d190610675565b919060008312156107d157610832901592610675565b919056fea26469706673582212201a25d84411bc966895835e01d6404e9e17fde7f93600d7f6c0cb957476e0afe864736f6c634300080e0033';

type FundingPaymentTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingPaymentTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundingPaymentTest__factory extends ContractFactory {
  constructor(...args: FundingPaymentTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundingPaymentTest> {
    return super.deploy(overrides || {}) as Promise<FundingPaymentTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FundingPaymentTest {
    return super.attach(address) as FundingPaymentTest;
  }
  override connect(signer: Signer): FundingPaymentTest__factory {
    return super.connect(signer) as FundingPaymentTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingPaymentTestInterface {
    return new utils.Interface(_abi) as FundingPaymentTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundingPaymentTest {
    return new Contract(address, _abi, signerOrProvider) as FundingPaymentTest;
  }
}
