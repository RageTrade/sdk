/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  FundingRateOverrideTest,
  FundingRateOverrideTestInterface,
} from '../../../contracts/test/FundingRateOverrideTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'oracle',
        type: 'address',
      },
    ],
    name: 'InvalidFundingRateOracle',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'value',
        type: 'int256',
      },
    ],
    name: 'InvalidFundingRateValueX128',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NULL_VALUE',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'PREFIX',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fundingRateOverride',
    outputs: [
      {
        internalType: 'bytes32',
        name: 'data',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getValueX128',
    outputs: [
      {
        internalType: 'bool',
        name: 'success',
        type: 'bool',
      },
      {
        internalType: 'int256',
        name: 'fundingRateX128',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'fundingRateOverrideX128',
        type: 'int256',
      },
    ],
    name: 'packInt256',
    outputs: [
      {
        internalType: 'bytes32',
        name: 'data',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'oracleAddress',
        type: 'address',
      },
    ],
    name: 'packOracleAddress',
    outputs: [
      {
        internalType: 'bytes32',
        name: 'data',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'data',
        type: 'bytes32',
      },
    ],
    name: 'set',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'setNull',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract AggregatorV3Interface',
        name: 'oracle',
        type: 'address',
      },
    ],
    name: 'setOracle',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'fundingRateOverrideX128',
        type: 'int256',
      },
    ],
    name: 'setValueX128',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'data',
        type: 'bytes32',
      },
    ],
    name: 'unpackInt256',
    outputs: [
      {
        internalType: 'int256',
        name: 'fundingRateOverrideX128',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'data',
        type: 'bytes32',
      },
    ],
    name: 'unpackOracleAddress',
    outputs: [
      {
        internalType: 'address',
        name: 'oracleAddress',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x6080806040523461001657610595908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806324e9bb301461010357806335a51270146100fa57806344fb6562146100f15780634de276da146100e857806373520776146100df5780637adbf973146100d657806383b3662a146100cd5780638abeb1f8146100c45780639141caee146100bb578063db80813f146100b2578063e03b033d146100a95763feffa9e3146100a157600080fd5b61000e61034d565b5061000e610311565b5061000e6102ff565b5061000e6102eb565b5061000e6102d1565b5061000e6102b2565b5061000e61026c565b5061000e610242565b5061000e6101df565b5061000e6101af565b5061000e610155565b5061000e61011e565b600319602091011261000e5760043590565b503461000e5760206101376101323661010c565b61047d565b73ffffffffffffffffffffffffffffffffffffffff60405191168152f35b503461000e57600060031936011261000e5760206040517f41444452455353000000000000000000000000000000000000000000000000008152f35b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e57602060031936011261000e5760206101d76004356101d281610191565b61038f565b604051908152f35b503461000e57600060031936011261000e577fd2d06ee736d3d6ea4ad579594bdfae87317018c75692e5a82d77fdc85fc389f360207f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80600055604051908152a1005b503461000e57600060031936011261000e57604061025e6104b5565b825191151582526020820152f35b503461000e57602060031936011261000e576102b06102ab73ffffffffffffffffffffffffffffffffffffffff6004356102a581610191565b1661038f565b61035e565b005b503461000e57600060031936011261000e576020600054604051908152f35b503461000e576102b06102ab6102e63661010c565b6103f2565b503461000e5760206101d76102e63661010c565b503461000e576102b06102ab3661010c565b503461000e57600060031936011261000e5760206040517f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152f35b503461000e5760206101d73661010c565b60207fd2d06ee736d3d6ea4ad579594bdfae87317018c75692e5a82d77fdc85fc389f39180600055604051908152a1565b73ffffffffffffffffffffffffffffffffffffffff811680156103c1575060601b6b4144445245535300000000001790565b602490604051907f495097960000000000000000000000000000000000000000000000000000000082526004820152fd5b90817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81148015610456575b6104255750565b602490604051907f83119a2f0000000000000000000000000000000000000000000000000000000082526004820152fd5b5073ffffffffffffffffffffffffffffffffffffffff6104758261047d565b16151561041e565b906000918060a01b7f4144445245535300000000000000000000000000000000000000000000000000146104ae5750565b60601c9150565b6000908154917f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83146105595773ffffffffffffffffffffffffffffffffffffffff6105008461047d565b16908161050f57505060019190565b604091935060048180957ffeaf968c0000000000000000000000000000000000000000000000000000000082525afa80610547579190565b91506453d1ac100060205160801b0590565b9150819056fea2646970667358221220de01ac8e53995ba8036cf470cab742831ffe13c59527847c7cf30f0a0aba59f964736f6c634300080e0033';

type FundingRateOverrideTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingRateOverrideTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundingRateOverrideTest__factory extends ContractFactory {
  constructor(...args: FundingRateOverrideTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundingRateOverrideTest> {
    return super.deploy(overrides || {}) as Promise<FundingRateOverrideTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FundingRateOverrideTest {
    return super.attach(address) as FundingRateOverrideTest;
  }
  override connect(signer: Signer): FundingRateOverrideTest__factory {
    return super.connect(signer) as FundingRateOverrideTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingRateOverrideTestInterface {
    return new utils.Interface(_abi) as FundingRateOverrideTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundingRateOverrideTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FundingRateOverrideTest;
  }
}
