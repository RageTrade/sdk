/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  BatchedLoopTest,
  BatchedLoopTestInterface,
} from '../../../../contracts/test/BatchedLoopTest.sol/BatchedLoopTest';

const _abi = [
  {
    inputs: [],
    name: 'getOutput',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'isInProgress',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'iterations',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'expectTrue',
        type: 'bool',
      },
    ],
    name: 'iterate',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'loop',
    outputs: [
      {
        internalType: 'uint256',
        name: 'progress',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256[]',
        name: '_input',
        type: 'uint256[]',
      },
    ],
    name: 'setInput',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60808060405234610016576105dd908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c90816319b28d311461007a575080636dfc2fa8146100715780637372618e14610068578063a92100cb1461005f5763ab1b4b221461005757600080fd5b61000e61033e565b5061000e61031f565b5061000e6101c4565b5061000e6101a3565b346101225760208060031936011261011e5767ffffffffffffffff9060043582811161011a573660238201121561011a57806004013592831161010d575b8260051b604051936100cc84830186610155565b84526024838501918301019136831161010957602401905b8282106100fa57856100f586610424565b604051f35b813581529083019083016100e4565b8580fd5b610115610125565b6100b8565b8380fd5b5080fd5b80fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761019657604052565b61019e610125565b604052565b503461000e57600060031936011261000e5760206000541515604051908152f35b503461000e57604060031936011261000e5760043560243580151580910361000e576001908154916000928354948515610316575b806102e757508091945b82811061022e57506100f59394508114908160001461022757508380555b146104f1565b8455610221565b6102c89086548110156102da575b8686526102c3817fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015461028a6002805490680100000000000000008210156102cd575b8b82019055610562565b90919082549060031b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811b9283911b16911916179055565b6104f8565b610203565b6102d5610125565b610280565b6102e2610532565b61023c565b80198611610309575b850181811015610302575b9194610203565b50806102fb565b6103116103f4565b6102f0565b945083946101f9565b503461000e57600060031936011261000e576020600054604051908152f35b503461000e576000806003193601126101225760405180916002549081835260208093018092600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90835b8181106103e057505050846103a2910385610155565b60405193838594850191818652518092526040850193925b8281106103c957505050500390f35b8351855286955093810193928101926001016103ba565b82548452928601926001928301920161038c565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9081516801000000000000000081116104e4575b600192835482855580831061049c575b5060016000526020908101907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf66000925b8484106104895750505050509050565b8051825592860192908601908201610479565b600085815285847fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf693840193015b8381106104d957505050610448565b8281550186906104ca565b6104ec610125565b610438565b1561000e57565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610526570190565b61052e6103f4565b0190565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60025481101561059a575b60026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b6105a2610532565b61056d56fea26469706673582212200e4b6ffa5312e63105faec2d8ecdfa2e6a4b210487403164c115f186360ac7c664736f6c634300080e0033';

type BatchedLoopTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchedLoopTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchedLoopTest__factory extends ContractFactory {
  constructor(...args: BatchedLoopTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BatchedLoopTest> {
    return super.deploy(overrides || {}) as Promise<BatchedLoopTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BatchedLoopTest {
    return super.attach(address) as BatchedLoopTest;
  }
  override connect(signer: Signer): BatchedLoopTest__factory {
    return super.connect(signer) as BatchedLoopTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchedLoopTestInterface {
    return new utils.Interface(_abi) as BatchedLoopTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchedLoopTest {
    return new Contract(address, _abi, signerOrProvider) as BatchedLoopTest;
  }
}
