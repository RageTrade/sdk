/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  GovernableTest,
  GovernableTestInterface,
} from '../../../../contracts/test/Governable.sol/GovernableTest';

const _abi = [
  {
    inputs: [],
    name: 'Unauthorised',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ZeroAddress',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousGovernancePending',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newGovernancePending',
        type: 'address',
      },
    ],
    name: 'GovernancePending',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousGovernance',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newGovernance',
        type: 'address',
      },
    ],
    name: 'GovernanceTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousTeamMultisigPending',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newTeamMultisigPending',
        type: 'address',
      },
    ],
    name: 'TeamMultisigPending',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousTeamMultisig',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newTeamMultisig',
        type: 'address',
      },
    ],
    name: 'TeamMultisigTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'acceptGovernanceTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'acceptTeamMultisigTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'governance',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'governancePending',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newGovernancePending',
        type: 'address',
      },
    ],
    name: 'initiateGovernanceTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newTeamMultisigPending',
        type: 'address',
      },
    ],
    name: 'initiateTeamMultisigTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'teamMultisig',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'teamMultisigPending',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x6080604052346101215760005460ff8160081c1690816000146101145750610028303b15610126565b15806100e9575b60005460ff8160081c16801561009057156100835750610050303b15610126565b61005a3333610189565b61006e575b60405161046f908161020b8239f35b61007e61ff001960005416600055565b61005f565b60ff610050911615610126565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6100fd61010061ff00196000541617600055565b61010f600160ff196000541617600055565b61002f565b60ff610028911615610126565b600080fd5b1561012d57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b603380546001600160a01b039283166001600160a01b0319918216811790925560405190936000937f39355f2f5c8206286978f443aa8126bbd29fa09c53c04569502647f3a59c8cb29385939290847f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce808186a31680956034541617603455a356fe608080604052600436101561001357600080fd5b6000803560e01c91826304a6f264146100b8575050806313401551146100af5780632a90b8da146100a65780633562490c1461009d5780635aa6e675146100945780636ae732301461008b5780638f8022bc146100825763dbc0c0851461007a575b600080fd5b610075610404565b50610075610378565b506100756102d7565b50610075610273565b506100756101df565b50610075610121565b506100756100ec565b346100e857816003193601126100e85760209073ffffffffffffffffffffffffffffffffffffffff603654168152f35b5080fd5b503461007557600060031936011261007557602073ffffffffffffffffffffffffffffffffffffffff60355416604051908152f35b50346100755760006003193601126100755760355473ffffffffffffffffffffffffffffffffffffffff8082168033036101b55760009260335491806040519484167f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce808787a37fffffffffffffffffffffffff00000000000000000000000000000000000000008093161760335516603555f35b60046040517fd7a2ae6a000000000000000000000000000000000000000000000000000000008152fd5b50346100755760006003193601126100755760365473ffffffffffffffffffffffffffffffffffffffff8082168033036101b55760009260345491806040519484167f39355f2f5c8206286978f443aa8126bbd29fa09c53c04569502647f3a59c8cb28787a37fffffffffffffffffffffffff00000000000000000000000000000000000000008093161760345516603655f35b503461007557600060031936011261007557602073ffffffffffffffffffffffffffffffffffffffff60335416604051908152f35b60031960209101126100755760043573ffffffffffffffffffffffffffffffffffffffff811681036100755790565b5034610075576102e6366102a8565b73ffffffffffffffffffffffffffffffffffffffff80603454163314158061036a575b6101b5576000917fffffffffffffffffffffffff000000000000000000000000000000000000000082603654921691826040519482167f9b068aae3039a2512c2f13bffb5fd9d95b1895b276b5c7ddf1d4fa24ec3686588787a31617603655f35b503381603354161415610309565b503461007557610387366102a8565b73ffffffffffffffffffffffffffffffffffffffff806033541633036101b5576000917fffffffffffffffffffffffff000000000000000000000000000000000000000082603554921691826040519482167f8c405decc72a19ef328c92989ce6db4e4a498e1c246413fd60997a3051ba5cff8787a31617603555f35b503461007557600060031936011261007557602073ffffffffffffffffffffffffffffffffffffffff60345416604051908152f3fea26469706673582212200f1392e99e5f80801e45705175dc67fa7319fe08f7080d1201bc73a23152dded64736f6c634300080e0033';

type GovernableTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovernableTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GovernableTest__factory extends ContractFactory {
  constructor(...args: GovernableTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GovernableTest> {
    return super.deploy(overrides || {}) as Promise<GovernableTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GovernableTest {
    return super.attach(address) as GovernableTest;
  }
  override connect(signer: Signer): GovernableTest__factory {
    return super.connect(signer) as GovernableTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernableTestInterface {
    return new utils.Interface(_abi) as GovernableTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GovernableTest {
    return new Contract(address, _abi, signerOrProvider) as GovernableTest;
  }
}
