/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  SignedMathTest,
  SignedMathTestInterface,
} from '../../../contracts/test/SignedMathTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'value',
        type: 'int256',
      },
    ],
    name: 'abs',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'value',
        type: 'int256',
      },
    ],
    name: 'absUint',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'val',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'absoluteCap',
        type: 'uint256',
      },
    ],
    name: 'bound',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'a',
        type: 'int256',
      },
      {
        internalType: 'bool',
        name: 'positive',
        type: 'bool',
      },
    ],
    name: 'extractSign',
    outputs: [
      {
        internalType: 'uint256',
        name: '_a',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'a',
        type: 'int256',
      },
    ],
    name: 'extractSign',
    outputs: [
      {
        internalType: 'uint256',
        name: '_a',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'value',
        type: 'int256',
      },
    ],
    name: 'sign',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608080604052346100165761026b908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c8063071296ce146100825780631b5ac4b51461006757806328f73280146100795780635755298d1461007057806363fa2823146100675763ae610b481461005f57600080fd5b61000e610163565b5061000e6100ab565b5061000e610131565b5061000e6100e1565b3461000e57604060031936011261000e5760206100a360243560043561020f565b604051908152f35b503461000e57602060031936011261000e57602060043560008113156100d357604051908152f35b6100dc906101b3565b6100a3565b503461000e57604060031936011261000e57600435602435908115918215810361000e5791600082121561012b57915061011a906101b3565b604080519182529115156020820152f35b5061011a565b503461000e57602060031936011261000e576004356001600082121561015d575061011a6000916101b3565b9061011a565b503461000e57602060031936011261000e5760006004351261018b5760206001604051908152f35b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6100a3565b7f800000000000000000000000000000000000000000000000000000000000000081146101e05760000390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181131561021b575090565b90610225906101b3565b808212610230575090565b90509056fea26469706673582212207ada4ac09716ef565192fc9adb508f849d9549ced3ff3fa6b137d4d6c109307164736f6c634300080e0033';

type SignedMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignedMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignedMathTest__factory extends ContractFactory {
  constructor(...args: SignedMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SignedMathTest> {
    return super.deploy(overrides || {}) as Promise<SignedMathTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SignedMathTest {
    return super.attach(address) as SignedMathTest;
  }
  override connect(signer: Signer): SignedMathTest__factory {
    return super.connect(signer) as SignedMathTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignedMathTestInterface {
    return new utils.Interface(_abi) as SignedMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignedMathTest {
    return new Contract(address, _abi, signerOrProvider) as SignedMathTest;
  }
}
