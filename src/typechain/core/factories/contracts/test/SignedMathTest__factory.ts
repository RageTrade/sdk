/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  SignedMathTest,
  SignedMathTestInterface,
} from '../../../contracts/test/SignedMathTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'value',
        type: 'int256',
      },
    ],
    name: 'abs',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'value',
        type: 'int256',
      },
    ],
    name: 'absUint',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'a',
        type: 'int256',
      },
      {
        internalType: 'bool',
        name: 'positive',
        type: 'bool',
      },
    ],
    name: 'extractSign',
    outputs: [
      {
        internalType: 'uint256',
        name: '_a',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'a',
        type: 'int256',
      },
    ],
    name: 'extractSign',
    outputs: [
      {
        internalType: 'uint256',
        name: '_a',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'value',
        type: 'int256',
      },
    ],
    name: 'sign',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610254806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631b5ac4b51461005c57806328f73280146100825780635755298d146100aa57806363fa2823146100bd578063ae610b48146100d0575b600080fd5b61006f61006a3660046101a6565b6100e3565b6040519081526020015b60405180910390f35b6100956100903660046101bf565b6100f4565b60408051928352901515602083015201610079565b6100956100b83660046101a6565b61010c565b61006f6100cb3660046101a6565b610121565b61006f6100de3660046101a6565b61012c565b60006100ee82610137565b92915050565b6000806101018484610152565b915091509250929050565b6000806101188361017c565b91509150915091565b60006100ee826100e3565b60006100ee8261018a565b600080821361014e57610149826101f4565b6100ee565b5090565b60008060008412156101715791159161016a846101f4565b9150610175565b8391505b5092909150565b600080610118836001610152565b60008082121561019e5761014960016101f4565b600192915050565b6000602082840312156101b857600080fd5b5035919050565b600080604083850312156101d257600080fd5b82359150602083013580151581146101e957600080fd5b809150509250929050565b6000600160ff1b820161021757634e487b7160e01b600052601160045260246000fd5b506000039056fea264697066735822122011c140b97113583257add4450210aa21a381105faba7525d05d199165a43428d64736f6c634300080d0033';

type SignedMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignedMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignedMathTest__factory extends ContractFactory {
  constructor(...args: SignedMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SignedMathTest> {
    return super.deploy(overrides || {}) as Promise<SignedMathTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SignedMathTest {
    return super.attach(address) as SignedMathTest;
  }
  override connect(signer: Signer): SignedMathTest__factory {
    return super.connect(signer) as SignedMathTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignedMathTestInterface {
    return new utils.Interface(_abi) as SignedMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignedMathTest {
    return new Contract(address, _abi, signerOrProvider) as SignedMathTest;
  }
}
