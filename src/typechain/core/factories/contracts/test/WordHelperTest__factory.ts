/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  WordHelperTest,
  WordHelperTestInterface,
} from '../../../contracts/test/WordHelperTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'active',
        type: 'bytes32',
      },
    ],
    name: 'convertToTickRangeArray',
    outputs: [
      {
        components: [
          {
            internalType: 'int24',
            name: 'tickLower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'tickUpper',
            type: 'int24',
          },
        ],
        internalType: 'struct IClearingHouseStructures.TickRange[]',
        name: 'activeArr',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'active',
        type: 'bytes32',
      },
    ],
    name: 'convertToUint32Array',
    outputs: [
      {
        internalType: 'uint32[]',
        name: 'activeArr',
        type: 'uint32[]',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
    ],
    name: 'keccak256One',
    outputs: [
      {
        internalType: 'bytes32',
        name: 'result',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input1',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 'input2',
        type: 'bytes32',
      },
    ],
    name: 'keccak256Two',
    outputs: [
      {
        internalType: 'bytes32',
        name: 'result',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'key',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'offset_',
        type: 'uint256',
      },
    ],
    name: 'offset',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'bits',
        type: 'uint256',
      },
    ],
    name: 'pop',
    outputs: [
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
      {
        internalType: 'bytes32',
        name: 'inputUpdated',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
    ],
    name: 'popAddress',
    outputs: [
      {
        internalType: 'address',
        name: 'value',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: 'inputUpdated',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
    ],
    name: 'popBool',
    outputs: [
      {
        internalType: 'bool',
        name: 'value',
        type: 'bool',
      },
      {
        internalType: 'bytes32',
        name: 'inputUpdated',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
    ],
    name: 'popUint128',
    outputs: [
      {
        internalType: 'uint128',
        name: 'value',
        type: 'uint128',
      },
      {
        internalType: 'bytes32',
        name: 'inputUpdated',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
    ],
    name: 'popUint16',
    outputs: [
      {
        internalType: 'uint16',
        name: 'value',
        type: 'uint16',
      },
      {
        internalType: 'bytes32',
        name: 'inputUpdated',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
    ],
    name: 'popUint32',
    outputs: [
      {
        internalType: 'uint32',
        name: 'value',
        type: 'uint32',
      },
      {
        internalType: 'bytes32',
        name: 'inputUpdated',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
    ],
    name: 'popUint64',
    outputs: [
      {
        internalType: 'uint64',
        name: 'value',
        type: 'uint64',
      },
      {
        internalType: 'bytes32',
        name: 'inputUpdated',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
    ],
    name: 'popUint8',
    outputs: [
      {
        internalType: 'uint8',
        name: 'value',
        type: 'uint8',
      },
      {
        internalType: 'bytes32',
        name: 'inputUpdated',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'start',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'end',
        type: 'uint256',
      },
    ],
    name: 'slice',
    outputs: [
      {
        internalType: 'bytes32',
        name: 'val',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x6080806040523461001657610756908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806319f96fba1461012b57806321a835d51461012257806332921f371461011957806342b6a548146101105780635d43058e146101075780635ef4570f146100fe5780637aab7ead146100f5578063912c7661146100ec578063aeb04d71146100e3578063b87e183d146100da578063cc34245c146100d1578063e703ec78146100c8578063efcbe7c7146100bf5763f5e6c0e2146100b757600080fd5b61000e610578565b5061000e610552565b5061000e610525565b5061000e610503565b5061000e6104d2565b5061000e6104a7565b5061000e610479565b5061000e610440565b5061000e610413565b5061000e6103e3565b5061000e6103b9565b5061000e6102c1565b5061000e610243565b5061000e610175565b6020908160408183019282815285518094520193019160005b82811061015b575050505090565b835163ffffffff168552938101939281019260010161014d565b503461000e57602060031936011261000e57600435600880815b6101f8575b61019f82820361063f565b915b8181106101ba57604051806101b68582610134565b0390f35b6101f36005916101e863ffffffff82851b946001840195868a821b921b61010003011c16916007038661066b565b9063ffffffff169052565b6101a1565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190600582811b8286821b921b61010003011c1561023b5750908161018f565b919050610194565b503461000e57602060031936011261000e57604060043581519060ff81161515825260081c6020820152f35b60208082019080835283518092528060408094019401926000905b83821061029957505050505090565b84518051600290810b885290840151900b86840152948501949382019360019091019061028a565b503461000e5760208060031936011261000e5760048035916005908192835b61036b575b6102f08484036106ae565b935b83811061030757604051806101b6878261026f565b6103666103568461035c899461033d65ffffffffffff60308084026001850199816010011b918a0261010003011c168060181c91565b94909188039161034d838d61066b565b519060020b9052565b8961066b565b51019060020b9052565b6102f2565b91927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190603080830287811b91830261010003011c156103b057509291836102e0565b939290506102e5565b503461000e57602060031936011261000e57604060043581519060ff8116825260081c6020820152f35b503461000e57602060031936011261000e57604060043581519067ffffffffffffffff81168252821c6020820152f35b503461000e57604060031936011261000e5760043560005260243560205260206040600020604051908152f35b503461000e57602060031936011261000e5760406004358151906fffffffffffffffffffffffffffffffff8116825260801c6020820152f35b503461000e57606060031936011261000e57602060243560405190600435811b9060443561010003011c8152f35b503461000e57602060031936011261000e57604060043581519061ffff8116825260101c6020820152f35b503461000e57604060031936011261000e576040805160043560243561010081900382811b901c83521c6020820152f35b503461000e57604060031936011261000e576020604051602435600435018152f35b503461000e57602060031936011261000e57604060043581519063ffffffff8116825260201c6020820152f35b503461000e57602060031936011261000e57600435600052602080600020604051908152f35b503461000e57602060031936011261000e57604060043581519073ffffffffffffffffffffffffffffffffffffffff8116825260a01c6020820152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f19601f604051930116820182811067ffffffffffffffff82111761060b57604052565b6106136105b5565b604052565b60209067ffffffffffffffff8111610632575b60051b0190565b61063a6105b5565b61062b565b9061065161064c83610618565b6105e5565b828152601f196106618294610618565b0190602036910137565b805182101561067f5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906106bb61064c83610618565b828152601f196106cb8294610618565b01906000805b8381106106de5750505050565b60209060408051908082019082821067ffffffffffffffff831117610713575b528381528284818301528286010152016106d1565b61071b6105b5565b6106fe56fea264697066735822122051adc4148a62b3dad144bfe23d7de8f7caa2a119239276c631238acfdb0716dc64736f6c634300080e0033';

type WordHelperTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WordHelperTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WordHelperTest__factory extends ContractFactory {
  constructor(...args: WordHelperTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<WordHelperTest> {
    return super.deploy(overrides || {}) as Promise<WordHelperTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WordHelperTest {
    return super.attach(address) as WordHelperTest;
  }
  override connect(signer: Signer): WordHelperTest__factory {
    return super.connect(signer) as WordHelperTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WordHelperTestInterface {
    return new utils.Interface(_abi) as WordHelperTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WordHelperTest {
    return new Contract(address, _abi, signerOrProvider) as WordHelperTest;
  }
}
