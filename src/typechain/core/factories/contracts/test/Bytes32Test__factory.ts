/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  Bytes32Test,
  Bytes32TestInterface,
} from '../../../contracts/test/Bytes32Test';

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'bits',
        type: 'uint256',
      },
    ],
    name: 'extract',
    outputs: [
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
      {
        internalType: 'bytes32',
        name: 'inputUpdated',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
    ],
    name: 'keccak256One',
    outputs: [
      {
        internalType: 'bytes32',
        name: 'result',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input1',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 'input2',
        type: 'bytes32',
      },
    ],
    name: 'keccak256Two',
    outputs: [
      {
        internalType: 'bytes32',
        name: 'result',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'key',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'offset_',
        type: 'uint256',
      },
    ],
    name: 'offset',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'input',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'start',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'end',
        type: 'uint256',
      },
    ],
    name: 'slice',
    outputs: [
      {
        internalType: 'uint256',
        name: 'val',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506101be806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635ef4570f1461005c578063912c766114610082578063b7b1418d1461009f578063cc34245c146100d4578063efcbe7c7146100e7575b600080fd5b61006f61006a366004610121565b610101565b6040519081526020015b60405180910390f35b61006f610090366004610143565b91811b61010092909203011c90565b6100bf6100ad366004610121565b61010081900382811b901c9291901c90565b60408051928352602083019190915201610079565b61006f6100e2366004610121565b610117565b61006f6100f536600461016f565b60009081526020902090565b60008281526020829052604081205b9392505050565b6000818301610110565b6000806040838503121561013457600080fd5b50508035926020909101359150565b60008060006060848603121561015857600080fd5b505081359360208301359350604090920135919050565b60006020828403121561018157600080fd5b503591905056fea2646970667358221220237a2e40cc7544af7de626fa13a97c63bd5d14f49c7d3e5b7c1f2c38061d940f64736f6c634300080d0033';

type Bytes32TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Bytes32TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bytes32Test__factory extends ContractFactory {
  constructor(...args: Bytes32TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Bytes32Test> {
    return super.deploy(overrides || {}) as Promise<Bytes32Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Bytes32Test {
    return super.attach(address) as Bytes32Test;
  }
  override connect(signer: Signer): Bytes32Test__factory {
    return super.connect(signer) as Bytes32Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Bytes32TestInterface {
    return new utils.Interface(_abi) as Bytes32TestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Bytes32Test {
    return new Contract(address, _abi, signerOrProvider) as Bytes32Test;
  }
}
