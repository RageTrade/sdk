/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  MockAggregatorV3,
  MockAggregatorV3Interface,
} from '../../../../../contracts/test/mocks/MockAggregatorV2.sol/MockAggregatorV3';

const _abi = [
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'description',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint80',
        name: '_roundId',
        type: 'uint80',
      },
    ],
    name: 'getRoundData',
    outputs: [
      {
        internalType: 'uint80',
        name: 'roundId',
        type: 'uint80',
      },
      {
        internalType: 'int256',
        name: 'answer',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'startedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'updatedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint80',
        name: 'answeredInRound',
        type: 'uint80',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'latestRoundData',
    outputs: [
      {
        internalType: 'uint80',
        name: 'roundId',
        type: 'uint80',
      },
      {
        internalType: 'int256',
        name: 'answer',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'startedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'updatedAt',
        type: 'uint256',
      },
      {
        internalType: 'uint80',
        name: 'answeredInRound',
        type: 'uint80',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'version',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x6080806040523461001657610200908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b6000803560e01c918263313ce567146100915750816354fd4d5014610073575080637284e4161461006a5780639a6fc8f5146100615763feaf968c14610059575b600080fd5b61005461018d565b50610054610137565b506100546100ac565b3461008e578060031936011261008e57602090604051908152f35b80fd5b346100a857816003193601126100a8576020918152f35b5080fd5b50346100545760006003193601126100545760408051908160208082526060519081818401526000905b8282106101205750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f9211610113575b01168101030190f35b600085828601015261010a565b6080820151868301860152859350908101906100d6565b50346100545760206003193601126100545760043569ffffffffffffffffffff811603610054576040518061018981906000608060a08401938281528260208201528260408201528260608201520152565b0390f35b5034610054576000600319360112610054576040518061018981906000608060a0840193828152826020820152826040820152826060820152015256fea2646970667358221220e266661464d1320301858491c20f764d79c80d7b5c8ce847154adafe8e66239764736f6c634300080e0033';

type MockAggregatorV3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAggregatorV3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAggregatorV3__factory extends ContractFactory {
  constructor(...args: MockAggregatorV3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockAggregatorV3> {
    return super.deploy(overrides || {}) as Promise<MockAggregatorV3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockAggregatorV3 {
    return super.attach(address) as MockAggregatorV3;
  }
  override connect(signer: Signer): MockAggregatorV3__factory {
    return super.connect(signer) as MockAggregatorV3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAggregatorV3Interface {
    return new utils.Interface(_abi) as MockAggregatorV3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAggregatorV3 {
    return new Contract(address, _abi, signerOrProvider) as MockAggregatorV3;
  }
}
