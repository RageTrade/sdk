/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  OracleMock,
  OracleMockInterface,
} from '../../../../contracts/test/mocks/OracleMock';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'IllegalSqrtPrice',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'y_target',
        type: 'uint256',
      },
      {
        internalType: 'uint160',
        name: 'x_lower',
        type: 'uint160',
      },
      {
        internalType: 'uint160',
        name: 'x_upper',
        type: 'uint160',
      },
    ],
    name: 'SolutionOutOfBounds',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    name: 'getTwapPriceX128',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    name: 'getTwapSqrtPriceX96',
    outputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_priceX128',
        type: 'uint256',
      },
    ],
    name: 'setPriceX128',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: '_sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'setSqrtPriceX96',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x6080806040523461001e57600160801b60005561048290816100248239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c918263726416331461022e57826372b6bb38146100605750508063c9c32f2a146100575763dd86c1011461004f575b600080fd5b61004a61030e565b5061004a61026a565b3461022b5761006e3661024b565b5080546401000276a39073fffd8963efd1fc6a506488495d951d5263988d25926001948583108015610202575b6101ae575093805b610120575b506101019373ffffffffffffffffffffffffffffffffffffffff8085169084161415918261010c575b50501561010557505b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390f35b90506100da565b90915061011884610429565b1490856100d1565b929383610149610130858861035b565b73ffffffffffffffffffffffffffffffffffffffff1690565b11156101a7578461018361017d61016186889961035b565b60011c737fffffffffffffffffffffffffffffffffffffff1690565b8561038c565b908361018e83610429565b111561019e5750935b90946100a3565b94935092610197565b93926100a8565b7ff7b6b2e9000000000000000000000000000000000000000000000000000000008152600481018390526401000276a3602482015273fffd8963efd1fc6a506488495d951d5263988d256044820152606490fd5b507ffffb12cdf108779ad387f409f1a66d1a2f5124ea64410ed5b3a4d30149805a4f831161009b565b80fd5b9034610247576020600319360112610247576004358255f35b5080fd5b600319602091011261004a5760043563ffffffff8116810361004a5790565b503461004a57602060031936011261004a5760043573ffffffffffffffffffffffffffffffffffffffff811680910361004a576401000276a3811080156102f0575b6102bf57806102ba916103c1565b600055005b602490604051907f5d236c450000000000000000000000000000000000000000000000000000000082526004820152fd5b5073fffd8963efd1fc6a506488495d951d5263988d268110156102ac565b503461004a5761031d3661024b565b506020600054604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff9182169116818110610380570390565b61038861032b565b0390565b9073ffffffffffffffffffffffffffffffffffffffff80809316911680920381116103b5570190565b6103bd61032b565b0190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82820990828102928380841093039280840393146104205768010000000000000000918383111561004a570990828211900360c01b910360401c1790565b50505060401c90565b73ffffffffffffffffffffffffffffffffffffffff6104499116806103c1565b9056fea2646970667358221220496c8498c688d75afa0484a8080ae50dfd3d23ceede42ef0321ed5f9263a315864736f6c634300080e0033';

type OracleMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleMock__factory extends ContractFactory {
  constructor(...args: OracleMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OracleMock> {
    return super.deploy(overrides || {}) as Promise<OracleMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OracleMock {
    return super.attach(address) as OracleMock;
  }
  override connect(signer: Signer): OracleMock__factory {
    return super.connect(signer) as OracleMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleMockInterface {
    return new utils.Interface(_abi) as OracleMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleMock {
    return new Contract(address, _abi, signerOrProvider) as OracleMock;
  }
}
