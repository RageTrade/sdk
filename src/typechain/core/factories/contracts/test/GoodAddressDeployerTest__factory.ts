/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  GoodAddressDeployerTest,
  GoodAddressDeployerTestInterface,
} from '../../../contracts/test/GoodAddressDeployerTest';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'val',
        type: 'address',
      },
    ],
    name: 'Address',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: 'bytecode',
        type: 'bytes',
      },
    ],
    name: 'deploy',
    outputs: [
      {
        internalType: 'address',
        name: 'computed',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'isAddressGood',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    stateMutability: 'payable',
    type: 'receive',
  },
];

const _bytecode =
  '0x608080604052346100165761062c908161001c8239f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c806347823a671461013f576361ff715f1461003d575061000e565b3461013c5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013c5760243567ffffffffffffffff808211610138573660238301121561013857816004013590811161012b575b604051916100cd60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601846101f0565b818352366024838301011161012757926020826100fc9493602461012397018386013783010152600435610231565b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390f35b8380fd5b610133610197565b610097565b8280fd5b80fd5b503461013c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013c5760043573ffffffffffffffffffffffffffffffffffffffff81160361013c5760805260206080f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176101e357604052565b6101eb610197565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176101e357604052565b919060019283431061038f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff430140906000948351908060209283870120923060601b915b61030b575b505050506102c7926102aa9261029192610459565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8416146103be565b60405173ffffffffffffffffffffffffffffffffffffffff831681527febfb412ded3f9cdb15b75308503b279416e74d382f6ce86eedee0ef3130fa9e390602090a1565b909192975073ffffffffffffffffffffffffffffffffffffffff604051828101907fff00000000000000000000000000000000000000000000000000000000000000825284602182015287603582015260558b81830152815261036d816101c7565b519020169761037b89610552565b60000361027c579483019492919082610277565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b156103c557565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b156103fb57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152fd5b9190918047106104f4578151156104965760208251920190f561049373ffffffffffffffffffffffffffffffffffffffff821615156103f4565b90565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff604051917f47823a67000000000000000000000000000000000000000000000000000000008352166004820152602081602481305afa9081156105ea576000916105af575090565b6020813d82116105e2575b816105c7602093836101f0565b810103126105de575190811515820361013c575090565b5080fd5b3d91506105ba565b6040513d6000823e3d90fdfea2646970667358221220de8bff4b4c93205822533e1a25cadf14ad18a21787c0b20d60bff12a682ef11a64736f6c634300080e0033';

type GoodAddressDeployerTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GoodAddressDeployerTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GoodAddressDeployerTest__factory extends ContractFactory {
  constructor(...args: GoodAddressDeployerTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GoodAddressDeployerTest> {
    return super.deploy(overrides || {}) as Promise<GoodAddressDeployerTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GoodAddressDeployerTest {
    return super.attach(address) as GoodAddressDeployerTest;
  }
  override connect(signer: Signer): GoodAddressDeployerTest__factory {
    return super.connect(signer) as GoodAddressDeployerTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GoodAddressDeployerTestInterface {
    return new utils.Interface(_abi) as GoodAddressDeployerTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GoodAddressDeployerTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GoodAddressDeployerTest;
  }
}
