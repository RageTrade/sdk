/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  PriceMathTest,
  PriceMathTestInterface,
} from '../../../contracts/test/PriceMathTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'IllegalSqrtPrice',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'y_target',
        type: 'uint256',
      },
      {
        internalType: 'uint160',
        name: 'x_lower',
        type: 'uint160',
      },
      {
        internalType: 'uint160',
        name: 'x_upper',
        type: 'uint160',
      },
    ],
    name: 'SolutionOutOfBounds',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'toPriceX128',
    outputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    name: 'toSqrtPriceX96',
    outputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608080604052346100165761044e908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c918263daa5e1701461004157505063f868ea0214610039575b600080fd5b610034610230565b3461022d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022d576004356401000276a39073fffd8963efd1fc6a506488495d951d5263988d25926001948583108015610204575b6101b0575093805b610122575b506101039373ffffffffffffffffffffffffffffffffffffffff8085169084161415918261010e575b50501561010757505b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390f35b90506100dc565b90915061011a846103f5565b1490856100d3565b92938361014b610132858861038f565b73ffffffffffffffffffffffffffffffffffffffff1690565b11156101a9578461018561017f61016386889961038f565b60011c737fffffffffffffffffffffffffffffffffffffff1690565b856103c0565b9083610190836103f5565b11156101a05750935b90946100a5565b94935092610199565b93926100aa565b7ff7b6b2e9000000000000000000000000000000000000000000000000000000008152600481018390526401000276a3602482015273fffd8963efd1fc6a506488495d951d5263988d256044820152606490fd5b507ffffb12cdf108779ad387f409f1a66d1a2f5124ea64410ed5b3a4d30149805a4f831161009d565b80fd5b50346100345760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100345760043573ffffffffffffffffffffffffffffffffffffffff8116809103610034576401000276a3811080156102d9575b6102a8576102a0816020926102f7565b604051908152f35b602490604051907f5d236c450000000000000000000000000000000000000000000000000000000082526004820152fd5b5073fffd8963efd1fc6a506488495d951d5263988d26811015610290565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828209908281029283808410930392808403931461035657680100000000000000009183831115610034570990828211900360c01b910360401c1790565b50505060401c90565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff91821691168181106103b4570390565b6103bc61035f565b0390565b9073ffffffffffffffffffffffffffffffffffffffff80809316911680920381116103e9570190565b6103f161035f565b0190565b73ffffffffffffffffffffffffffffffffffffffff6104159116806102f7565b9056fea2646970667358221220ba38136e15071c0a2ab9ad7b093e7a7835c7323b659063baf0a1388ac20b160764736f6c634300080e0033';

type PriceMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriceMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PriceMathTest__factory extends ContractFactory {
  constructor(...args: PriceMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PriceMathTest> {
    return super.deploy(overrides || {}) as Promise<PriceMathTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PriceMathTest {
    return super.attach(address) as PriceMathTest;
  }
  override connect(signer: Signer): PriceMathTest__factory {
    return super.connect(signer) as PriceMathTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceMathTestInterface {
    return new utils.Interface(_abi) as PriceMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceMathTest {
    return new Contract(address, _abi, signerOrProvider) as PriceMathTest;
  }
}
