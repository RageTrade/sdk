/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  VTokenPositionTest,
  VTokenPositionTestInterface,
} from '../../../contracts/test/VTokenPositionTest';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: '_balance',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: '_netTraderPosition',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: '_sumALastX128',
        type: 'int256',
      },
    ],
    name: 'init',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'price',
        type: 'uint256',
      },
    ],
    name: 'marketValue',
    outputs: [
      {
        internalType: 'int256',
        name: 'value',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'riskSide',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'unrealizedFundingPayment',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'wrapper',
    outputs: [
      {
        internalType: 'contract VPoolWrapperMock',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x6080806040523461008557610ad48181016001600160401b0381118382101761006f57829161071c833903906000f0801561006357600280546001600160a01b0319166001600160a01b0392909216919091179055604051610691908161008b8239f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c918263125071271461007d5750508063481050a9146100745780635094b8ea1461006b578063ac210cc7146100625763f78231b21461005a575b600080fd5b6100556101d0565b5061005561019b565b50610055610151565b506100556100f5565b346100f257806003193601126100f2578080526001602052806040812054136000146100ea57805b60028210156100bd575060ff168152602090f35b0390f35b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526021600452fd5b6001906100a5565b80fd5b5034610055576060600319360112610055576000546000198114610144575b60018101600055600052600160205260406000206004358155602435600182015560026044359101556000604051f35b61014c6102ee565b610114565b5034610055576000806003193601126100f2576101936040828060209452600184522073ffffffffffffffffffffffffffffffffffffffff600254169061045d565b604051908152f35b503461005557600060031936011261005557602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b5034610055576020600319360112610055576100b96102ab60008080526001602052604081209073ffffffffffffffffffffffffffffffffffffffff60025416610295610290845484811294856000146102e857600160001981847f800000000000000000000000000000000000000000000000000000000000000005821284861316166102db575b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05138716166102ce575b035b600435906103d1565b610423565b916102bb575b6102a5919261045d565b9061031e565b6040519081529081906020820190565b6102c76102a592610396565b915061029b565b6102d66102ee565b610285565b6102e36102ee565b610259565b50610287565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516610389575b817f80000000000000000000000000000000000000000000000000000000000000000383121661037d570190565b6103856102ee565b0190565b6103916102ee565b61034f565b7f800000000000000000000000000000000000000000000000000000000000000081146103c4575b60000390565b6103cc6102ee565b6103be565b600019828209908281029283808410930392808403931461041a577001000000000000000000000000000000009183831115610055570990828211900360801b910360801c1790565b50505060801c90565b7f80000000000000000000000000000000000000000000000000000000000000008110156100555790565b90816020910312610055575190565b90602073ffffffffffffffffffffffffffffffffffffffff916004604051809481937fa3a1e7e9000000000000000000000000000000000000000000000000000000008352165afa908115610573576000916104d5575b506104cd9082600160026104d29501549101549161057f565b610396565b90565b906020903d821161056b575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011683019083821067ffffffffffffffff83111761053e57506104cd926104d294926105369260405281019061044e565b9150916104b4565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526041600452fd5b3d91506104e1565b6040513d6000823e3d90fd5b90600091828212827f800000000000000000000000000000000000000000000000000000000000000001821281151661064e575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821316610641575b039160018282121561063a57506105f58291610396565b915b819084121561062b575061061991610613610290921594610396565b906103d1565b90156106225790565b6104d290610396565b926106199261029092506103d1565b90916105f7565b6106496102ee565b6105de565b6106566102ee565b6105b356fea26469706673582212206f21da53ab23cd6ba0c4a9d92a48fda0697b60063aae9bedca0f5707aae623d264736f6c634300080e00336080806040523461001657610ab8908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806302dc99511461017d5780630d8f6f4614610174578063195cd92c1461016b5780631dce5fcf146101625780632a99a792146101085780634c2ebc5814610159578063512403361461015057806356d15a88146101475780635e622abc1461013e5780636719578c146101355780637779815c1461011157806386c8e9a71461012c57806397c71faf14610123578063a34123a71461011a578063a3a1e7e914610111578063a3c35e2c14610108578063d74dcaca146100ff578063ea6e4e52146100f65763fca6fbf2146100ee57600080fd5b61000e610850565b5061000e6107ec565b5061000e610794565b5061000e610508565b5061000e61066f565b5061000e6106e5565b5061000e6106c3565b5061000e61069c565b5061000e61063a565b5061000e61061d565b5061000e610609565b5061000e6105ed565b5061000e610562565b5061000e61043e565b5061000e61028b565b5061000e6101a1565b503461000e57600060031936011261000e57602062ffffff60015416604051908152f35b503461000e57602060031936011261000e5760206004357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0606001827f8000000000000000000000000000000000000000000000000000000000000000058212600084131616610251575b60017ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c8312600084121616610244575b60405191028152f35b61024c610967565b61023b565b610259610967565b61020b565b60043590811515820361000e57565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e57606060031936011261000e576103796102a861025e565b6024356102b660443561026d565b6102be610877565b916000808452602084019080825260408501928184528160608701528160808701528160a08701528160c087015215159084131460001461037d578261030e92936103099252610a47565b6109d4565b90525b6040519182918291909160c060e082019380518352602081015160208401526040810151604084015260608101516060840152608081015160808401528173ffffffffffffffffffffffffffffffffffffffff918260a08201511660a0860152015116910152565b0390f35b61039161038984610a47565b610fa0900590565b905252610311565b600435908160020b820361000e57565b602435908160020b820361000e57565b600319606091011261000e576004358060020b810361000e57906024358060020b810361000e57906044356fffffffffffffffffffffffffffffffff8116810361000e5790565b60409061043c939594929560c0820196825260208201520190606080918051845260208101516020850152604081015160408501520151910152565b565b503461000e576104ef6fffffffffffffffffffffffffffffffff610379610464366103b9565b6104729592959491946108e6565b50169283600454811981116104fb575b016004556104e98560020b948560005260026020526104bf8160016104b88660406000209060020b600052602052604060002090565b0154610997565b9560005260026020526104e38360406000209060020b600052602052604060002090565b54610997565b9461090a565b60405193849384610400565b610503610967565b610482565b503461000e57604060031936011261000e576080610535610527610399565b61052f6103a9565b9061090a565b6105606040518092606080918051845260208101516020850152604081015160408501520151910152565bf35b503461000e5760c060031936011261000e5761057c610399565b60036105866103a9565b9161058f6108c6565b9260443584526020840160643581526105d760408601926084358452606087019460a435865260020b600052600060205260406000209060020b600052602052604060002090565b9451855551600185015551600284015551910155005b503461000e57602060031936011261000e5761060761025e565b005b503461000e5760c060031936011261000e57005b503461000e57600060031936011261000e57602060405160008152f35b503461000e57600060031936011261000e57602073ffffffffffffffffffffffffffffffffffffffff60035416604051908152f35b503461000e57600060031936011261000e5760206040517014000000000000000000000000000000008152f35b503461000e57600060031936011261000e57602062ffffff60015460181c16604051908152f35b503461000e57602060031936011261000e576020604051610fa0600435058152f35b503461000e576104ef6fffffffffffffffffffffffffffffffff61037961070b366103b9565b61071895929491956108e6565b50169384600454818110610787575b036004556107818460020b9586600052600260205261075b816104e38560406000209060020b600052602052604060002090565b96600052600260205260016104b88460406000209060020b600052602052604060002090565b9361090a565b61078f610967565b610727565b503461000e57608060031936011261000e576107dc6107b1610399565b6107b96103a9565b9060020b600052600260205260406000209060020b600052602052604060002090565b6044358155606435600190910155005b503461000e57602060031936011261000e5773ffffffffffffffffffffffffffffffffffffffff60043561081f8161026d565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060035416176003556000604051f35b503461000e57600060031936011261000e57602062ffffff60015460301c16604051908152f35b6040519060e0820182811067ffffffffffffffff82111761089757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051906080820182811067ffffffffffffffff82111761089757604052565b6108ee6108c6565b9060008252600060208301526000604083015260006060830152565b9061093a916109176108e6565b5060020b600052600060205260406000209060020b600052602052604060002090565b60036109446108c6565b918054835260018101546020840152600281015460408401520154606082015290565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211811515166109c8570290565b6109d0610967565b0290565b610fa09060017e083126e978d4fdf3b645a1cac083126e978d4fdf3b645a1cac083126e978d48211600083131616610a3a575b60017ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c82126000831216166109c8570290565b610a42610967565b610a07565b7f80000000000000000000000000000000000000000000000000000000000000008114610a75575b60000390565b610a7d610967565b610a6f56fea26469706673582212200f9a172143839e71b45fba9b45692bcf7f87ac43051223cc076de54e4110c29864736f6c634300080e0033';

type VTokenPositionTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VTokenPositionTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VTokenPositionTest__factory extends ContractFactory {
  constructor(...args: VTokenPositionTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VTokenPositionTest> {
    return super.deploy(overrides || {}) as Promise<VTokenPositionTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): VTokenPositionTest {
    return super.attach(address) as VTokenPositionTest;
  }
  override connect(signer: Signer): VTokenPositionTest__factory {
    return super.connect(signer) as VTokenPositionTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VTokenPositionTestInterface {
    return new utils.Interface(_abi) as VTokenPositionTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VTokenPositionTest {
    return new Contract(address, _abi, signerOrProvider) as VTokenPositionTest;
  }
}
