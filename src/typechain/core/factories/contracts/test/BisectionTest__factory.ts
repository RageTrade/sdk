/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  BisectionTest,
  BisectionTestInterface,
} from '../../../contracts/test/BisectionTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'y_target',
        type: 'uint256',
      },
      {
        internalType: 'uint160',
        name: 'x_lower',
        type: 'uint160',
      },
      {
        internalType: 'uint160',
        name: 'x_upper',
        type: 'uint160',
      },
    ],
    name: 'SolutionOutOfBounds',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'y_target',
        type: 'uint256',
      },
      {
        internalType: 'uint160',
        name: 'x_lower',
        type: 'uint160',
      },
      {
        internalType: 'uint160',
        name: 'x_upper',
        type: 'uint160',
      },
    ],
    name: 'findSolution',
    outputs: [
      {
        internalType: 'uint160',
        name: '',
        type: 'uint160',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'val',
        type: 'uint160',
      },
    ],
    name: 'increasingFunction',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061035c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806350135a251461003b5780635f1c736814610061575b600080fd5b61004e6100493660046101fc565b61008c565b6040519081526020015b60405180910390f35b61007461006f36600461021e565b6100a8565b6040516001600160a01b039091168152602001610058565b6000610099826003610270565b6001600160a01b031692915050565b60006100b861008c8585856100c0565b949350505050565b6000806100d0848763ffffffff16565b905060006100e1848863ffffffff16565b9050818610806100f057508086115b1561012c5760405163f7b6b2e960e01b8152600481018790526001600160a01b0380871660248301528516604482015260640160405180910390fd5b6000805b600161013c888861029f565b6001600160a01b0316111561019a576002610157888861029f565b61016191906102c7565b61016b90886102fb565b905061017a818a63ffffffff16565b91508782111561018f57809550819250610130565b809650819350610130565b856001600160a01b0316876001600160a01b0316141580156101c75750876101c5878b63ffffffff16565b145b6101d157866101d3565b855b9998505050505050505050565b80356001600160a01b03811681146101f757600080fd5b919050565b60006020828403121561020e57600080fd5b610217826101e0565b9392505050565b60008060006060848603121561023357600080fd5b83359250610243602085016101e0565b9150610251604085016101e0565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b60006001600160a01b03828116848216811515828404821116156102965761029661025a565b02949350505050565b60006001600160a01b03838116908316818110156102bf576102bf61025a565b039392505050565b60006001600160a01b03838116806102ef57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160a01b0382811684821680830382111561031d5761031d61025a565b0194935050505056fea26469706673582212202b0174f48884f82997cb34c04a1917dd7298a317b07093afed8f3fe63e36aa6f64736f6c634300080d0033';

type BisectionTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BisectionTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BisectionTest__factory extends ContractFactory {
  constructor(...args: BisectionTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BisectionTest> {
    return super.deploy(overrides || {}) as Promise<BisectionTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BisectionTest {
    return super.attach(address) as BisectionTest;
  }
  override connect(signer: Signer): BisectionTest__factory {
    return super.connect(signer) as BisectionTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BisectionTestInterface {
    return new utils.Interface(_abi) as BisectionTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BisectionTest {
    return new Contract(address, _abi, signerOrProvider) as BisectionTest;
  }
}
