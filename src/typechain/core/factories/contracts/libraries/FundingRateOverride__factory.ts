/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  FundingRateOverride,
  FundingRateOverrideInterface,
} from '../../../contracts/libraries/FundingRateOverride';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'oracle',
        type: 'address',
      },
    ],
    name: 'InvalidFundingRateOracle',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'value',
        type: 'int256',
      },
    ],
    name: 'InvalidFundingRateValueX128',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'bytes32',
        name: 'fundingRateOverrideData',
        type: 'bytes32',
      },
    ],
    name: 'FundingRateOverrideUpdated',
    type: 'event',
  },
];

const _bytecode =
  '0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122072ceaa1d03c8ed358a179a1d1d7f9f266f426367a026179090dd8b8ab58962eb64736f6c634300080e0033';

type FundingRateOverrideConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingRateOverrideConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundingRateOverride__factory extends ContractFactory {
  constructor(...args: FundingRateOverrideConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundingRateOverride> {
    return super.deploy(overrides || {}) as Promise<FundingRateOverride>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FundingRateOverride {
    return super.attach(address) as FundingRateOverride;
  }
  override connect(signer: Signer): FundingRateOverride__factory {
    return super.connect(signer) as FundingRateOverride__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingRateOverrideInterface {
    return new utils.Interface(_abi) as FundingRateOverrideInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundingRateOverride {
    return new Contract(address, _abi, signerOrProvider) as FundingRateOverride;
  }
}
