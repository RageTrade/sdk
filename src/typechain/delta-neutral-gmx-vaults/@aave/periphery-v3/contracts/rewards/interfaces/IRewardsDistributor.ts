/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../../../common';

export interface IRewardsDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'EMISSION_MANAGER'
      | 'getAllUserRewards'
      | 'getAssetDecimals'
      | 'getAssetIndex'
      | 'getDistributionEnd'
      | 'getEmissionManager'
      | 'getRewardsByAsset'
      | 'getRewardsData'
      | 'getRewardsList'
      | 'getUserAccruedRewards'
      | 'getUserAssetIndex'
      | 'getUserRewards'
      | 'setDistributionEnd'
      | 'setEmissionPerSecond'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: 'Accrued' | 'AssetConfigUpdated'
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'EMISSION_MANAGER',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllUserRewards',
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAssetDecimals',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAssetIndex',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getDistributionEnd',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getEmissionManager',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getRewardsByAsset',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRewardsData',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRewardsList',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserAccruedRewards',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserAssetIndex',
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserRewards',
    values: [AddressLike[], AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setDistributionEnd',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setEmissionPerSecond',
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: 'EMISSION_MANAGER',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAllUserRewards',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAssetDecimals',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAssetIndex',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDistributionEnd',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEmissionManager',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRewardsByAsset',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRewardsData',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRewardsList',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserAccruedRewards',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserAssetIndex',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserRewards',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDistributionEnd',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setEmissionPerSecond',
    data: BytesLike
  ): Result;
}

export namespace AccruedEvent {
  export type InputTuple = [
    asset: AddressLike,
    reward: AddressLike,
    user: AddressLike,
    assetIndex: BigNumberish,
    userIndex: BigNumberish,
    rewardsAccrued: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    reward: string,
    user: string,
    assetIndex: bigint,
    userIndex: bigint,
    rewardsAccrued: bigint
  ];
  export interface OutputObject {
    asset: string;
    reward: string;
    user: string;
    assetIndex: bigint;
    userIndex: bigint;
    rewardsAccrued: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetConfigUpdatedEvent {
  export type InputTuple = [
    asset: AddressLike,
    reward: AddressLike,
    oldEmission: BigNumberish,
    newEmission: BigNumberish,
    oldDistributionEnd: BigNumberish,
    newDistributionEnd: BigNumberish,
    assetIndex: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    reward: string,
    oldEmission: bigint,
    newEmission: bigint,
    oldDistributionEnd: bigint,
    newDistributionEnd: bigint,
    assetIndex: bigint
  ];
  export interface OutputObject {
    asset: string;
    reward: string;
    oldEmission: bigint;
    newEmission: bigint;
    oldDistributionEnd: bigint;
    newDistributionEnd: bigint;
    assetIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRewardsDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: IRewardsDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EMISSION_MANAGER: TypedContractMethod<[], [string], 'view'>;

  getAllUserRewards: TypedContractMethod<
    [assets: AddressLike[], user: AddressLike],
    [[string[], bigint[]]],
    'view'
  >;

  getAssetDecimals: TypedContractMethod<[asset: AddressLike], [bigint], 'view'>;

  getAssetIndex: TypedContractMethod<
    [asset: AddressLike, reward: AddressLike],
    [[bigint, bigint]],
    'view'
  >;

  getDistributionEnd: TypedContractMethod<
    [asset: AddressLike, reward: AddressLike],
    [bigint],
    'view'
  >;

  getEmissionManager: TypedContractMethod<[], [string], 'view'>;

  getRewardsByAsset: TypedContractMethod<
    [asset: AddressLike],
    [string[]],
    'view'
  >;

  getRewardsData: TypedContractMethod<
    [asset: AddressLike, reward: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    'view'
  >;

  getRewardsList: TypedContractMethod<[], [string[]], 'view'>;

  getUserAccruedRewards: TypedContractMethod<
    [user: AddressLike, reward: AddressLike],
    [bigint],
    'view'
  >;

  getUserAssetIndex: TypedContractMethod<
    [user: AddressLike, asset: AddressLike, reward: AddressLike],
    [bigint],
    'view'
  >;

  getUserRewards: TypedContractMethod<
    [assets: AddressLike[], user: AddressLike, reward: AddressLike],
    [bigint],
    'view'
  >;

  setDistributionEnd: TypedContractMethod<
    [asset: AddressLike, reward: AddressLike, newDistributionEnd: BigNumberish],
    [void],
    'nonpayable'
  >;

  setEmissionPerSecond: TypedContractMethod<
    [
      asset: AddressLike,
      rewards: AddressLike[],
      newEmissionsPerSecond: BigNumberish[]
    ],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'EMISSION_MANAGER'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getAllUserRewards'
  ): TypedContractMethod<
    [assets: AddressLike[], user: AddressLike],
    [[string[], bigint[]]],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getAssetDecimals'
  ): TypedContractMethod<[asset: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getAssetIndex'
  ): TypedContractMethod<
    [asset: AddressLike, reward: AddressLike],
    [[bigint, bigint]],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getDistributionEnd'
  ): TypedContractMethod<
    [asset: AddressLike, reward: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getEmissionManager'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getRewardsByAsset'
  ): TypedContractMethod<[asset: AddressLike], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'getRewardsData'
  ): TypedContractMethod<
    [asset: AddressLike, reward: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getRewardsList'
  ): TypedContractMethod<[], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'getUserAccruedRewards'
  ): TypedContractMethod<
    [user: AddressLike, reward: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getUserAssetIndex'
  ): TypedContractMethod<
    [user: AddressLike, asset: AddressLike, reward: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getUserRewards'
  ): TypedContractMethod<
    [assets: AddressLike[], user: AddressLike, reward: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'setDistributionEnd'
  ): TypedContractMethod<
    [asset: AddressLike, reward: AddressLike, newDistributionEnd: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setEmissionPerSecond'
  ): TypedContractMethod<
    [
      asset: AddressLike,
      rewards: AddressLike[],
      newEmissionsPerSecond: BigNumberish[]
    ],
    [void],
    'nonpayable'
  >;

  getEvent(
    key: 'Accrued'
  ): TypedContractEvent<
    AccruedEvent.InputTuple,
    AccruedEvent.OutputTuple,
    AccruedEvent.OutputObject
  >;
  getEvent(
    key: 'AssetConfigUpdated'
  ): TypedContractEvent<
    AssetConfigUpdatedEvent.InputTuple,
    AssetConfigUpdatedEvent.OutputTuple,
    AssetConfigUpdatedEvent.OutputObject
  >;

  filters: {
    'Accrued(address,address,address,uint256,uint256,uint256)': TypedContractEvent<
      AccruedEvent.InputTuple,
      AccruedEvent.OutputTuple,
      AccruedEvent.OutputObject
    >;
    Accrued: TypedContractEvent<
      AccruedEvent.InputTuple,
      AccruedEvent.OutputTuple,
      AccruedEvent.OutputObject
    >;

    'AssetConfigUpdated(address,address,uint256,uint256,uint256,uint256,uint256)': TypedContractEvent<
      AssetConfigUpdatedEvent.InputTuple,
      AssetConfigUpdatedEvent.OutputTuple,
      AssetConfigUpdatedEvent.OutputObject
    >;
    AssetConfigUpdated: TypedContractEvent<
      AssetConfigUpdatedEvent.InputTuple,
      AssetConfigUpdatedEvent.OutputTuple,
      AssetConfigUpdatedEvent.OutputObject
    >;
  };
}
