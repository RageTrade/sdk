/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../common';
import type {
  SwapRouterMock,
  SwapRouterMockInterface,
} from '../../../contracts/mocks/SwapRouterMock';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'path',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountIn',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOutMinimum',
            type: 'uint256',
          },
        ],
        internalType: 'struct ISwapRouter.ExactInputParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactInput',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'tokenIn',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'tokenOut',
            type: 'address',
          },
          {
            internalType: 'uint24',
            name: 'fee',
            type: 'uint24',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountIn',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOutMinimum',
            type: 'uint256',
          },
          {
            internalType: 'uint160',
            name: 'sqrtPriceLimitX96',
            type: 'uint160',
          },
        ],
        internalType: 'struct ISwapRouter.ExactInputSingleParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactInputSingle',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'path',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOut',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountInMaximum',
            type: 'uint256',
          },
        ],
        internalType: 'struct ISwapRouter.ExactOutputParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactOutput',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountIn',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'tokenIn',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'tokenOut',
            type: 'address',
          },
          {
            internalType: 'uint24',
            name: 'fee',
            type: 'uint24',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOut',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountInMaximum',
            type: 'uint256',
          },
          {
            internalType: 'uint160',
            name: 'sqrtPriceLimitX96',
            type: 'uint160',
          },
        ],
        internalType: 'struct ISwapRouter.ExactOutputSingleParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactOutputSingle',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountIn',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x6080604052346200055557620000146200055a565b8051906001600160401b03908183116200053f576000918254936001908186811c961693841562000534575b6020948588101462000520578190601f97888111620004cd575b508590888311600114620004695787926200045d575b5050600019600383901b1c191690821b1784555b6200008e620005d4565b8051908382116200029f5782548381811c9116801562000452575b868210146200037057908188849311620003ff575b5085908883116001146200039b5787926200038f575b5050600019600383901b1c191690821b1781555b620000f26200055a565b9485518381116200029f576002548381811c9116801562000384575b86821014620003705782811162000327575b5084828211600114620002bf57869782939495969792620002b3575b5050600019600383901b1c191690831b176002555b6200015b620005d4565b80519384116200029f5760039586548481811c9116801562000294575b87821014620002805783811162000238575b5085928511600114620001d2579394508492919083620001c6575b50501b9160001990841b1c19161790555b60405161081e90816200067c8239f35b015192503880620001a5565b86815285812093958591601f198316915b888383106200021d575050501062000204575b505050811b019055620001b6565b015160001983861b60f8161c19169055388080620001f6565b858701518855909601959485019487935090810190620001e3565b8782528682208480880160051c82019289891062000276575b0160051c019085905b8281106200026a5750506200018a565b8381550185906200025a565b9250819262000251565b634e487b7160e01b82526022600452602482fd5b90607f169062000178565b634e487b7160e01b86526041600452602486fd5b0151905038806200013c565b6002875285872090601f198316885b8181106200031157509883869798999a96959610620002f7575b505050811b0160025562000151565b015160001960f88460031b161c19169055388080620002e8565b8a830151845592860192918801918801620002ce565b600287528587208380840160051c82019288851062000366575b0160051c019084905b8281106200035a57505062000120565b8881550184906200034a565b9250819262000341565b634e487b7160e01b87526022600452602487fd5b90607f16906200010e565b015190503880620000d4565b8488528688208594509190601f198416895b89828210620003e85750508411620003ce575b505050811b018155620000e8565b015160001960f88460031b161c19169055388080620003c0565b8385015186558897909501949384019301620003ad565b9091508387528587208880850160051c82019288861062000448575b918691869594930160051c01915b82811062000439575050620000be565b89815585945086910162000429565b925081926200041b565b90607f1690620000a9565b01519050388062000070565b8780528688208594509190601f198416895b89828210620004b657505084116200049c575b505050811b01845562000084565b015160001960f88460031b161c191690553880806200048e565b83850151865588979095019493840193016200047b565b9091508680528587208880850160051c82019288861062000516575b918691869594930160051c01915b828110620005075750506200005a565b898155859450869101620004f7565b92508192620004e9565b634e487b7160e01b86526022600452602486fd5b95607f169562000040565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040517f82af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000006020820152607d60ea1b60348201527fff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000006037820152602b8152606081016001600160401b038111828210176200053f5760405290565b6040517f2f2a2543b76a4166549f7aab2e75bef0aefc5b0f0000000000000000000000006020820152607d60ea1b603482018190527f82af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000006037830152604b8201527fff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000604e82015260428152608081016001600160401b038111828210176200053f576040529056fe60806040908082526004918236101561001757600080fd5b600091823560e01c908163414bf389146105da57508063c04b8d59146103be578063db3e2198146102c55763f28c04981461005157600080fd5b346102c15761005f366106e4565b9161007461006d8480610797565b36916107ca565b93845160208096012083518390845491600183811c908085169485156102b7575b8b831086146102a457918b93918593828552858501979081600014610285575060011461022a575b50506100cb92500382610747565b519020036101fb577382af49447d8a07e3bd95bd0d56f35241523fbab173ff970a61a04b1ca14834a43f5de4533ebddb5cc85b84516323b872dd60e01b8152338482019081523060208201526080880135604082018190529791908990829081906060010381896001600160a01b038098165af180156101f157958095938a9593606093610183996101d4575b50895163a9059cbb60e01b815233968101968752930135602086015291968794859391849160400190565b0393165af19081156101c9575061019c575b5051908152f35b6101bb90843d86116101c2575b6101b38183610747565b81019061077f565b5038610195565b503d6101a9565b8351903d90823e3d90fd5b6101ea90883d8a116101c2576101b38183610747565b5038610158565b87513d88823e3d90fd5b732f2a2543b76a4166549f7aab2e75bef0aefc5b0f73ff970a61a04b1ca14834a43f5de4533ebddb5cc86100fe565b8980527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639492508991905b81831061026d57508c9450508201016100cb386100bd565b85548784018501529485019486945091830191610255565b9150506100cb94925060ff19168652151560051b8201018a92386100bd565b634e487b7160e01b895260228852602489fd5b91607f1691610095565b5080fd5b50346102c1576101003660031901126102c1576001600160a01b0391826102ea61071b565b169360c43593835180966323b872dd60e01b825260209788918187816103328c30338c85016040919493929460608201956001600160a01b0380921683521660208201520152565b03925af180156103b457928792610380928695610397575b50610353610731565b875163a9059cbb60e01b81523393810193845260a435602085015296879492909116928492839160400190565b03925af19081156101c9575061019c575051908152f35b6103ad90853d87116101c2576101b38183610747565b503861034a565b85513d86823e3d90fd5b50346102c1576103cd366106e4565b926103db61006d8580610797565b9384516020809601208351859060025491600183811c908085169485156105d0575b8b831086146105bd57918b9391859382855285850197908160001461059e5750600114610542575b505061043392500382610747565b51902003610511577382af49447d8a07e3bd95bd0d56f35241523fbab19173ff970a61a04b1ca14834a43f5de4533ebddb5cc8915b84516323b872dd60e01b81523383820190815230602082015260608381013560408301528991839182910103818a6001600160a01b03809a165af180156105075792608061018396938996938b966104ea575b50885163a9059cbb60e01b81523393810193845291013560208301819052989096879485939091849160400190565b61050090873d89116101c2576101b38183610747565b50386104bb565b86513d89823e3d90fd5b732f2a2543b76a4166549f7aab2e75bef0aefc5b0f9173ff970a61a04b1ca14834a43f5de4533ebddb5cc891610468565b60028c527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9492508b91905b81831061058657508c94505082010161043338610425565b8554878401850152948501948694509183019161056e565b91505061043394925060ff19168652151560051b8201018a9238610425565b634e487b7160e01b8b526022895260248bfd5b91607f16916103fd565b848385346106e1576101003660031901126106e1576001600160a01b03848161060161071b565b6323b872dd60e01b8352338789019081523060208281019190915260a43560408301529889939092169082908790829060600103925af180156106d75791869161068694936106ba575b50610654610731565b855163a9059cbb60e01b81523397810197885260c4356020890181905297909586939092169183918691839160400190565b03925af19081156101c9575061069d575051908152f35b6106b390843d86116101c2576101b38183610747565b5083610195565b6106d090833d85116101c2576101b38183610747565b508761064b565b84513d85823e3d90fd5b80fd5b60031990602081830112610716576004359167ffffffffffffffff8311610716578260a0920301126107165760040190565b600080fd5b6004356001600160a01b03811681036107165790565b6024356001600160a01b03811681036107165790565b90601f8019910116810190811067ffffffffffffffff82111761076957604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610716575180151581036107165790565b903590601e1981360301821215610716570180359067ffffffffffffffff82116107165760200191813603831361071657565b92919267ffffffffffffffff821161076957604051916107f4601f8201601f191660200184610747565b82948184528183011161071657828160209384600096013701015256fea164736f6c6343000812000a';

type SwapRouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapRouterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapRouterMock__factory extends ContractFactory {
  constructor(...args: SwapRouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapRouterMock> {
    return super.deploy(overrides || {}) as Promise<SwapRouterMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapRouterMock {
    return super.attach(address) as SwapRouterMock;
  }
  override connect(signer: Signer): SwapRouterMock__factory {
    return super.connect(signer) as SwapRouterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapRouterMockInterface {
    return new utils.Interface(_abi) as SwapRouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapRouterMock {
    return new Contract(address, _abi, signerOrProvider) as SwapRouterMock;
  }
}
