/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../common';
import type {
  SwapRouterMock,
  SwapRouterMockInterface,
} from '../../../contracts/mocks/SwapRouterMock';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'path',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountIn',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOutMinimum',
            type: 'uint256',
          },
        ],
        internalType: 'struct ISwapRouter.ExactInputParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactInput',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'tokenIn',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'tokenOut',
            type: 'address',
          },
          {
            internalType: 'uint24',
            name: 'fee',
            type: 'uint24',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountIn',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOutMinimum',
            type: 'uint256',
          },
          {
            internalType: 'uint160',
            name: 'sqrtPriceLimitX96',
            type: 'uint160',
          },
        ],
        internalType: 'struct ISwapRouter.ExactInputSingleParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactInputSingle',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountOut',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes',
            name: 'path',
            type: 'bytes',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOut',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountInMaximum',
            type: 'uint256',
          },
        ],
        internalType: 'struct ISwapRouter.ExactOutputParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactOutput',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountIn',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'tokenIn',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'tokenOut',
            type: 'address',
          },
          {
            internalType: 'uint24',
            name: 'fee',
            type: 'uint24',
          },
          {
            internalType: 'address',
            name: 'recipient',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountOut',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amountInMaximum',
            type: 'uint256',
          },
          {
            internalType: 'uint160',
            name: 'sqrtPriceLimitX96',
            type: 'uint160',
          },
        ],
        internalType: 'struct ISwapRouter.ExactOutputSingleParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'exactOutputSingle',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountIn',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60808060405234610016576106d9908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c908163414bf3891461042457508063c04b8d59146102e4578063db3e2198146101eb5763f28c04981461005157600080fd5b346101e75761005f3661052e565b9161007461006d84806105e1565b3691610614565b93845160208096012061008561065b565b805190870120036101b8577382af49447d8a07e3bd95bd0d56f35241523fbab173ff970a61a04b1ca14834a43f5de4533ebddb5cc85b84516323b872dd60e01b8152338482019081523060208201526080880135604082018190529791908990829081906060010381896001600160a01b038098165af180156101ae57958095938a959360609361014099610191575b50895163a9059cbb60e01b815233968101968752930135602086015291968794859391849160400190565b0393165af19081156101865750610159575b5051908152f35b61017890843d861161017f575b6101708183610591565b8101906105c9565b5038610152565b503d610166565b8351903d90823e3d90fd5b6101a790883d8a1161017f576101708183610591565b5038610115565b87513d88823e3d90fd5b732f2a2543b76a4166549f7aab2e75bef0aefc5b0f73ff970a61a04b1ca14834a43f5de4533ebddb5cc86100bb565b5080fd5b50346101e7576101003660031901126101e7576001600160a01b039182610210610565565b169360c43593835180966323b872dd60e01b825260209788918187816102588c30338c85016040919493929460608201956001600160a01b0380921683521660208201520152565b03925af180156102da579287926102a69286956102bd575b5061027961057b565b875163a9059cbb60e01b81523393810193845260a435602085015296879492909116928492839160400190565b03925af19081156101865750610159575051908152f35b6102d390853d871161017f576101708183610591565b5038610270565b85513d86823e3d90fd5b50346101e7576102f33661052e565b9261030161006d85806105e1565b93845160208096012061031261065b565b805190870120036103f3577382af49447d8a07e3bd95bd0d56f35241523fbab19173ff970a61a04b1ca14834a43f5de4533ebddb5cc8915b84516323b872dd60e01b81523383820190815230602082015260608381013560408301528991839182910103818a6001600160a01b03809a165af180156103e95792608061014096938996938b966103cc575b50885163a9059cbb60e01b81523393810193845291013560208301819052989096879485939091849160400190565b6103e290873d891161017f576101708183610591565b503861039d565b86513d89823e3d90fd5b732f2a2543b76a4166549f7aab2e75bef0aefc5b0f9173ff970a61a04b1ca14834a43f5de4533ebddb5cc89161034a565b8483853461052b5761010036600319011261052b576001600160a01b03848161044b610565565b6323b872dd60e01b8352338789019081523060208281019190915260a43560408301529889939092169082908790829060600103925af18015610521579186916104d09493610504575b5061049e61057b565b855163a9059cbb60e01b81523397810197885260c4356020890181905297909586939092169183918691839160400190565b03925af190811561018657506104e7575051908152f35b6104fd90843d861161017f576101708183610591565b5083610152565b61051a90833d851161017f576101708183610591565b5087610495565b84513d85823e3d90fd5b80fd5b60031990602081830112610560576004359167ffffffffffffffff8311610560578260a0920301126105605760040190565b600080fd5b6004356001600160a01b03811681036105605790565b6024356001600160a01b03811681036105605790565b90601f8019910116810190811067ffffffffffffffff8211176105b357604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610560575180151581036105605790565b903590601e1981360301821215610560570180359067ffffffffffffffff82116105605760200191813603831361056057565b92919267ffffffffffffffff82116105b3576040519161063e601f8201601f191660200184610591565b829481845281830111610560578281602093846000960137010152565b6040517382af49447d8a07e3bd95bd0d56f35241523fbab160601b6020820152607d60ea1b60348201527fff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000006037820152602b81526060810167ffffffffffffffff8111828210176105b3576040529056fea164736f6c6343000812000a';

type SwapRouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapRouterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapRouterMock__factory extends ContractFactory {
  constructor(...args: SwapRouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapRouterMock> {
    return super.deploy(overrides || {}) as Promise<SwapRouterMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapRouterMock {
    return super.attach(address) as SwapRouterMock;
  }
  override connect(signer: Signer): SwapRouterMock__factory {
    return super.connect(signer) as SwapRouterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapRouterMockInterface {
    return new utils.Interface(_abi) as SwapRouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapRouterMock {
    return new Contract(address, _abi, signerOrProvider) as SwapRouterMock;
  }
}
