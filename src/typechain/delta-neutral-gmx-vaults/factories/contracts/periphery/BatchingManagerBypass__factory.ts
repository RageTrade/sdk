/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../common';
import type {
  BatchingManagerBypass,
  BatchingManagerBypassInterface,
} from '../../../contracts/periphery/BatchingManagerBypass';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'glpAmount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'receiver',
        type: 'address',
      },
    ],
    name: 'deposit',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC4626',
        name: '_juniorVault',
        type: 'address',
      },
    ],
    name: 'setJuniorVault',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC20',
        name: '_sGlp',
        type: 'address',
      },
    ],
    name: 'setSglp',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361040890816100618239f35b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c908482636e553f65146102c05750508063715018a6146102665780638da5cb5b14610240578063e57b635d1461017e578063ed30caa2146101325763f2fde38b1461006857600080fd5b3461012e57602036600319011261012e578135916001600160a01b039182841680940361012a5761009761036b565b83156100d857505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50503461017a57602036600319011261017a57356001600160a01b03811680910361017a5761015f61036b565b6bffffffffffffffffffffffff60a01b600254161760025580f35b5080fd5b503461012e57602036600319011261012e578135916001600160a01b039081841680940361012a5760446020926101b361036b565b856bffffffffffffffffffffffff60a01b60015416176001556002541691868551968794859363095ea7b360e01b855284015260001960248401525af19081156102375750610200575080f35b6020813d821161022f575b81610218602093836103c3565b8101031261017a57518015150361022c5780f35b80fd5b3d915061020b565b513d84823e3d90fd5b83823461017a578160031936011261017a576001600160a01b0360209254169051908152f35b833461022c578060031936011261022c5761027f61036b565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b9150923461017a578260031936011261017a576024356001600160a01b0380821680920361036757602093869360449385936002541691636e553f6560e01b855280359085015260248401525af191821561035d578392610326575b6020838351908152f35b9091506020813d8211610355575b81610341602093836103c3565b8101031261012e576020925051903861031c565b3d9150610334565b81513d85823e3d90fd5b8380fd5b6001600160a01b0360005416330361037f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff8211176103e557604052565b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000812000a';

type BatchingManagerBypassConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchingManagerBypassConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchingManagerBypass__factory extends ContractFactory {
  constructor(...args: BatchingManagerBypassConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BatchingManagerBypass> {
    return super.deploy(overrides || {}) as Promise<BatchingManagerBypass>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BatchingManagerBypass {
    return super.attach(address) as BatchingManagerBypass;
  }
  override connect(signer: Signer): BatchingManagerBypass__factory {
    return super.connect(signer) as BatchingManagerBypass__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchingManagerBypassInterface {
    return new utils.Interface(_abi) as BatchingManagerBypassInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchingManagerBypass {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BatchingManagerBypass;
  }
}
