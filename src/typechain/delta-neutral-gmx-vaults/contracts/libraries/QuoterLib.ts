/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface QuoterLibInterface extends utils.Interface {
  functions: {
    'quoteCombinedSwap(int256,int256,bytes,bytes)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'quoteCombinedSwap'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'quoteCombinedSwap',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: 'quoteCombinedSwap',
    data: BytesLike
  ): Result;

  events: {};
}

export interface QuoterLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuoterLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    quoteCombinedSwap(
      btcAmountInBtcSwap: PromiseOrValue<BigNumberish>,
      ethAmountInEthSwap: PromiseOrValue<BigNumberish>,
      btcSellPath: PromiseOrValue<BytesLike>,
      ethSellPath: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        usdcAmountInBtcSwap: BigNumber;
        usdcAmountInEthSwap: BigNumber;
      }
    >;
  };

  quoteCombinedSwap(
    btcAmountInBtcSwap: PromiseOrValue<BigNumberish>,
    ethAmountInEthSwap: PromiseOrValue<BigNumberish>,
    btcSellPath: PromiseOrValue<BytesLike>,
    ethSellPath: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      usdcAmountInBtcSwap: BigNumber;
      usdcAmountInEthSwap: BigNumber;
    }
  >;

  callStatic: {
    quoteCombinedSwap(
      btcAmountInBtcSwap: PromiseOrValue<BigNumberish>,
      ethAmountInEthSwap: PromiseOrValue<BigNumberish>,
      btcSellPath: PromiseOrValue<BytesLike>,
      ethSellPath: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        usdcAmountInBtcSwap: BigNumber;
        usdcAmountInEthSwap: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    quoteCombinedSwap(
      btcAmountInBtcSwap: PromiseOrValue<BigNumberish>,
      ethAmountInEthSwap: PromiseOrValue<BigNumberish>,
      btcSellPath: PromiseOrValue<BytesLike>,
      ethSellPath: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    quoteCombinedSwap(
      btcAmountInBtcSwap: PromiseOrValue<BigNumberish>,
      ethAmountInEthSwap: PromiseOrValue<BigNumberish>,
      btcSellPath: PromiseOrValue<BytesLike>,
      ethSellPath: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
