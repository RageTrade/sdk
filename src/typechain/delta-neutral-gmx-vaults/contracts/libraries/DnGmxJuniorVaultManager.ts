/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from '../../common';

export interface DnGmxJuniorVaultManagerInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | 'GlpSwapped'
      | 'ProtocolFeeAccrued'
      | 'RewardsHarvested'
      | 'TokenSwapped'
      | 'VaultState'
  ): EventFragment;
}

export namespace GlpSwappedEvent {
  export type InputTuple = [
    glpQuantity: BigNumberish,
    usdcQuantity: BigNumberish,
    fromGlpToUsdc: boolean
  ];
  export type OutputTuple = [
    glpQuantity: bigint,
    usdcQuantity: bigint,
    fromGlpToUsdc: boolean
  ];
  export interface OutputObject {
    glpQuantity: bigint;
    usdcQuantity: bigint;
    fromGlpToUsdc: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeeAccruedEvent {
  export type InputTuple = [fees: BigNumberish];
  export type OutputTuple = [fees: bigint];
  export interface OutputObject {
    fees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsHarvestedEvent {
  export type InputTuple = [
    wethHarvested: BigNumberish,
    esGmxStaked: BigNumberish,
    juniorVaultWeth: BigNumberish,
    seniorVaultWeth: BigNumberish,
    juniorVaultGlp: BigNumberish,
    seniorVaultAUsdc: BigNumberish
  ];
  export type OutputTuple = [
    wethHarvested: bigint,
    esGmxStaked: bigint,
    juniorVaultWeth: bigint,
    seniorVaultWeth: bigint,
    juniorVaultGlp: bigint,
    seniorVaultAUsdc: bigint
  ];
  export interface OutputObject {
    wethHarvested: bigint;
    esGmxStaked: bigint;
    juniorVaultWeth: bigint;
    seniorVaultWeth: bigint;
    juniorVaultGlp: bigint;
    seniorVaultAUsdc: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSwappedEvent {
  export type InputTuple = [
    fromToken: AddressLike,
    toToken: AddressLike,
    fromQuantity: BigNumberish,
    toQuantity: BigNumberish
  ];
  export type OutputTuple = [
    fromToken: string,
    toToken: string,
    fromQuantity: bigint,
    toQuantity: bigint
  ];
  export interface OutputObject {
    fromToken: string;
    toToken: string;
    fromQuantity: bigint;
    toQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultStateEvent {
  export type InputTuple = [
    eventType: BigNumberish,
    btcBorrows: BigNumberish,
    ethBorrows: BigNumberish,
    glpPrice: BigNumberish,
    glpBalance: BigNumberish,
    totalAssets: BigNumberish,
    dnUsdcDeposited: BigNumberish,
    unhedgedGlpInUsdc: BigNumberish,
    juniorVaultAusdc: BigNumberish,
    seniorVaultAusdc: BigNumberish
  ];
  export type OutputTuple = [
    eventType: bigint,
    btcBorrows: bigint,
    ethBorrows: bigint,
    glpPrice: bigint,
    glpBalance: bigint,
    totalAssets: bigint,
    dnUsdcDeposited: bigint,
    unhedgedGlpInUsdc: bigint,
    juniorVaultAusdc: bigint,
    seniorVaultAusdc: bigint
  ];
  export interface OutputObject {
    eventType: bigint;
    btcBorrows: bigint;
    ethBorrows: bigint;
    glpPrice: bigint;
    glpBalance: bigint;
    totalAssets: bigint;
    dnUsdcDeposited: bigint;
    unhedgedGlpInUsdc: bigint;
    juniorVaultAusdc: bigint;
    seniorVaultAusdc: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DnGmxJuniorVaultManager extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: DnGmxJuniorVaultManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: 'GlpSwapped'
  ): TypedContractEvent<
    GlpSwappedEvent.InputTuple,
    GlpSwappedEvent.OutputTuple,
    GlpSwappedEvent.OutputObject
  >;
  getEvent(
    key: 'ProtocolFeeAccrued'
  ): TypedContractEvent<
    ProtocolFeeAccruedEvent.InputTuple,
    ProtocolFeeAccruedEvent.OutputTuple,
    ProtocolFeeAccruedEvent.OutputObject
  >;
  getEvent(
    key: 'RewardsHarvested'
  ): TypedContractEvent<
    RewardsHarvestedEvent.InputTuple,
    RewardsHarvestedEvent.OutputTuple,
    RewardsHarvestedEvent.OutputObject
  >;
  getEvent(
    key: 'TokenSwapped'
  ): TypedContractEvent<
    TokenSwappedEvent.InputTuple,
    TokenSwappedEvent.OutputTuple,
    TokenSwappedEvent.OutputObject
  >;
  getEvent(
    key: 'VaultState'
  ): TypedContractEvent<
    VaultStateEvent.InputTuple,
    VaultStateEvent.OutputTuple,
    VaultStateEvent.OutputObject
  >;

  filters: {
    'GlpSwapped(uint256,uint256,bool)': TypedContractEvent<
      GlpSwappedEvent.InputTuple,
      GlpSwappedEvent.OutputTuple,
      GlpSwappedEvent.OutputObject
    >;
    GlpSwapped: TypedContractEvent<
      GlpSwappedEvent.InputTuple,
      GlpSwappedEvent.OutputTuple,
      GlpSwappedEvent.OutputObject
    >;

    'ProtocolFeeAccrued(uint256)': TypedContractEvent<
      ProtocolFeeAccruedEvent.InputTuple,
      ProtocolFeeAccruedEvent.OutputTuple,
      ProtocolFeeAccruedEvent.OutputObject
    >;
    ProtocolFeeAccrued: TypedContractEvent<
      ProtocolFeeAccruedEvent.InputTuple,
      ProtocolFeeAccruedEvent.OutputTuple,
      ProtocolFeeAccruedEvent.OutputObject
    >;

    'RewardsHarvested(uint256,uint256,uint256,uint256,uint256,uint256)': TypedContractEvent<
      RewardsHarvestedEvent.InputTuple,
      RewardsHarvestedEvent.OutputTuple,
      RewardsHarvestedEvent.OutputObject
    >;
    RewardsHarvested: TypedContractEvent<
      RewardsHarvestedEvent.InputTuple,
      RewardsHarvestedEvent.OutputTuple,
      RewardsHarvestedEvent.OutputObject
    >;

    'TokenSwapped(address,address,uint256,uint256)': TypedContractEvent<
      TokenSwappedEvent.InputTuple,
      TokenSwappedEvent.OutputTuple,
      TokenSwappedEvent.OutputObject
    >;
    TokenSwapped: TypedContractEvent<
      TokenSwappedEvent.InputTuple,
      TokenSwappedEvent.OutputTuple,
      TokenSwappedEvent.OutputObject
    >;

    'VaultState(uint256,uint256,uint256,uint256,uint256,uint256,int256,uint256,uint256,uint256)': TypedContractEvent<
      VaultStateEvent.InputTuple,
      VaultStateEvent.OutputTuple,
      VaultStateEvent.OutputObject
    >;
    VaultState: TypedContractEvent<
      VaultStateEvent.InputTuple,
      VaultStateEvent.OutputTuple,
      VaultStateEvent.OutputObject
    >;
  };
}
