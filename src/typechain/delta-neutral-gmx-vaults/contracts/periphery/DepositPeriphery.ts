/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export interface DepositPeripheryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'depositToken'
      | 'owner'
      | 'renounceOwnership'
      | 'setAddresses'
      | 'setSlippageThreshold'
      | 'slippageThreshold'
      | 'transferOwnership'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'AddressesUpdated'
      | 'OwnershipTransferred'
      | 'SlippageThresholdUpdated'
      | 'TokenDeposited'
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'depositToken',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setAddresses',
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setSlippageThreshold',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'slippageThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: 'depositToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAddresses',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSlippageThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'slippageThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
}

export namespace AddressesUpdatedEvent {
  export type InputTuple = [
    juniorVault: AddressLike,
    rewardRouter: AddressLike
  ];
  export type OutputTuple = [juniorVault: string, rewardRouter: string];
  export interface OutputObject {
    juniorVault: string;
    rewardRouter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlippageThresholdUpdatedEvent {
  export type InputTuple = [newSlippageThreshold: BigNumberish];
  export type OutputTuple = [newSlippageThreshold: bigint];
  export interface OutputObject {
    newSlippageThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDepositedEvent {
  export type InputTuple = [
    from: AddressLike,
    receiver: AddressLike,
    token: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish,
    tokensSpent: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    receiver: string,
    token: string,
    assets: bigint,
    shares: bigint,
    tokensSpent: bigint
  ];
  export interface OutputObject {
    from: string;
    receiver: string;
    token: string;
    assets: bigint;
    shares: bigint;
    tokensSpent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DepositPeriphery extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: DepositPeripheryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositToken: TypedContractMethod<
    [token: AddressLike, receiver: AddressLike, tokenAmount: BigNumberish],
    [bigint],
    'nonpayable'
  >;

  owner: TypedContractMethod<[], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  setAddresses: TypedContractMethod<
    [
      _dnGmxJuniorVault: AddressLike,
      _rewardRouter: AddressLike,
      _glpManager: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  setSlippageThreshold: TypedContractMethod<
    [_slippageThreshold: BigNumberish],
    [void],
    'nonpayable'
  >;

  slippageThreshold: TypedContractMethod<[], [bigint], 'view'>;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'depositToken'
  ): TypedContractMethod<
    [token: AddressLike, receiver: AddressLike, tokenAmount: BigNumberish],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'owner'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'renounceOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setAddresses'
  ): TypedContractMethod<
    [
      _dnGmxJuniorVault: AddressLike,
      _rewardRouter: AddressLike,
      _glpManager: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setSlippageThreshold'
  ): TypedContractMethod<
    [_slippageThreshold: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'slippageThreshold'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  getEvent(
    key: 'AddressesUpdated'
  ): TypedContractEvent<
    AddressesUpdatedEvent.InputTuple,
    AddressesUpdatedEvent.OutputTuple,
    AddressesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'SlippageThresholdUpdated'
  ): TypedContractEvent<
    SlippageThresholdUpdatedEvent.InputTuple,
    SlippageThresholdUpdatedEvent.OutputTuple,
    SlippageThresholdUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'TokenDeposited'
  ): TypedContractEvent<
    TokenDepositedEvent.InputTuple,
    TokenDepositedEvent.OutputTuple,
    TokenDepositedEvent.OutputObject
  >;

  filters: {
    'AddressesUpdated(address,address)': TypedContractEvent<
      AddressesUpdatedEvent.InputTuple,
      AddressesUpdatedEvent.OutputTuple,
      AddressesUpdatedEvent.OutputObject
    >;
    AddressesUpdated: TypedContractEvent<
      AddressesUpdatedEvent.InputTuple,
      AddressesUpdatedEvent.OutputTuple,
      AddressesUpdatedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'SlippageThresholdUpdated(uint256)': TypedContractEvent<
      SlippageThresholdUpdatedEvent.InputTuple,
      SlippageThresholdUpdatedEvent.OutputTuple,
      SlippageThresholdUpdatedEvent.OutputObject
    >;
    SlippageThresholdUpdated: TypedContractEvent<
      SlippageThresholdUpdatedEvent.InputTuple,
      SlippageThresholdUpdatedEvent.OutputTuple,
      SlippageThresholdUpdatedEvent.OutputObject
    >;

    'TokenDeposited(address,address,address,uint256,uint256,uint256)': TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;
    TokenDeposited: TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;
  };
}
