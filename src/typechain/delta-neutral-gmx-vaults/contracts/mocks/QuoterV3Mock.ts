/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface QuoterV3MockInterface extends utils.Interface {
  functions: {
    'USDC_TO_WBTC()': FunctionFragment;
    'USDC_TO_WETH()': FunctionFragment;
    'USDC_TO_WETH_()': FunctionFragment;
    'WBTC_TO_USDC()': FunctionFragment;
    'WETH_TO_USDC()': FunctionFragment;
    'quoteExactInput(bytes,uint256)': FunctionFragment;
    'quoteExactOutput(bytes,uint256)': FunctionFragment;
    'setSlippages(uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'USDC_TO_WBTC'
      | 'USDC_TO_WETH'
      | 'USDC_TO_WETH_'
      | 'WBTC_TO_USDC'
      | 'WETH_TO_USDC'
      | 'quoteExactInput'
      | 'quoteExactOutput'
      | 'setSlippages'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'USDC_TO_WBTC',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'USDC_TO_WETH',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'USDC_TO_WETH_',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'WBTC_TO_USDC',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'WETH_TO_USDC',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteExactInput',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteExactOutput',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setSlippages',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: 'USDC_TO_WBTC',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'USDC_TO_WETH',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'USDC_TO_WETH_',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'WBTC_TO_USDC',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'WETH_TO_USDC',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteExactInput',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteExactOutput',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSlippages',
    data: BytesLike
  ): Result;

  events: {};
}

export interface QuoterV3Mock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuoterV3MockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    USDC_TO_WBTC(overrides?: CallOverrides): Promise<[string]>;

    USDC_TO_WETH(overrides?: CallOverrides): Promise<[string]>;

    USDC_TO_WETH_(overrides?: CallOverrides): Promise<[string]>;

    WBTC_TO_USDC(overrides?: CallOverrides): Promise<[string]>;

    WETH_TO_USDC(overrides?: CallOverrides): Promise<[string]>;

    quoteExactInput(
      path: PromiseOrValue<BytesLike>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    quoteExactOutput(
      path: PromiseOrValue<BytesLike>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    setSlippages(
      _slippageThresholdSwapBtcBps: PromiseOrValue<BigNumberish>,
      _slippageThresholdSwapEthBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  USDC_TO_WBTC(overrides?: CallOverrides): Promise<string>;

  USDC_TO_WETH(overrides?: CallOverrides): Promise<string>;

  USDC_TO_WETH_(overrides?: CallOverrides): Promise<string>;

  WBTC_TO_USDC(overrides?: CallOverrides): Promise<string>;

  WETH_TO_USDC(overrides?: CallOverrides): Promise<string>;

  quoteExactInput(
    path: PromiseOrValue<BytesLike>,
    amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteExactOutput(
    path: PromiseOrValue<BytesLike>,
    amountOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setSlippages(
    _slippageThresholdSwapBtcBps: PromiseOrValue<BigNumberish>,
    _slippageThresholdSwapEthBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    USDC_TO_WBTC(overrides?: CallOverrides): Promise<string>;

    USDC_TO_WETH(overrides?: CallOverrides): Promise<string>;

    USDC_TO_WETH_(overrides?: CallOverrides): Promise<string>;

    WBTC_TO_USDC(overrides?: CallOverrides): Promise<string>;

    WETH_TO_USDC(overrides?: CallOverrides): Promise<string>;

    quoteExactInput(
      path: PromiseOrValue<BytesLike>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteExactOutput(
      path: PromiseOrValue<BytesLike>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSlippages(
      _slippageThresholdSwapBtcBps: PromiseOrValue<BigNumberish>,
      _slippageThresholdSwapEthBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    USDC_TO_WBTC(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_TO_WETH(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_TO_WETH_(overrides?: CallOverrides): Promise<BigNumber>;

    WBTC_TO_USDC(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_TO_USDC(overrides?: CallOverrides): Promise<BigNumber>;

    quoteExactInput(
      path: PromiseOrValue<BytesLike>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteExactOutput(
      path: PromiseOrValue<BytesLike>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSlippages(
      _slippageThresholdSwapBtcBps: PromiseOrValue<BigNumberish>,
      _slippageThresholdSwapEthBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    USDC_TO_WBTC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC_TO_WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC_TO_WETH_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WBTC_TO_USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_TO_USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteExactInput(
      path: PromiseOrValue<BytesLike>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteExactOutput(
      path: PromiseOrValue<BytesLike>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSlippages(
      _slippageThresholdSwapBtcBps: PromiseOrValue<BigNumberish>,
      _slippageThresholdSwapEthBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
