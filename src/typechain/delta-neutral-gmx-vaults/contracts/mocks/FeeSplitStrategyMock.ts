/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export declare namespace FeeSplitStrategy {
  export type InfoStruct = {
    optimalUtilizationRate: BigNumberish;
    baseVariableBorrowRate: BigNumberish;
    variableRateSlope1: BigNumberish;
    variableRateSlope2: BigNumberish;
  };

  export type InfoStructOutput = [
    optimalUtilizationRate: bigint,
    baseVariableBorrowRate: bigint,
    variableRateSlope1: bigint,
    variableRateSlope2: bigint
  ] & {
    optimalUtilizationRate: bigint;
    baseVariableBorrowRate: bigint;
    variableRateSlope1: bigint;
    variableRateSlope2: bigint;
  };
}

export interface FeeSplitStrategyMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'calculateFeeSplit'
      | 'getMaxVariableBorrowRate'
      | 'info'
      | 'setFeeSplitStrategy'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'calculateFeeSplit',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMaxVariableBorrowRate',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'info', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setFeeSplitStrategy',
    values: [FeeSplitStrategy.InfoStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: 'calculateFeeSplit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMaxVariableBorrowRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'info', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setFeeSplitStrategy',
    data: BytesLike
  ): Result;
}

export interface FeeSplitStrategyMock extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: FeeSplitStrategyMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateFeeSplit: TypedContractMethod<
    [availableLiquidity: BigNumberish, usedLiquidity: BigNumberish],
    [bigint],
    'view'
  >;

  getMaxVariableBorrowRate: TypedContractMethod<[], [bigint], 'view'>;

  info: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        optimalUtilizationRate: bigint;
        baseVariableBorrowRate: bigint;
        variableRateSlope1: bigint;
        variableRateSlope2: bigint;
      }
    ],
    'view'
  >;

  setFeeSplitStrategy: TypedContractMethod<
    [_info: FeeSplitStrategy.InfoStruct],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'calculateFeeSplit'
  ): TypedContractMethod<
    [availableLiquidity: BigNumberish, usedLiquidity: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getMaxVariableBorrowRate'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'info'): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        optimalUtilizationRate: bigint;
        baseVariableBorrowRate: bigint;
        variableRateSlope1: bigint;
        variableRateSlope2: bigint;
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'setFeeSplitStrategy'
  ): TypedContractMethod<
    [_info: FeeSplitStrategy.InfoStruct],
    [void],
    'nonpayable'
  >;

  filters: {};
}
