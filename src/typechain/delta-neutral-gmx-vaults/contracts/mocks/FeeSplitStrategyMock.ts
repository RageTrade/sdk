/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export declare namespace FeeSplitStrategy {
  export type InfoStruct = {
    optimalUtilizationRate: PromiseOrValue<BigNumberish>;
    baseVariableBorrowRate: PromiseOrValue<BigNumberish>;
    variableRateSlope1: PromiseOrValue<BigNumberish>;
    variableRateSlope2: PromiseOrValue<BigNumberish>;
  };

  export type InfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    optimalUtilizationRate: BigNumber;
    baseVariableBorrowRate: BigNumber;
    variableRateSlope1: BigNumber;
    variableRateSlope2: BigNumber;
  };
}

export interface FeeSplitStrategyMockInterface extends utils.Interface {
  functions: {
    'calculateFeeSplit(uint256,uint256)': FunctionFragment;
    'getMaxVariableBorrowRate()': FunctionFragment;
    'info()': FunctionFragment;
    'setFeeSplitStrategy((uint128,uint128,uint128,uint128))': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'calculateFeeSplit'
      | 'getMaxVariableBorrowRate'
      | 'info'
      | 'setFeeSplitStrategy'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'calculateFeeSplit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMaxVariableBorrowRate',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'info', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setFeeSplitStrategy',
    values: [FeeSplitStrategy.InfoStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: 'calculateFeeSplit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMaxVariableBorrowRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'info', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setFeeSplitStrategy',
    data: BytesLike
  ): Result;

  events: {};
}

export interface FeeSplitStrategyMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeSplitStrategyMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateFeeSplit(
      availableLiquidity: PromiseOrValue<BigNumberish>,
      usedLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeSplitRate: BigNumber }>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    info(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        optimalUtilizationRate: BigNumber;
        baseVariableBorrowRate: BigNumber;
        variableRateSlope1: BigNumber;
        variableRateSlope2: BigNumber;
      }
    >;

    setFeeSplitStrategy(
      _info: FeeSplitStrategy.InfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculateFeeSplit(
    availableLiquidity: PromiseOrValue<BigNumberish>,
    usedLiquidity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  info(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      optimalUtilizationRate: BigNumber;
      baseVariableBorrowRate: BigNumber;
      variableRateSlope1: BigNumber;
      variableRateSlope2: BigNumber;
    }
  >;

  setFeeSplitStrategy(
    _info: FeeSplitStrategy.InfoStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateFeeSplit(
      availableLiquidity: PromiseOrValue<BigNumberish>,
      usedLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        optimalUtilizationRate: BigNumber;
        baseVariableBorrowRate: BigNumber;
        variableRateSlope1: BigNumber;
        variableRateSlope2: BigNumber;
      }
    >;

    setFeeSplitStrategy(
      _info: FeeSplitStrategy.InfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calculateFeeSplit(
      availableLiquidity: PromiseOrValue<BigNumberish>,
      usedLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeSplitStrategy(
      _info: FeeSplitStrategy.InfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateFeeSplit(
      availableLiquidity: PromiseOrValue<BigNumberish>,
      usedLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeSplitStrategy(
      _info: FeeSplitStrategy.InfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
