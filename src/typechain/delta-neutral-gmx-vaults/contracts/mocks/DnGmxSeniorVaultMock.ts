/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export declare namespace FeeSplitStrategy {
  export type InfoStruct = {
    optimalUtilizationRate: BigNumberish;
    baseVariableBorrowRate: BigNumberish;
    variableRateSlope1: BigNumberish;
    variableRateSlope2: BigNumberish;
  };

  export type InfoStructOutput = [
    optimalUtilizationRate: bigint,
    baseVariableBorrowRate: bigint,
    variableRateSlope1: bigint,
    variableRateSlope2: bigint
  ] & {
    optimalUtilizationRate: bigint;
    baseVariableBorrowRate: bigint;
    variableRateSlope1: bigint;
    variableRateSlope2: bigint;
  };
}

export interface DnGmxSeniorVaultMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | '_afterDeposit'
      | '_beforeWithdraw'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'availableBorrow'
      | 'balanceOf'
      | 'borrow'
      | 'borrowCaps'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositCap'
      | 'dnGmxJuniorVault'
      | 'feeStrategy'
      | 'getEthRewardsSplitRate'
      | 'getPriceX128'
      | 'getVaultMarketValue'
      | 'grantAllowances'
      | 'increaseAllowance'
      | 'initialize'
      | 'leveragePool'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxUtilizationBps'
      | 'maxWithdraw'
      | 'mint'
      | 'name'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'redeem'
      | 'renounceOwnership'
      | 'repay'
      | 'setDepositCap'
      | 'setDnGmxJuniorVault'
      | 'setLeveragePool'
      | 'setMaxUtilizationBps'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'totalUsdcBorrowed'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'unpause'
      | 'updateBorrowCap'
      | 'updateFeeStrategyParams'
      | 'withdraw'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'AllowancesGranted'
      | 'Approval'
      | 'BorrowCapUpdated'
      | 'Deposit'
      | 'DepositCapUpdated'
      | 'DnGmxJuniorVaultUpdated'
      | 'FeeStrategyUpdated'
      | 'Initialized'
      | 'LeveragePoolUpdated'
      | 'MaxUtilizationBpsUpdated'
      | 'OwnershipTransferred'
      | 'Paused'
      | 'Transfer'
      | 'Unpaused'
      | 'VaultState'
      | 'Withdraw'
  ): EventFragment;

  encodeFunctionData(
    functionFragment: '_afterDeposit',
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: '_beforeWithdraw',
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'availableBorrow',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'borrowCaps',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCap',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'dnGmxJuniorVault',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'feeStrategy',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getEthRewardsSplitRate',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getPriceX128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultMarketValue',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'grantAllowances',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike, string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'leveragePool',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'maxDeposit',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxMint',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxRedeem',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxUtilizationBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'maxWithdraw',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'repay', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'setDepositCap',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setDnGmxJuniorVault',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setLeveragePool',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxUtilizationBps',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalUsdcBorrowed',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateBorrowCap',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateFeeStrategyParams',
    values: [FeeSplitStrategy.InfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: '_afterDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: '_beforeWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'availableBorrow',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowCaps', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'dnGmxJuniorVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeStrategy',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEthRewardsSplitRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVaultMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'grantAllowances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'leveragePool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxUtilizationBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewRedeem',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setDepositCap',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDnGmxJuniorVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setLeveragePool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMaxUtilizationBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalUsdcBorrowed',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateBorrowCap',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateFeeStrategyParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
}

export namespace AllowancesGrantedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowCapUpdatedEvent {
  export type InputTuple = [vault: AddressLike, newCap: BigNumberish];
  export type OutputTuple = [vault: string, newCap: bigint];
  export interface OutputObject {
    vault: string;
    newCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositCapUpdatedEvent {
  export type InputTuple = [_newDepositCap: BigNumberish];
  export type OutputTuple = [_newDepositCap: bigint];
  export interface OutputObject {
    _newDepositCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DnGmxJuniorVaultUpdatedEvent {
  export type InputTuple = [dnGmxJuniorVault: AddressLike];
  export type OutputTuple = [dnGmxJuniorVault: string];
  export interface OutputObject {
    dnGmxJuniorVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeStrategyUpdatedEvent {
  export type InputTuple = [
    optimalUtilizationRate: BigNumberish,
    baseVariableBorrowRate: BigNumberish,
    variableRateSlope1: BigNumberish,
    variableRateSlope2: BigNumberish
  ];
  export type OutputTuple = [
    optimalUtilizationRate: bigint,
    baseVariableBorrowRate: bigint,
    variableRateSlope1: bigint,
    variableRateSlope2: bigint
  ];
  export interface OutputObject {
    optimalUtilizationRate: bigint;
    baseVariableBorrowRate: bigint;
    variableRateSlope1: bigint;
    variableRateSlope2: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeveragePoolUpdatedEvent {
  export type InputTuple = [leveragePool: AddressLike];
  export type OutputTuple = [leveragePool: string];
  export interface OutputObject {
    leveragePool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxUtilizationBpsUpdatedEvent {
  export type InputTuple = [maxUtilizationBps: BigNumberish];
  export type OutputTuple = [maxUtilizationBps: bigint];
  export interface OutputObject {
    maxUtilizationBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultStateEvent {
  export type InputTuple = [
    eventType: BigNumberish,
    juniorVaultAusdc: BigNumberish,
    seniorVaultAusdc: BigNumberish
  ];
  export type OutputTuple = [
    eventType: bigint,
    juniorVaultAusdc: bigint,
    seniorVaultAusdc: bigint
  ];
  export interface OutputObject {
    eventType: bigint;
    juniorVaultAusdc: bigint;
    seniorVaultAusdc: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DnGmxSeniorVaultMock extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: DnGmxSeniorVaultMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _afterDeposit: TypedContractMethod<
    [assets: BigNumberish, shares: BigNumberish, receiver: AddressLike],
    [void],
    'nonpayable'
  >;

  _beforeWithdraw: TypedContractMethod<
    [assets: BigNumberish, shares: BigNumberish, receiver: AddressLike],
    [void],
    'nonpayable'
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    'view'
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  asset: TypedContractMethod<[], [string], 'view'>;

  availableBorrow: TypedContractMethod<
    [borrower: AddressLike],
    [bigint],
    'view'
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], 'view'>;

  borrow: TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;

  borrowCaps: TypedContractMethod<[borrower: AddressLike], [bigint], 'view'>;

  convertToAssets: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    'view'
  >;

  convertToShares: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    'view'
  >;

  decimals: TypedContractMethod<[], [bigint], 'view'>;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  deposit: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;

  depositCap: TypedContractMethod<[], [bigint], 'view'>;

  dnGmxJuniorVault: TypedContractMethod<[], [string], 'view'>;

  feeStrategy: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        optimalUtilizationRate: bigint;
        baseVariableBorrowRate: bigint;
        variableRateSlope1: bigint;
        variableRateSlope2: bigint;
      }
    ],
    'view'
  >;

  getEthRewardsSplitRate: TypedContractMethod<[], [bigint], 'view'>;

  getPriceX128: TypedContractMethod<[], [bigint], 'view'>;

  getVaultMarketValue: TypedContractMethod<[], [bigint], 'view'>;

  grantAllowances: TypedContractMethod<[], [void], 'nonpayable'>;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  initialize: TypedContractMethod<
    [
      _usdc: AddressLike,
      _name: string,
      _symbol: string,
      _poolAddressesProvider: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  leveragePool: TypedContractMethod<[], [string], 'view'>;

  maxDeposit: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;

  maxMint: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;

  maxRedeem: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  maxUtilizationBps: TypedContractMethod<[], [bigint], 'view'>;

  maxWithdraw: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  mint: TypedContractMethod<
    [shares: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;

  name: TypedContractMethod<[], [string], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  pause: TypedContractMethod<[], [void], 'nonpayable'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  previewDeposit: TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;

  previewMint: TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;

  previewRedeem: TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;

  previewWithdraw: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    'view'
  >;

  redeem: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    'nonpayable'
  >;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  repay: TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;

  setDepositCap: TypedContractMethod<
    [_newDepositCap: BigNumberish],
    [void],
    'nonpayable'
  >;

  setDnGmxJuniorVault: TypedContractMethod<
    [_dnGmxJuniorVault: AddressLike],
    [void],
    'nonpayable'
  >;

  setLeveragePool: TypedContractMethod<
    [_leveragePool: AddressLike],
    [void],
    'nonpayable'
  >;

  setMaxUtilizationBps: TypedContractMethod<
    [_maxUtilizationBps: BigNumberish],
    [void],
    'nonpayable'
  >;

  symbol: TypedContractMethod<[], [string], 'view'>;

  totalAssets: TypedContractMethod<[], [bigint], 'view'>;

  totalSupply: TypedContractMethod<[], [bigint], 'view'>;

  totalUsdcBorrowed: TypedContractMethod<[], [bigint], 'view'>;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  unpause: TypedContractMethod<[], [void], 'nonpayable'>;

  updateBorrowCap: TypedContractMethod<
    [borrowerAddress: AddressLike, cap: BigNumberish],
    [void],
    'nonpayable'
  >;

  updateFeeStrategyParams: TypedContractMethod<
    [_feeStrategy: FeeSplitStrategy.InfoStruct],
    [void],
    'nonpayable'
  >;

  withdraw: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: '_afterDeposit'
  ): TypedContractMethod<
    [assets: BigNumberish, shares: BigNumberish, receiver: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: '_beforeWithdraw'
  ): TypedContractMethod<
    [assets: BigNumberish, shares: BigNumberish, receiver: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'allowance'
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'approve'
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'asset'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'availableBorrow'
  ): TypedContractMethod<[borrower: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'balanceOf'
  ): TypedContractMethod<[account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'borrow'
  ): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'borrowCaps'
  ): TypedContractMethod<[borrower: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'convertToAssets'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'convertToShares'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'decimals'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'decreaseAllowance'
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'deposit'
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'depositCap'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'dnGmxJuniorVault'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'feeStrategy'): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        optimalUtilizationRate: bigint;
        baseVariableBorrowRate: bigint;
        variableRateSlope1: bigint;
        variableRateSlope2: bigint;
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getEthRewardsSplitRate'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getPriceX128'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getVaultMarketValue'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'grantAllowances'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'increaseAllowance'
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [
      _usdc: AddressLike,
      _name: string,
      _symbol: string,
      _poolAddressesProvider: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'leveragePool'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'maxDeposit'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxMint'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxRedeem'
  ): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxUtilizationBps'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxWithdraw'
  ): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'mint'
  ): TypedContractMethod<
    [shares: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'name'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'owner'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pause'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'paused'
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'previewDeposit'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewMint'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewRedeem'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewWithdraw'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'redeem'
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'renounceOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'repay'
  ): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setDepositCap'
  ): TypedContractMethod<[_newDepositCap: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setDnGmxJuniorVault'
  ): TypedContractMethod<
    [_dnGmxJuniorVault: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setLeveragePool'
  ): TypedContractMethod<[_leveragePool: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setMaxUtilizationBps'
  ): TypedContractMethod<
    [_maxUtilizationBps: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'symbol'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'totalAssets'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'totalSupply'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'totalUsdcBorrowed'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transfer'
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferFrom'
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unpause'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateBorrowCap'
  ): TypedContractMethod<
    [borrowerAddress: AddressLike, cap: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'updateFeeStrategyParams'
  ): TypedContractMethod<
    [_feeStrategy: FeeSplitStrategy.InfoStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'withdraw'
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    'nonpayable'
  >;

  getEvent(
    key: 'AllowancesGranted'
  ): TypedContractEvent<
    AllowancesGrantedEvent.InputTuple,
    AllowancesGrantedEvent.OutputTuple,
    AllowancesGrantedEvent.OutputObject
  >;
  getEvent(
    key: 'Approval'
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: 'BorrowCapUpdated'
  ): TypedContractEvent<
    BorrowCapUpdatedEvent.InputTuple,
    BorrowCapUpdatedEvent.OutputTuple,
    BorrowCapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Deposit'
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: 'DepositCapUpdated'
  ): TypedContractEvent<
    DepositCapUpdatedEvent.InputTuple,
    DepositCapUpdatedEvent.OutputTuple,
    DepositCapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'DnGmxJuniorVaultUpdated'
  ): TypedContractEvent<
    DnGmxJuniorVaultUpdatedEvent.InputTuple,
    DnGmxJuniorVaultUpdatedEvent.OutputTuple,
    DnGmxJuniorVaultUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'FeeStrategyUpdated'
  ): TypedContractEvent<
    FeeStrategyUpdatedEvent.InputTuple,
    FeeStrategyUpdatedEvent.OutputTuple,
    FeeStrategyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Initialized'
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'LeveragePoolUpdated'
  ): TypedContractEvent<
    LeveragePoolUpdatedEvent.InputTuple,
    LeveragePoolUpdatedEvent.OutputTuple,
    LeveragePoolUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'MaxUtilizationBpsUpdated'
  ): TypedContractEvent<
    MaxUtilizationBpsUpdatedEvent.InputTuple,
    MaxUtilizationBpsUpdatedEvent.OutputTuple,
    MaxUtilizationBpsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Paused'
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: 'Transfer'
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: 'Unpaused'
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: 'VaultState'
  ): TypedContractEvent<
    VaultStateEvent.InputTuple,
    VaultStateEvent.OutputTuple,
    VaultStateEvent.OutputObject
  >;
  getEvent(
    key: 'Withdraw'
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    'AllowancesGranted()': TypedContractEvent<
      AllowancesGrantedEvent.InputTuple,
      AllowancesGrantedEvent.OutputTuple,
      AllowancesGrantedEvent.OutputObject
    >;
    AllowancesGranted: TypedContractEvent<
      AllowancesGrantedEvent.InputTuple,
      AllowancesGrantedEvent.OutputTuple,
      AllowancesGrantedEvent.OutputObject
    >;

    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    'BorrowCapUpdated(address,uint256)': TypedContractEvent<
      BorrowCapUpdatedEvent.InputTuple,
      BorrowCapUpdatedEvent.OutputTuple,
      BorrowCapUpdatedEvent.OutputObject
    >;
    BorrowCapUpdated: TypedContractEvent<
      BorrowCapUpdatedEvent.InputTuple,
      BorrowCapUpdatedEvent.OutputTuple,
      BorrowCapUpdatedEvent.OutputObject
    >;

    'Deposit(address,address,uint256,uint256)': TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    'DepositCapUpdated(uint256)': TypedContractEvent<
      DepositCapUpdatedEvent.InputTuple,
      DepositCapUpdatedEvent.OutputTuple,
      DepositCapUpdatedEvent.OutputObject
    >;
    DepositCapUpdated: TypedContractEvent<
      DepositCapUpdatedEvent.InputTuple,
      DepositCapUpdatedEvent.OutputTuple,
      DepositCapUpdatedEvent.OutputObject
    >;

    'DnGmxJuniorVaultUpdated(address)': TypedContractEvent<
      DnGmxJuniorVaultUpdatedEvent.InputTuple,
      DnGmxJuniorVaultUpdatedEvent.OutputTuple,
      DnGmxJuniorVaultUpdatedEvent.OutputObject
    >;
    DnGmxJuniorVaultUpdated: TypedContractEvent<
      DnGmxJuniorVaultUpdatedEvent.InputTuple,
      DnGmxJuniorVaultUpdatedEvent.OutputTuple,
      DnGmxJuniorVaultUpdatedEvent.OutputObject
    >;

    'FeeStrategyUpdated(uint128,uint128,uint128,uint128)': TypedContractEvent<
      FeeStrategyUpdatedEvent.InputTuple,
      FeeStrategyUpdatedEvent.OutputTuple,
      FeeStrategyUpdatedEvent.OutputObject
    >;
    FeeStrategyUpdated: TypedContractEvent<
      FeeStrategyUpdatedEvent.InputTuple,
      FeeStrategyUpdatedEvent.OutputTuple,
      FeeStrategyUpdatedEvent.OutputObject
    >;

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'LeveragePoolUpdated(address)': TypedContractEvent<
      LeveragePoolUpdatedEvent.InputTuple,
      LeveragePoolUpdatedEvent.OutputTuple,
      LeveragePoolUpdatedEvent.OutputObject
    >;
    LeveragePoolUpdated: TypedContractEvent<
      LeveragePoolUpdatedEvent.InputTuple,
      LeveragePoolUpdatedEvent.OutputTuple,
      LeveragePoolUpdatedEvent.OutputObject
    >;

    'MaxUtilizationBpsUpdated(uint256)': TypedContractEvent<
      MaxUtilizationBpsUpdatedEvent.InputTuple,
      MaxUtilizationBpsUpdatedEvent.OutputTuple,
      MaxUtilizationBpsUpdatedEvent.OutputObject
    >;
    MaxUtilizationBpsUpdated: TypedContractEvent<
      MaxUtilizationBpsUpdatedEvent.InputTuple,
      MaxUtilizationBpsUpdatedEvent.OutputTuple,
      MaxUtilizationBpsUpdatedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    'VaultState(uint256,uint256,uint256)': TypedContractEvent<
      VaultStateEvent.InputTuple,
      VaultStateEvent.OutputTuple,
      VaultStateEvent.OutputObject
    >;
    VaultState: TypedContractEvent<
      VaultStateEvent.InputTuple,
      VaultStateEvent.OutputTuple,
      VaultStateEvent.OutputObject
    >;

    'Withdraw(address,address,address,uint256,uint256)': TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
