/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export declare namespace DnGmxJuniorVaultManager {
  export type TokensStruct = {
    weth: AddressLike;
    wbtc: AddressLike;
    sGlp: AddressLike;
    usdc: AddressLike;
  };

  export type TokensStructOutput = [
    weth: string,
    wbtc: string,
    sGlp: string,
    usdc: string
  ] & { weth: string; wbtc: string; sGlp: string; usdc: string };
}

export interface DnGmxJuniorVaultMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'claimVestedGmx'
      | 'convertAUsdcToAsset'
      | 'convertAssetToAUsdc'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositCap'
      | 'dnUsdcDeposited'
      | 'dnUsdcDepositedExternal'
      | 'executeBorrow'
      | 'executeBorrowFromDnGmxSeniorVault'
      | 'executeFlashloan'
      | 'executeOperationToken'
      | 'executeRepay'
      | 'executeRepayFromDnGmxSeniorVault'
      | 'executeSupply'
      | 'executeWithdraw'
      | 'feeBps'
      | 'flashloanAmounts'
      | 'getAdminParams'
      | 'getBorrowValue'
      | 'getCurrentBorrows'
      | 'getGlpPriceInUsdc'
      | 'getHedgeParams'
      | 'getMarketValue'
      | 'getOptimalBorrows'
      | 'getOptimalCappedBorrows'
      | 'getPrice(address)'
      | 'getPrice(address,bool)'
      | 'getPrice(bool)'
      | 'getPriceExternal'
      | 'getPriceX128'
      | 'getRebalanceParams'
      | 'getSlippageAdjustedAssets'
      | 'getThresholds'
      | 'getTokenReservesInGlp'
      | 'getUsdcBorrowed'
      | 'getVaultMarketValue'
      | 'grantAllowances'
      | 'harvestFees'
      | 'increaseAllowance'
      | 'initialize'
      | 'isValidRebalance'
      | 'isValidRebalanceDeviation'
      | 'isValidRebalanceHF'
      | 'isValidRebalanceTime'
      | 'isWithinAllowedDelta'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint'
      | 'name'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'protocolEsGmx'
      | 'protocolFee'
      | 'rebalance'
      | 'rebalanceBeforeShareAllocation'
      | 'rebalanceBorrow'
      | 'rebalanceHedge'
      | 'rebalanceProfit'
      | 'receiveFlashLoan'
      | 'redeem'
      | 'renounceOwnership'
      | 'setAdminParams'
      | 'setBatchingManager'
      | 'setFeeParams'
      | 'setGmxParams'
      | 'setHedgeParams'
      | 'setMocks'
      | 'setParamsV1'
      | 'setPoolAmounts'
      | 'setRebalanceParams'
      | 'setThresholds'
      | 'slippageThresholdSwapBtcBps'
      | 'slippageThresholdSwapEthBps'
      | 'stopVestAndStakeEsGmx'
      | 'swapToken'
      | 'swapUSDC'
      | 'symbol'
      | 'totalAssets'
      | 'totalAssetsComponents'
      | 'totalAssetsMax'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'unhedgedGlpInUsdc'
      | 'unpause'
      | 'unstakeAndVestEsGmx'
      | 'withdraw'
      | 'withdrawFeeBps'
      | 'withdrawFees'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'AdminParamsUpdated'
      | 'AllowancesGranted'
      | 'Approval'
      | 'Deposit'
      | 'DepositCapUpdated'
      | 'DnGmxSeniorVaultUpdated'
      | 'EsGmxStaked'
      | 'EsGmxVested'
      | 'FeeParamsUpdated'
      | 'FeesWithdrawn'
      | 'GmxClaimed'
      | 'HedgeParamsUpdated'
      | 'Initialized'
      | 'KeeperUpdated'
      | 'OwnershipTransferred'
      | 'ParamsV1Updated'
      | 'Paused'
      | 'RebalanceParamsUpdated'
      | 'Rebalanced'
      | 'ThresholdsUpdated'
      | 'TraderOIHedgesUpdated'
      | 'Transfer'
      | 'Unpaused'
      | 'Withdraw'
      | 'WithdrawFeeUpdated'
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'allowance',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimVestedGmx',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'convertAUsdcToAsset',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertAssetToAUsdc',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCap',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'dnUsdcDeposited',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'dnUsdcDepositedExternal',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'executeBorrow',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'executeBorrowFromDnGmxSeniorVault',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'executeFlashloan',
    values: [
      AddressLike[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'executeOperationToken',
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'executeRepay',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'executeRepayFromDnGmxSeniorVault',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'executeSupply',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'executeWithdraw',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'feeBps', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'flashloanAmounts',
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAdminParams',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getBorrowValue',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentBorrows',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getGlpPriceInUsdc',
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getHedgeParams',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarketValue',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getOptimalBorrows',
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getOptimalCappedBorrows',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPrice(address)',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPrice(address,bool)',
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPrice(bool)',
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPriceExternal',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getPriceX128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getRebalanceParams',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getSlippageAdjustedAssets',
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getThresholds',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getTokenReservesInGlp',
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUsdcBorrowed',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultMarketValue',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'grantAllowances',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestFees',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      AddressLike,
      AddressLike,
      AddressLike,
      DnGmxJuniorVaultManager.TokensStruct,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidRebalance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidRebalanceDeviation',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidRebalanceHF',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidRebalanceTime',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isWithinAllowedDelta',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxDeposit',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxMint',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxRedeem',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxWithdraw',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolEsGmx',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolFee',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'rebalance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rebalanceBeforeShareAllocation',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceBorrow',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceHedge',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceProfit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveFlashLoan',
    values: [AddressLike[], BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setAdminParams',
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBatchingManager',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeParams',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setGmxParams',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setHedgeParams',
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMocks',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setParamsV1',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setPoolAmounts',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setRebalanceParams',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setThresholds',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'slippageThresholdSwapBtcBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'slippageThresholdSwapEthBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'stopVestAndStakeEsGmx',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'swapToken',
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapUSDC',
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalAssetsComponents',
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalAssetsMax',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'unhedgedGlpInUsdc',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'unstakeAndVestEsGmx',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFeeBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'claimVestedGmx',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertAUsdcToAsset',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertAssetToAUsdc',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'dnUsdcDeposited',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dnUsdcDepositedExternal',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeBorrow',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeBorrowFromDnGmxSeniorVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeFlashloan',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeOperationToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeRepay',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeRepayFromDnGmxSeniorVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'feeBps', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'flashloanAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAdminParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getBorrowValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentBorrows',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getGlpPriceInUsdc',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getHedgeParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOptimalBorrows',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOptimalCappedBorrows',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPrice(address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPrice(address,bool)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPrice(bool)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPriceExternal',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRebalanceParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSlippageAdjustedAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getThresholds',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTokenReservesInGlp',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUsdcBorrowed',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVaultMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'grantAllowances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isValidRebalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isValidRebalanceDeviation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isValidRebalanceHF',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isValidRebalanceTime',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isWithinAllowedDelta',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewRedeem',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolEsGmx',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolFee',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceBeforeShareAllocation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceBorrow',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceHedge',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveFlashLoan',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAdminParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBatchingManager',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFeeParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setGmxParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setHedgeParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setMocks', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setParamsV1',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setPoolAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRebalanceParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setThresholds',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'slippageThresholdSwapBtcBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'slippageThresholdSwapEthBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stopVestAndStakeEsGmx',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssetsComponents',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssetsMax',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unhedgedGlpInUsdc',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'unstakeAndVestEsGmx',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawFeeBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result;
}

export namespace AdminParamsUpdatedEvent {
  export type InputTuple = [
    newKeeper: AddressLike,
    dnGmxSeniorVault: AddressLike,
    newDepositCap: BigNumberish,
    batchingManager: AddressLike,
    withdrawFeeBps: BigNumberish
  ];
  export type OutputTuple = [
    newKeeper: string,
    dnGmxSeniorVault: string,
    newDepositCap: bigint,
    batchingManager: string,
    withdrawFeeBps: bigint
  ];
  export interface OutputObject {
    newKeeper: string;
    dnGmxSeniorVault: string;
    newDepositCap: bigint;
    batchingManager: string;
    withdrawFeeBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowancesGrantedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositCapUpdatedEvent {
  export type InputTuple = [_newDepositCap: BigNumberish];
  export type OutputTuple = [_newDepositCap: bigint];
  export interface OutputObject {
    _newDepositCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DnGmxSeniorVaultUpdatedEvent {
  export type InputTuple = [_dnGmxSeniorVault: AddressLike];
  export type OutputTuple = [_dnGmxSeniorVault: string];
  export interface OutputObject {
    _dnGmxSeniorVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EsGmxStakedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EsGmxVestedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeParamsUpdatedEvent {
  export type InputTuple = [
    feeBps: BigNumberish,
    _newFeeRecipient: AddressLike
  ];
  export type OutputTuple = [feeBps: bigint, _newFeeRecipient: string];
  export interface OutputObject {
    feeBps: bigint;
    _newFeeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [feeAmount: BigNumberish];
  export type OutputTuple = [feeAmount: bigint];
  export interface OutputObject {
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GmxClaimedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HedgeParamsUpdatedEvent {
  export type InputTuple = [
    vault: AddressLike,
    swapRouter: AddressLike,
    targetHealthFactor: BigNumberish,
    aaveRewardsController: AddressLike,
    pool: AddressLike,
    oracle: AddressLike
  ];
  export type OutputTuple = [
    vault: string,
    swapRouter: string,
    targetHealthFactor: bigint,
    aaveRewardsController: string,
    pool: string,
    oracle: string
  ];
  export interface OutputObject {
    vault: string;
    swapRouter: string;
    targetHealthFactor: bigint;
    aaveRewardsController: string;
    pool: string;
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeeperUpdatedEvent {
  export type InputTuple = [_newKeeper: AddressLike];
  export type OutputTuple = [_newKeeper: string];
  export interface OutputObject {
    _newKeeper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParamsV1UpdatedEvent {
  export type InputTuple = [
    rebalanceProfitUsdcAmountThreshold: BigNumberish,
    dnGmxTraderHedgeStrategy: AddressLike
  ];
  export type OutputTuple = [
    rebalanceProfitUsdcAmountThreshold: bigint,
    dnGmxTraderHedgeStrategy: string
  ];
  export interface OutputObject {
    rebalanceProfitUsdcAmountThreshold: bigint;
    dnGmxTraderHedgeStrategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceParamsUpdatedEvent {
  export type InputTuple = [
    rebalanceTimeThreshold: BigNumberish,
    rebalanceDeltaThresholdBps: BigNumberish,
    rebalanceHfThresholdBps: BigNumberish
  ];
  export type OutputTuple = [
    rebalanceTimeThreshold: bigint,
    rebalanceDeltaThresholdBps: bigint,
    rebalanceHfThresholdBps: bigint
  ];
  export interface OutputObject {
    rebalanceTimeThreshold: bigint;
    rebalanceDeltaThresholdBps: bigint;
    rebalanceHfThresholdBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalancedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdsUpdatedEvent {
  export type InputTuple = [
    slippageThresholdSwapBtcBps: BigNumberish,
    slippageThresholdSwapEthBps: BigNumberish,
    slippageThresholdGmxBps: BigNumberish,
    usdcConversionThreshold: BigNumberish,
    wethConversionThreshold: BigNumberish,
    hedgeUsdcAmountThreshold: BigNumberish,
    partialBtcHedgeUsdcAmountThreshold: BigNumberish,
    partialEthHedgeUsdcAmountThreshold: BigNumberish
  ];
  export type OutputTuple = [
    slippageThresholdSwapBtcBps: bigint,
    slippageThresholdSwapEthBps: bigint,
    slippageThresholdGmxBps: bigint,
    usdcConversionThreshold: bigint,
    wethConversionThreshold: bigint,
    hedgeUsdcAmountThreshold: bigint,
    partialBtcHedgeUsdcAmountThreshold: bigint,
    partialEthHedgeUsdcAmountThreshold: bigint
  ];
  export interface OutputObject {
    slippageThresholdSwapBtcBps: bigint;
    slippageThresholdSwapEthBps: bigint;
    slippageThresholdGmxBps: bigint;
    usdcConversionThreshold: bigint;
    wethConversionThreshold: bigint;
    hedgeUsdcAmountThreshold: bigint;
    partialBtcHedgeUsdcAmountThreshold: bigint;
    partialEthHedgeUsdcAmountThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraderOIHedgesUpdatedEvent {
  export type InputTuple = [
    btcTraderOIHedge: BigNumberish,
    ethTraderOIHedge: BigNumberish
  ];
  export type OutputTuple = [
    btcTraderOIHedge: bigint,
    ethTraderOIHedge: bigint
  ];
  export interface OutputObject {
    btcTraderOIHedge: bigint;
    ethTraderOIHedge: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFeeUpdatedEvent {
  export type InputTuple = [_withdrawFeeBps: BigNumberish];
  export type OutputTuple = [_withdrawFeeBps: bigint];
  export interface OutputObject {
    _withdrawFeeBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DnGmxJuniorVaultMock extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: DnGmxJuniorVaultMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    'view'
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  asset: TypedContractMethod<[], [string], 'view'>;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], 'view'>;

  claimVestedGmx: TypedContractMethod<[], [void], 'nonpayable'>;

  convertAUsdcToAsset: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  convertAssetToAUsdc: TypedContractMethod<
    [usdcAmountDesired: BigNumberish],
    [bigint],
    'nonpayable'
  >;

  convertToAssets: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    'view'
  >;

  convertToShares: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    'view'
  >;

  decimals: TypedContractMethod<[], [bigint], 'view'>;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  deposit: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;

  depositCap: TypedContractMethod<[], [bigint], 'view'>;

  dnUsdcDeposited: TypedContractMethod<[], [bigint], 'view'>;

  dnUsdcDepositedExternal: TypedContractMethod<[], [bigint], 'view'>;

  executeBorrow: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  executeBorrowFromDnGmxSeniorVault: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  executeFlashloan: TypedContractMethod<
    [
      assets: AddressLike[],
      amounts: BigNumberish[],
      _btcTokenAmount: BigNumberish,
      _btcUsdcAmount: BigNumberish,
      _ethTokenAmount: BigNumberish,
      _ethUsdcAmount: BigNumberish,
      _repayDebtBtc: boolean,
      _repayDebtEth: boolean
    ],
    [void],
    'nonpayable'
  >;

  executeOperationToken: TypedContractMethod<
    [
      token: AddressLike,
      tokenAmount: BigNumberish,
      usdcAmount: BigNumberish,
      premium: BigNumberish,
      repayDebt: boolean
    ],
    [void],
    'nonpayable'
  >;

  executeRepay: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  executeRepayFromDnGmxSeniorVault: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  executeSupply: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  executeWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  feeBps: TypedContractMethod<[], [bigint], 'view'>;

  flashloanAmounts: TypedContractMethod<
    [
      token: AddressLike,
      optimalBorrow: BigNumberish,
      currentBorrow: BigNumberish
    ],
    [
      [bigint, bigint, boolean] & {
        tokenAmount: bigint;
        usdcAmount: bigint;
        repayDebt: boolean;
      }
    ],
    'view'
  >;

  getAdminParams: TypedContractMethod<
    [],
    [
      [string, string, bigint, bigint, bigint] & {
        keeper: string;
        dnGmxSeniorVault: string;
        depositCap_: bigint;
        withdrawFeeBps: bigint;
        feeTierWethWbtcPool: bigint;
      }
    ],
    'view'
  >;

  getBorrowValue: TypedContractMethod<
    [btcAmount: BigNumberish, ethAmount: BigNumberish],
    [bigint],
    'view'
  >;

  getCurrentBorrows: TypedContractMethod<
    [],
    [[bigint, bigint] & { currentBtcBorrow: bigint; currentEthBorrow: bigint }],
    'view'
  >;

  getGlpPriceInUsdc: TypedContractMethod<[maximize: boolean], [bigint], 'view'>;

  getHedgeParams: TypedContractMethod<
    [],
    [
      [string, string, bigint, string] & {
        balancerVault: string;
        swapRouter: string;
        targetHealthFactor: bigint;
        aaveRewardsController: string;
      }
    ],
    'view'
  >;

  getMarketValue: TypedContractMethod<
    [assetAmount: BigNumberish],
    [bigint],
    'view'
  >;

  getOptimalBorrows: TypedContractMethod<
    [glpDeposited: BigNumberish, withUpdatedPoolAmounts: boolean],
    [[bigint, bigint] & { optimalBtcBorrow: bigint; optimalEthBorrow: bigint }],
    'view'
  >;

  getOptimalCappedBorrows: TypedContractMethod<
    [
      availableBorrowAmount: BigNumberish,
      usdcLiquidationThreshold: BigNumberish
    ],
    [[bigint, bigint] & { optimalBtcBorrow: bigint; optimalEthBorrow: bigint }],
    'view'
  >;

  'getPrice(address)': TypedContractMethod<
    [token: AddressLike],
    [bigint],
    'view'
  >;

  'getPrice(address,bool)': TypedContractMethod<
    [token: AddressLike, arg1: boolean],
    [bigint],
    'view'
  >;

  'getPrice(bool)': TypedContractMethod<[maximize: boolean], [bigint], 'view'>;

  getPriceExternal: TypedContractMethod<[], [bigint], 'view'>;

  getPriceX128: TypedContractMethod<[], [bigint], 'view'>;

  getRebalanceParams: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        rebalanceTimeThreshold: bigint;
        rebalanceDeltaThresholdBps: bigint;
        rebalanceHfThresholdBps: bigint;
      }
    ],
    'view'
  >;

  getSlippageAdjustedAssets: TypedContractMethod<
    [assets: BigNumberish, isDeposit: boolean],
    [bigint],
    'view'
  >;

  getThresholds: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        slippageThresholdSwapBtcBps: bigint;
        slippageThresholdSwapEthBps: bigint;
        slippageThresholdGmxBps: bigint;
        usdcConversionThreshold: bigint;
        wethConversionThreshold: bigint;
        hedgeUsdcAmountThreshold: bigint;
        partialBtcHedgeUsdcAmountThreshold: bigint;
        partialEthHedgeUsdcAmountThreshold: bigint;
      }
    ],
    'view'
  >;

  getTokenReservesInGlp: TypedContractMethod<
    [
      token: AddressLike,
      glpDeposited: BigNumberish,
      withUpdatedPoolAmounts: boolean
    ],
    [bigint],
    'view'
  >;

  getUsdcBorrowed: TypedContractMethod<[], [bigint], 'view'>;

  getVaultMarketValue: TypedContractMethod<[], [bigint], 'view'>;

  grantAllowances: TypedContractMethod<[], [void], 'nonpayable'>;

  harvestFees: TypedContractMethod<[], [void], 'nonpayable'>;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  initialize: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _swapRouter: AddressLike,
      _rewardRouter: AddressLike,
      _mintBurnRewardRouter: AddressLike,
      _tokens: DnGmxJuniorVaultManager.TokensStruct,
      _poolAddressesProvider: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  isValidRebalance: TypedContractMethod<[], [boolean], 'view'>;

  isValidRebalanceDeviation: TypedContractMethod<[], [boolean], 'view'>;

  isValidRebalanceHF: TypedContractMethod<[], [boolean], 'view'>;

  isValidRebalanceTime: TypedContractMethod<[], [boolean], 'view'>;

  isWithinAllowedDelta: TypedContractMethod<
    [optimalBorrow: BigNumberish, currentBorrow: BigNumberish],
    [boolean],
    'view'
  >;

  maxDeposit: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;

  maxMint: TypedContractMethod<[receiver: AddressLike], [bigint], 'view'>;

  maxRedeem: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  maxWithdraw: TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;

  mint: TypedContractMethod<
    [shares: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;

  name: TypedContractMethod<[], [string], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  pause: TypedContractMethod<[], [void], 'nonpayable'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  previewDeposit: TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;

  previewMint: TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;

  previewRedeem: TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;

  previewWithdraw: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    'view'
  >;

  protocolEsGmx: TypedContractMethod<[], [bigint], 'view'>;

  protocolFee: TypedContractMethod<[], [bigint], 'view'>;

  rebalance: TypedContractMethod<[], [void], 'nonpayable'>;

  rebalanceBeforeShareAllocation: TypedContractMethod<[], [void], 'nonpayable'>;

  rebalanceBorrow: TypedContractMethod<
    [
      optimalBtcBorrow: BigNumberish,
      currentBtcBorrow: BigNumberish,
      optimalEthBorrow: BigNumberish,
      currentEthBorrow: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  rebalanceHedge: TypedContractMethod<
    [currentBtcBorrow: BigNumberish, currentEthBorrow: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  rebalanceProfit: TypedContractMethod<
    [borrowValue: BigNumberish],
    [void],
    'nonpayable'
  >;

  receiveFlashLoan: TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      feeAmounts: BigNumberish[],
      userData: BytesLike
    ],
    [void],
    'nonpayable'
  >;

  redeem: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    'nonpayable'
  >;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  setAdminParams: TypedContractMethod<
    [
      newKeeper: AddressLike,
      dnGmxSeniorVault: AddressLike,
      newDepositCap: BigNumberish,
      withdrawFeeBps: BigNumberish,
      feeTierWethWbtcPool: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  setBatchingManager: TypedContractMethod<
    [_batchingManager: AddressLike],
    [void],
    'nonpayable'
  >;

  setFeeParams: TypedContractMethod<
    [_feeBps: BigNumberish, _feeRecipient: AddressLike],
    [void],
    'nonpayable'
  >;

  setGmxParams: TypedContractMethod<
    [_glpManager: AddressLike],
    [void],
    'nonpayable'
  >;

  setHedgeParams: TypedContractMethod<
    [
      vault: AddressLike,
      swapRouter: AddressLike,
      targetHealthFactor: BigNumberish,
      aaveRewardsController: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  setMocks: TypedContractMethod<
    [_swapRouter: AddressLike],
    [void],
    'nonpayable'
  >;

  setParamsV1: TypedContractMethod<
    [
      rebalanceProfitUsdcAmountThreshold: BigNumberish,
      dnGmxTraderHedgeStrategy: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  setPoolAmounts: TypedContractMethod<[], [void], 'nonpayable'>;

  setRebalanceParams: TypedContractMethod<
    [
      rebalanceTimeThreshold: BigNumberish,
      rebalanceDeltaThresholdBps: BigNumberish,
      rebalanceHfThresholdBps: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  setThresholds: TypedContractMethod<
    [
      slippageThresholdSwapBtcBps: BigNumberish,
      slippageThresholdSwapEthBps: BigNumberish,
      slippageThresholdGmxBps: BigNumberish,
      usdcConversionThreshold: BigNumberish,
      wethConversionThreshold: BigNumberish,
      hedgeUsdcAmountThreshold: BigNumberish,
      partialBtcHedgeUsdcAmountThreshold: BigNumberish,
      partialEthHedgeUsdcAmountThreshold: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  slippageThresholdSwapBtcBps: TypedContractMethod<[], [bigint], 'view'>;

  slippageThresholdSwapEthBps: TypedContractMethod<[], [bigint], 'view'>;

  stopVestAndStakeEsGmx: TypedContractMethod<[], [void], 'nonpayable'>;

  swapToken: TypedContractMethod<
    [
      token: AddressLike,
      tokenAmount: BigNumberish,
      minUsdcAmount: BigNumberish
    ],
    [[bigint, bigint] & { usdcReceived: bigint; tokensUsed: bigint }],
    'nonpayable'
  >;

  swapUSDC: TypedContractMethod<
    [
      token: AddressLike,
      tokenAmount: BigNumberish,
      maxUsdcAmount: BigNumberish
    ],
    [[bigint, bigint] & { usdcPaid: bigint; tokensReceived: bigint }],
    'nonpayable'
  >;

  symbol: TypedContractMethod<[], [string], 'view'>;

  totalAssets: TypedContractMethod<[], [bigint], 'view'>;

  totalAssetsComponents: TypedContractMethod<
    [maximize: boolean],
    [
      [bigint, bigint, bigint, bigint] & {
        fsGlpBal: bigint;
        aaveProfitGlp: bigint;
        aaveLossGlp: bigint;
        unhedgedGlp: bigint;
      }
    ],
    'view'
  >;

  totalAssetsMax: TypedContractMethod<[], [bigint], 'view'>;

  totalSupply: TypedContractMethod<[], [bigint], 'view'>;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  unhedgedGlpInUsdc: TypedContractMethod<[], [bigint], 'view'>;

  unpause: TypedContractMethod<[], [void], 'nonpayable'>;

  unstakeAndVestEsGmx: TypedContractMethod<[], [void], 'nonpayable'>;

  withdraw: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    'nonpayable'
  >;

  withdrawFeeBps: TypedContractMethod<[], [bigint], 'view'>;

  withdrawFees: TypedContractMethod<[], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'allowance'
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'approve'
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'asset'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'balanceOf'
  ): TypedContractMethod<[account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'claimVestedGmx'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'convertAUsdcToAsset'
  ): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'convertAssetToAUsdc'
  ): TypedContractMethod<
    [usdcAmountDesired: BigNumberish],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'convertToAssets'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'convertToShares'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'decimals'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'decreaseAllowance'
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'deposit'
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'depositCap'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'dnUsdcDeposited'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'dnUsdcDepositedExternal'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'executeBorrow'
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'executeBorrowFromDnGmxSeniorVault'
  ): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'executeFlashloan'
  ): TypedContractMethod<
    [
      assets: AddressLike[],
      amounts: BigNumberish[],
      _btcTokenAmount: BigNumberish,
      _btcUsdcAmount: BigNumberish,
      _ethTokenAmount: BigNumberish,
      _ethUsdcAmount: BigNumberish,
      _repayDebtBtc: boolean,
      _repayDebtEth: boolean
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'executeOperationToken'
  ): TypedContractMethod<
    [
      token: AddressLike,
      tokenAmount: BigNumberish,
      usdcAmount: BigNumberish,
      premium: BigNumberish,
      repayDebt: boolean
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'executeRepay'
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'executeRepayFromDnGmxSeniorVault'
  ): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'executeSupply'
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'executeWithdraw'
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'feeBps'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'flashloanAmounts'): TypedContractMethod<
    [
      token: AddressLike,
      optimalBorrow: BigNumberish,
      currentBorrow: BigNumberish
    ],
    [
      [bigint, bigint, boolean] & {
        tokenAmount: bigint;
        usdcAmount: bigint;
        repayDebt: boolean;
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'getAdminParams'): TypedContractMethod<
    [],
    [
      [string, string, bigint, bigint, bigint] & {
        keeper: string;
        dnGmxSeniorVault: string;
        depositCap_: bigint;
        withdrawFeeBps: bigint;
        feeTierWethWbtcPool: bigint;
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getBorrowValue'
  ): TypedContractMethod<
    [btcAmount: BigNumberish, ethAmount: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getCurrentBorrows'
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { currentBtcBorrow: bigint; currentEthBorrow: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getGlpPriceInUsdc'
  ): TypedContractMethod<[maximize: boolean], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getHedgeParams'): TypedContractMethod<
    [],
    [
      [string, string, bigint, string] & {
        balancerVault: string;
        swapRouter: string;
        targetHealthFactor: bigint;
        aaveRewardsController: string;
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getMarketValue'
  ): TypedContractMethod<[assetAmount: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getOptimalBorrows'
  ): TypedContractMethod<
    [glpDeposited: BigNumberish, withUpdatedPoolAmounts: boolean],
    [[bigint, bigint] & { optimalBtcBorrow: bigint; optimalEthBorrow: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getOptimalCappedBorrows'
  ): TypedContractMethod<
    [
      availableBorrowAmount: BigNumberish,
      usdcLiquidationThreshold: BigNumberish
    ],
    [[bigint, bigint] & { optimalBtcBorrow: bigint; optimalEthBorrow: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getPrice(address)'
  ): TypedContractMethod<[token: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getPrice(address,bool)'
  ): TypedContractMethod<[token: AddressLike, arg1: boolean], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getPrice(bool)'
  ): TypedContractMethod<[maximize: boolean], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getPriceExternal'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getPriceX128'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getRebalanceParams'): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        rebalanceTimeThreshold: bigint;
        rebalanceDeltaThresholdBps: bigint;
        rebalanceHfThresholdBps: bigint;
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getSlippageAdjustedAssets'
  ): TypedContractMethod<
    [assets: BigNumberish, isDeposit: boolean],
    [bigint],
    'view'
  >;
  getFunction(nameOrSignature: 'getThresholds'): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        slippageThresholdSwapBtcBps: bigint;
        slippageThresholdSwapEthBps: bigint;
        slippageThresholdGmxBps: bigint;
        usdcConversionThreshold: bigint;
        wethConversionThreshold: bigint;
        hedgeUsdcAmountThreshold: bigint;
        partialBtcHedgeUsdcAmountThreshold: bigint;
        partialEthHedgeUsdcAmountThreshold: bigint;
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getTokenReservesInGlp'
  ): TypedContractMethod<
    [
      token: AddressLike,
      glpDeposited: BigNumberish,
      withUpdatedPoolAmounts: boolean
    ],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getUsdcBorrowed'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getVaultMarketValue'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'grantAllowances'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'harvestFees'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'increaseAllowance'
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _swapRouter: AddressLike,
      _rewardRouter: AddressLike,
      _mintBurnRewardRouter: AddressLike,
      _tokens: DnGmxJuniorVaultManager.TokensStruct,
      _poolAddressesProvider: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'isValidRebalance'
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isValidRebalanceDeviation'
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isValidRebalanceHF'
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isValidRebalanceTime'
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isWithinAllowedDelta'
  ): TypedContractMethod<
    [optimalBorrow: BigNumberish, currentBorrow: BigNumberish],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'maxDeposit'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxMint'
  ): TypedContractMethod<[receiver: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxRedeem'
  ): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'maxWithdraw'
  ): TypedContractMethod<[owner: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'mint'
  ): TypedContractMethod<
    [shares: BigNumberish, to: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'name'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'owner'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pause'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'paused'
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'previewDeposit'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewMint'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewRedeem'
  ): TypedContractMethod<[shares: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'previewWithdraw'
  ): TypedContractMethod<[assets: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'protocolEsGmx'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'protocolFee'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'rebalance'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'rebalanceBeforeShareAllocation'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'rebalanceBorrow'
  ): TypedContractMethod<
    [
      optimalBtcBorrow: BigNumberish,
      currentBtcBorrow: BigNumberish,
      optimalEthBorrow: BigNumberish,
      currentEthBorrow: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'rebalanceHedge'
  ): TypedContractMethod<
    [currentBtcBorrow: BigNumberish, currentEthBorrow: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'rebalanceProfit'
  ): TypedContractMethod<[borrowValue: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'receiveFlashLoan'
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      feeAmounts: BigNumberish[],
      userData: BytesLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'redeem'
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'renounceOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setAdminParams'
  ): TypedContractMethod<
    [
      newKeeper: AddressLike,
      dnGmxSeniorVault: AddressLike,
      newDepositCap: BigNumberish,
      withdrawFeeBps: BigNumberish,
      feeTierWethWbtcPool: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setBatchingManager'
  ): TypedContractMethod<[_batchingManager: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setFeeParams'
  ): TypedContractMethod<
    [_feeBps: BigNumberish, _feeRecipient: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setGmxParams'
  ): TypedContractMethod<[_glpManager: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setHedgeParams'
  ): TypedContractMethod<
    [
      vault: AddressLike,
      swapRouter: AddressLike,
      targetHealthFactor: BigNumberish,
      aaveRewardsController: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setMocks'
  ): TypedContractMethod<[_swapRouter: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setParamsV1'
  ): TypedContractMethod<
    [
      rebalanceProfitUsdcAmountThreshold: BigNumberish,
      dnGmxTraderHedgeStrategy: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setPoolAmounts'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setRebalanceParams'
  ): TypedContractMethod<
    [
      rebalanceTimeThreshold: BigNumberish,
      rebalanceDeltaThresholdBps: BigNumberish,
      rebalanceHfThresholdBps: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setThresholds'
  ): TypedContractMethod<
    [
      slippageThresholdSwapBtcBps: BigNumberish,
      slippageThresholdSwapEthBps: BigNumberish,
      slippageThresholdGmxBps: BigNumberish,
      usdcConversionThreshold: BigNumberish,
      wethConversionThreshold: BigNumberish,
      hedgeUsdcAmountThreshold: BigNumberish,
      partialBtcHedgeUsdcAmountThreshold: BigNumberish,
      partialEthHedgeUsdcAmountThreshold: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'slippageThresholdSwapBtcBps'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'slippageThresholdSwapEthBps'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'stopVestAndStakeEsGmx'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'swapToken'
  ): TypedContractMethod<
    [
      token: AddressLike,
      tokenAmount: BigNumberish,
      minUsdcAmount: BigNumberish
    ],
    [[bigint, bigint] & { usdcReceived: bigint; tokensUsed: bigint }],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'swapUSDC'
  ): TypedContractMethod<
    [
      token: AddressLike,
      tokenAmount: BigNumberish,
      maxUsdcAmount: BigNumberish
    ],
    [[bigint, bigint] & { usdcPaid: bigint; tokensReceived: bigint }],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'symbol'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'totalAssets'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'totalAssetsComponents'): TypedContractMethod<
    [maximize: boolean],
    [
      [bigint, bigint, bigint, bigint] & {
        fsGlpBal: bigint;
        aaveProfitGlp: bigint;
        aaveLossGlp: bigint;
        unhedgedGlp: bigint;
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'totalAssetsMax'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'totalSupply'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transfer'
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferFrom'
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unhedgedGlpInUsdc'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'unpause'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unstakeAndVestEsGmx'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'withdraw'
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'withdrawFeeBps'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'withdrawFees'
  ): TypedContractMethod<[], [void], 'nonpayable'>;

  getEvent(
    key: 'AdminParamsUpdated'
  ): TypedContractEvent<
    AdminParamsUpdatedEvent.InputTuple,
    AdminParamsUpdatedEvent.OutputTuple,
    AdminParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'AllowancesGranted'
  ): TypedContractEvent<
    AllowancesGrantedEvent.InputTuple,
    AllowancesGrantedEvent.OutputTuple,
    AllowancesGrantedEvent.OutputObject
  >;
  getEvent(
    key: 'Approval'
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: 'Deposit'
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: 'DepositCapUpdated'
  ): TypedContractEvent<
    DepositCapUpdatedEvent.InputTuple,
    DepositCapUpdatedEvent.OutputTuple,
    DepositCapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'DnGmxSeniorVaultUpdated'
  ): TypedContractEvent<
    DnGmxSeniorVaultUpdatedEvent.InputTuple,
    DnGmxSeniorVaultUpdatedEvent.OutputTuple,
    DnGmxSeniorVaultUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'EsGmxStaked'
  ): TypedContractEvent<
    EsGmxStakedEvent.InputTuple,
    EsGmxStakedEvent.OutputTuple,
    EsGmxStakedEvent.OutputObject
  >;
  getEvent(
    key: 'EsGmxVested'
  ): TypedContractEvent<
    EsGmxVestedEvent.InputTuple,
    EsGmxVestedEvent.OutputTuple,
    EsGmxVestedEvent.OutputObject
  >;
  getEvent(
    key: 'FeeParamsUpdated'
  ): TypedContractEvent<
    FeeParamsUpdatedEvent.InputTuple,
    FeeParamsUpdatedEvent.OutputTuple,
    FeeParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'FeesWithdrawn'
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: 'GmxClaimed'
  ): TypedContractEvent<
    GmxClaimedEvent.InputTuple,
    GmxClaimedEvent.OutputTuple,
    GmxClaimedEvent.OutputObject
  >;
  getEvent(
    key: 'HedgeParamsUpdated'
  ): TypedContractEvent<
    HedgeParamsUpdatedEvent.InputTuple,
    HedgeParamsUpdatedEvent.OutputTuple,
    HedgeParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Initialized'
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'KeeperUpdated'
  ): TypedContractEvent<
    KeeperUpdatedEvent.InputTuple,
    KeeperUpdatedEvent.OutputTuple,
    KeeperUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'ParamsV1Updated'
  ): TypedContractEvent<
    ParamsV1UpdatedEvent.InputTuple,
    ParamsV1UpdatedEvent.OutputTuple,
    ParamsV1UpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Paused'
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: 'RebalanceParamsUpdated'
  ): TypedContractEvent<
    RebalanceParamsUpdatedEvent.InputTuple,
    RebalanceParamsUpdatedEvent.OutputTuple,
    RebalanceParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Rebalanced'
  ): TypedContractEvent<
    RebalancedEvent.InputTuple,
    RebalancedEvent.OutputTuple,
    RebalancedEvent.OutputObject
  >;
  getEvent(
    key: 'ThresholdsUpdated'
  ): TypedContractEvent<
    ThresholdsUpdatedEvent.InputTuple,
    ThresholdsUpdatedEvent.OutputTuple,
    ThresholdsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'TraderOIHedgesUpdated'
  ): TypedContractEvent<
    TraderOIHedgesUpdatedEvent.InputTuple,
    TraderOIHedgesUpdatedEvent.OutputTuple,
    TraderOIHedgesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Transfer'
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: 'Unpaused'
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: 'Withdraw'
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: 'WithdrawFeeUpdated'
  ): TypedContractEvent<
    WithdrawFeeUpdatedEvent.InputTuple,
    WithdrawFeeUpdatedEvent.OutputTuple,
    WithdrawFeeUpdatedEvent.OutputObject
  >;

  filters: {
    'AdminParamsUpdated(address,address,uint256,address,uint16)': TypedContractEvent<
      AdminParamsUpdatedEvent.InputTuple,
      AdminParamsUpdatedEvent.OutputTuple,
      AdminParamsUpdatedEvent.OutputObject
    >;
    AdminParamsUpdated: TypedContractEvent<
      AdminParamsUpdatedEvent.InputTuple,
      AdminParamsUpdatedEvent.OutputTuple,
      AdminParamsUpdatedEvent.OutputObject
    >;

    'AllowancesGranted()': TypedContractEvent<
      AllowancesGrantedEvent.InputTuple,
      AllowancesGrantedEvent.OutputTuple,
      AllowancesGrantedEvent.OutputObject
    >;
    AllowancesGranted: TypedContractEvent<
      AllowancesGrantedEvent.InputTuple,
      AllowancesGrantedEvent.OutputTuple,
      AllowancesGrantedEvent.OutputObject
    >;

    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    'Deposit(address,address,uint256,uint256)': TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    'DepositCapUpdated(uint256)': TypedContractEvent<
      DepositCapUpdatedEvent.InputTuple,
      DepositCapUpdatedEvent.OutputTuple,
      DepositCapUpdatedEvent.OutputObject
    >;
    DepositCapUpdated: TypedContractEvent<
      DepositCapUpdatedEvent.InputTuple,
      DepositCapUpdatedEvent.OutputTuple,
      DepositCapUpdatedEvent.OutputObject
    >;

    'DnGmxSeniorVaultUpdated(address)': TypedContractEvent<
      DnGmxSeniorVaultUpdatedEvent.InputTuple,
      DnGmxSeniorVaultUpdatedEvent.OutputTuple,
      DnGmxSeniorVaultUpdatedEvent.OutputObject
    >;
    DnGmxSeniorVaultUpdated: TypedContractEvent<
      DnGmxSeniorVaultUpdatedEvent.InputTuple,
      DnGmxSeniorVaultUpdatedEvent.OutputTuple,
      DnGmxSeniorVaultUpdatedEvent.OutputObject
    >;

    'EsGmxStaked(uint256)': TypedContractEvent<
      EsGmxStakedEvent.InputTuple,
      EsGmxStakedEvent.OutputTuple,
      EsGmxStakedEvent.OutputObject
    >;
    EsGmxStaked: TypedContractEvent<
      EsGmxStakedEvent.InputTuple,
      EsGmxStakedEvent.OutputTuple,
      EsGmxStakedEvent.OutputObject
    >;

    'EsGmxVested(uint256)': TypedContractEvent<
      EsGmxVestedEvent.InputTuple,
      EsGmxVestedEvent.OutputTuple,
      EsGmxVestedEvent.OutputObject
    >;
    EsGmxVested: TypedContractEvent<
      EsGmxVestedEvent.InputTuple,
      EsGmxVestedEvent.OutputTuple,
      EsGmxVestedEvent.OutputObject
    >;

    'FeeParamsUpdated(uint256,address)': TypedContractEvent<
      FeeParamsUpdatedEvent.InputTuple,
      FeeParamsUpdatedEvent.OutputTuple,
      FeeParamsUpdatedEvent.OutputObject
    >;
    FeeParamsUpdated: TypedContractEvent<
      FeeParamsUpdatedEvent.InputTuple,
      FeeParamsUpdatedEvent.OutputTuple,
      FeeParamsUpdatedEvent.OutputObject
    >;

    'FeesWithdrawn(uint256)': TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    'GmxClaimed(uint256)': TypedContractEvent<
      GmxClaimedEvent.InputTuple,
      GmxClaimedEvent.OutputTuple,
      GmxClaimedEvent.OutputObject
    >;
    GmxClaimed: TypedContractEvent<
      GmxClaimedEvent.InputTuple,
      GmxClaimedEvent.OutputTuple,
      GmxClaimedEvent.OutputObject
    >;

    'HedgeParamsUpdated(address,address,uint256,address,address,address)': TypedContractEvent<
      HedgeParamsUpdatedEvent.InputTuple,
      HedgeParamsUpdatedEvent.OutputTuple,
      HedgeParamsUpdatedEvent.OutputObject
    >;
    HedgeParamsUpdated: TypedContractEvent<
      HedgeParamsUpdatedEvent.InputTuple,
      HedgeParamsUpdatedEvent.OutputTuple,
      HedgeParamsUpdatedEvent.OutputObject
    >;

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'KeeperUpdated(address)': TypedContractEvent<
      KeeperUpdatedEvent.InputTuple,
      KeeperUpdatedEvent.OutputTuple,
      KeeperUpdatedEvent.OutputObject
    >;
    KeeperUpdated: TypedContractEvent<
      KeeperUpdatedEvent.InputTuple,
      KeeperUpdatedEvent.OutputTuple,
      KeeperUpdatedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'ParamsV1Updated(uint128,address)': TypedContractEvent<
      ParamsV1UpdatedEvent.InputTuple,
      ParamsV1UpdatedEvent.OutputTuple,
      ParamsV1UpdatedEvent.OutputObject
    >;
    ParamsV1Updated: TypedContractEvent<
      ParamsV1UpdatedEvent.InputTuple,
      ParamsV1UpdatedEvent.OutputTuple,
      ParamsV1UpdatedEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    'RebalanceParamsUpdated(uint32,uint16,uint16)': TypedContractEvent<
      RebalanceParamsUpdatedEvent.InputTuple,
      RebalanceParamsUpdatedEvent.OutputTuple,
      RebalanceParamsUpdatedEvent.OutputObject
    >;
    RebalanceParamsUpdated: TypedContractEvent<
      RebalanceParamsUpdatedEvent.InputTuple,
      RebalanceParamsUpdatedEvent.OutputTuple,
      RebalanceParamsUpdatedEvent.OutputObject
    >;

    'Rebalanced()': TypedContractEvent<
      RebalancedEvent.InputTuple,
      RebalancedEvent.OutputTuple,
      RebalancedEvent.OutputObject
    >;
    Rebalanced: TypedContractEvent<
      RebalancedEvent.InputTuple,
      RebalancedEvent.OutputTuple,
      RebalancedEvent.OutputObject
    >;

    'ThresholdsUpdated(uint16,uint16,uint16,uint128,uint128,uint128,uint128,uint128)': TypedContractEvent<
      ThresholdsUpdatedEvent.InputTuple,
      ThresholdsUpdatedEvent.OutputTuple,
      ThresholdsUpdatedEvent.OutputObject
    >;
    ThresholdsUpdated: TypedContractEvent<
      ThresholdsUpdatedEvent.InputTuple,
      ThresholdsUpdatedEvent.OutputTuple,
      ThresholdsUpdatedEvent.OutputObject
    >;

    'TraderOIHedgesUpdated(int256,int256)': TypedContractEvent<
      TraderOIHedgesUpdatedEvent.InputTuple,
      TraderOIHedgesUpdatedEvent.OutputTuple,
      TraderOIHedgesUpdatedEvent.OutputObject
    >;
    TraderOIHedgesUpdated: TypedContractEvent<
      TraderOIHedgesUpdatedEvent.InputTuple,
      TraderOIHedgesUpdatedEvent.OutputTuple,
      TraderOIHedgesUpdatedEvent.OutputObject
    >;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    'Withdraw(address,address,address,uint256,uint256)': TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    'WithdrawFeeUpdated(uint256)': TypedContractEvent<
      WithdrawFeeUpdatedEvent.InputTuple,
      WithdrawFeeUpdatedEvent.OutputTuple,
      WithdrawFeeUpdatedEvent.OutputObject
    >;
    WithdrawFeeUpdated: TypedContractEvent<
      WithdrawFeeUpdatedEvent.InputTuple,
      WithdrawFeeUpdatedEvent.OutputTuple,
      WithdrawFeeUpdatedEvent.OutputObject
    >;
  };
}
