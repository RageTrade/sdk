/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export declare namespace IDnGmxBatchingManagerGlp {
  export type RoundDepositStruct = {
    totalAssets: BigNumberish;
    totalShares: BigNumberish;
  };

  export type RoundDepositStructOutput = [
    totalAssets: bigint,
    totalShares: bigint
  ] & { totalAssets: bigint; totalShares: bigint };

  export type UserDepositStruct = {
    round: BigNumberish;
    assetBalance: BigNumberish;
    unclaimedShares: BigNumberish;
  };

  export type UserDepositStructOutput = [
    round: bigint,
    assetBalance: bigint,
    unclaimedShares: bigint
  ] & { round: bigint; assetBalance: bigint; unclaimedShares: bigint };
}

export interface DnGmxBatchingManagerGlpInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'assetBalance'
      | 'claim'
      | 'claimAndRedeem'
      | 'currentRound'
      | 'deposit'
      | 'depositCap'
      | 'dnGmxJuniorVault'
      | 'executeBatch'
      | 'grantAllowances'
      | 'initialize'
      | 'keeper'
      | 'minGlpDepositThreshold'
      | 'owner'
      | 'pauseDeposit'
      | 'paused'
      | 'renounceOwnership'
      | 'roundAssetBalance'
      | 'roundDeposits'
      | 'roundGlpDeposited'
      | 'roundSharesMinted'
      | 'setDepositCap'
      | 'setKeeper'
      | 'setThresholds'
      | 'transferOwnership'
      | 'unclaimedShares'
      | 'unpauseDeposit'
      | 'userDeposits'
      | 'vaultBatchingState'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'BatchDeposit'
      | 'ClaimedAndRedeemed'
      | 'DepositCapUpdated'
      | 'DepositToken'
      | 'Initialized'
      | 'KeeperUpdated'
      | 'OwnershipTransferred'
      | 'PartialBatchDeposit'
      | 'Paused'
      | 'SharesClaimed'
      | 'ThresholdsUpdated'
      | 'Unpaused'
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'assetBalance',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'claim',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimAndRedeem',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'currentRound',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCap',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'dnGmxJuniorVault',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'executeBatch',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'grantAllowances',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'minGlpDepositThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pauseDeposit',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'roundAssetBalance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'roundDeposits',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'roundGlpDeposited',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'roundSharesMinted',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositCap',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setKeeper',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setThresholds',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'unclaimedShares',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'unpauseDeposit',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'userDeposits',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'vaultBatchingState',
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: 'assetBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'claimAndRedeem',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentRound',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'dnGmxJuniorVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeBatch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'grantAllowances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'minGlpDepositThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pauseDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'roundAssetBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'roundDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'roundGlpDeposited',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'roundSharesMinted',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDepositCap',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setKeeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setThresholds',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unclaimedShares',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unpauseDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'vaultBatchingState',
    data: BytesLike
  ): Result;
}

export namespace BatchDepositEvent {
  export type InputTuple = [
    round: BigNumberish,
    totalAssets: BigNumberish,
    userGlpAmount: BigNumberish,
    userShareAmount: BigNumberish
  ];
  export type OutputTuple = [
    round: bigint,
    totalAssets: bigint,
    userGlpAmount: bigint,
    userShareAmount: bigint
  ];
  export interface OutputObject {
    round: bigint;
    totalAssets: bigint;
    userGlpAmount: bigint;
    userShareAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedAndRedeemedEvent {
  export type InputTuple = [
    claimer: AddressLike,
    receiver: AddressLike,
    shares: BigNumberish,
    assetsReceived: BigNumberish
  ];
  export type OutputTuple = [
    claimer: string,
    receiver: string,
    shares: bigint,
    assetsReceived: bigint
  ];
  export interface OutputObject {
    claimer: string;
    receiver: string;
    shares: bigint;
    assetsReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositCapUpdatedEvent {
  export type InputTuple = [newDepositCap: BigNumberish];
  export type OutputTuple = [newDepositCap: bigint];
  export interface OutputObject {
    newDepositCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositTokenEvent {
  export type InputTuple = [
    round: BigNumberish,
    token: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish,
    glpStaked: BigNumberish
  ];
  export type OutputTuple = [
    round: bigint,
    token: string,
    receiver: string,
    amount: bigint,
    glpStaked: bigint
  ];
  export interface OutputObject {
    round: bigint;
    token: string;
    receiver: string;
    amount: bigint;
    glpStaked: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeeperUpdatedEvent {
  export type InputTuple = [newKeeper: AddressLike];
  export type OutputTuple = [newKeeper: string];
  export interface OutputObject {
    newKeeper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartialBatchDepositEvent {
  export type InputTuple = [
    round: BigNumberish,
    partialGlpAmount: BigNumberish,
    partialShareAmount: BigNumberish
  ];
  export type OutputTuple = [
    round: bigint,
    partialGlpAmount: bigint,
    partialShareAmount: bigint
  ];
  export interface OutputObject {
    round: bigint;
    partialGlpAmount: bigint;
    partialShareAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SharesClaimedEvent {
  export type InputTuple = [
    from: AddressLike,
    receiver: AddressLike,
    claimAmount: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    receiver: string,
    claimAmount: bigint
  ];
  export interface OutputObject {
    from: string;
    receiver: string;
    claimAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdsUpdatedEvent {
  export type InputTuple = [minGlpDepositThreshold: BigNumberish];
  export type OutputTuple = [minGlpDepositThreshold: bigint];
  export interface OutputObject {
    minGlpDepositThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DnGmxBatchingManagerGlp extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: DnGmxBatchingManagerGlpInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assetBalance: TypedContractMethod<[account: AddressLike], [bigint], 'view'>;

  claim: TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  claimAndRedeem: TypedContractMethod<
    [receiver: AddressLike],
    [bigint],
    'nonpayable'
  >;

  currentRound: TypedContractMethod<[], [bigint], 'view'>;

  deposit: TypedContractMethod<
    [amount: BigNumberish, receiver: AddressLike],
    [void],
    'nonpayable'
  >;

  depositCap: TypedContractMethod<[], [bigint], 'view'>;

  dnGmxJuniorVault: TypedContractMethod<[], [string], 'view'>;

  executeBatch: TypedContractMethod<
    [sGlpToDeposit: BigNumberish],
    [void],
    'nonpayable'
  >;

  grantAllowances: TypedContractMethod<[], [void], 'nonpayable'>;

  initialize: TypedContractMethod<
    [
      _sGlp: AddressLike,
      _rewardRouter: AddressLike,
      _glpManager: AddressLike,
      _dnGmxJuniorVault: AddressLike,
      _keeper: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  keeper: TypedContractMethod<[], [string], 'view'>;

  minGlpDepositThreshold: TypedContractMethod<[], [bigint], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  pauseDeposit: TypedContractMethod<[], [void], 'nonpayable'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  roundAssetBalance: TypedContractMethod<[], [bigint], 'view'>;

  roundDeposits: TypedContractMethod<
    [round: BigNumberish],
    [IDnGmxBatchingManagerGlp.RoundDepositStructOutput],
    'view'
  >;

  roundGlpDeposited: TypedContractMethod<[], [bigint], 'view'>;

  roundSharesMinted: TypedContractMethod<[], [bigint], 'view'>;

  setDepositCap: TypedContractMethod<
    [_depositCap: BigNumberish],
    [void],
    'nonpayable'
  >;

  setKeeper: TypedContractMethod<[_keeper: AddressLike], [void], 'nonpayable'>;

  setThresholds: TypedContractMethod<
    [_minGlpDepositThreshold: BigNumberish],
    [void],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  unclaimedShares: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    'view'
  >;

  unpauseDeposit: TypedContractMethod<[], [void], 'nonpayable'>;

  userDeposits: TypedContractMethod<
    [account: AddressLike],
    [IDnGmxBatchingManagerGlp.UserDepositStructOutput],
    'view'
  >;

  vaultBatchingState: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        currentRound: bigint;
        roundSharesMinted: bigint;
        roundGlpDeposited: bigint;
        roundAssetBalance: bigint;
      }
    ],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'assetBalance'
  ): TypedContractMethod<[account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'claim'
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'claimAndRedeem'
  ): TypedContractMethod<[receiver: AddressLike], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'currentRound'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'deposit'
  ): TypedContractMethod<
    [amount: BigNumberish, receiver: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'depositCap'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'dnGmxJuniorVault'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'executeBatch'
  ): TypedContractMethod<[sGlpToDeposit: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'grantAllowances'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [
      _sGlp: AddressLike,
      _rewardRouter: AddressLike,
      _glpManager: AddressLike,
      _dnGmxJuniorVault: AddressLike,
      _keeper: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'keeper'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'minGlpDepositThreshold'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'owner'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pauseDeposit'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'paused'
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'renounceOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'roundAssetBalance'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'roundDeposits'
  ): TypedContractMethod<
    [round: BigNumberish],
    [IDnGmxBatchingManagerGlp.RoundDepositStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'roundGlpDeposited'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'roundSharesMinted'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'setDepositCap'
  ): TypedContractMethod<[_depositCap: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setKeeper'
  ): TypedContractMethod<[_keeper: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setThresholds'
  ): TypedContractMethod<
    [_minGlpDepositThreshold: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unclaimedShares'
  ): TypedContractMethod<[account: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'unpauseDeposit'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'userDeposits'
  ): TypedContractMethod<
    [account: AddressLike],
    [IDnGmxBatchingManagerGlp.UserDepositStructOutput],
    'view'
  >;
  getFunction(nameOrSignature: 'vaultBatchingState'): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        currentRound: bigint;
        roundSharesMinted: bigint;
        roundGlpDeposited: bigint;
        roundAssetBalance: bigint;
      }
    ],
    'view'
  >;

  getEvent(
    key: 'BatchDeposit'
  ): TypedContractEvent<
    BatchDepositEvent.InputTuple,
    BatchDepositEvent.OutputTuple,
    BatchDepositEvent.OutputObject
  >;
  getEvent(
    key: 'ClaimedAndRedeemed'
  ): TypedContractEvent<
    ClaimedAndRedeemedEvent.InputTuple,
    ClaimedAndRedeemedEvent.OutputTuple,
    ClaimedAndRedeemedEvent.OutputObject
  >;
  getEvent(
    key: 'DepositCapUpdated'
  ): TypedContractEvent<
    DepositCapUpdatedEvent.InputTuple,
    DepositCapUpdatedEvent.OutputTuple,
    DepositCapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'DepositToken'
  ): TypedContractEvent<
    DepositTokenEvent.InputTuple,
    DepositTokenEvent.OutputTuple,
    DepositTokenEvent.OutputObject
  >;
  getEvent(
    key: 'Initialized'
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'KeeperUpdated'
  ): TypedContractEvent<
    KeeperUpdatedEvent.InputTuple,
    KeeperUpdatedEvent.OutputTuple,
    KeeperUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'PartialBatchDeposit'
  ): TypedContractEvent<
    PartialBatchDepositEvent.InputTuple,
    PartialBatchDepositEvent.OutputTuple,
    PartialBatchDepositEvent.OutputObject
  >;
  getEvent(
    key: 'Paused'
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: 'SharesClaimed'
  ): TypedContractEvent<
    SharesClaimedEvent.InputTuple,
    SharesClaimedEvent.OutputTuple,
    SharesClaimedEvent.OutputObject
  >;
  getEvent(
    key: 'ThresholdsUpdated'
  ): TypedContractEvent<
    ThresholdsUpdatedEvent.InputTuple,
    ThresholdsUpdatedEvent.OutputTuple,
    ThresholdsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Unpaused'
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    'BatchDeposit(uint256,uint256,uint256,uint256)': TypedContractEvent<
      BatchDepositEvent.InputTuple,
      BatchDepositEvent.OutputTuple,
      BatchDepositEvent.OutputObject
    >;
    BatchDeposit: TypedContractEvent<
      BatchDepositEvent.InputTuple,
      BatchDepositEvent.OutputTuple,
      BatchDepositEvent.OutputObject
    >;

    'ClaimedAndRedeemed(address,address,uint256,uint256)': TypedContractEvent<
      ClaimedAndRedeemedEvent.InputTuple,
      ClaimedAndRedeemedEvent.OutputTuple,
      ClaimedAndRedeemedEvent.OutputObject
    >;
    ClaimedAndRedeemed: TypedContractEvent<
      ClaimedAndRedeemedEvent.InputTuple,
      ClaimedAndRedeemedEvent.OutputTuple,
      ClaimedAndRedeemedEvent.OutputObject
    >;

    'DepositCapUpdated(uint256)': TypedContractEvent<
      DepositCapUpdatedEvent.InputTuple,
      DepositCapUpdatedEvent.OutputTuple,
      DepositCapUpdatedEvent.OutputObject
    >;
    DepositCapUpdated: TypedContractEvent<
      DepositCapUpdatedEvent.InputTuple,
      DepositCapUpdatedEvent.OutputTuple,
      DepositCapUpdatedEvent.OutputObject
    >;

    'DepositToken(uint256,address,address,uint256,uint256)': TypedContractEvent<
      DepositTokenEvent.InputTuple,
      DepositTokenEvent.OutputTuple,
      DepositTokenEvent.OutputObject
    >;
    DepositToken: TypedContractEvent<
      DepositTokenEvent.InputTuple,
      DepositTokenEvent.OutputTuple,
      DepositTokenEvent.OutputObject
    >;

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'KeeperUpdated(address)': TypedContractEvent<
      KeeperUpdatedEvent.InputTuple,
      KeeperUpdatedEvent.OutputTuple,
      KeeperUpdatedEvent.OutputObject
    >;
    KeeperUpdated: TypedContractEvent<
      KeeperUpdatedEvent.InputTuple,
      KeeperUpdatedEvent.OutputTuple,
      KeeperUpdatedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'PartialBatchDeposit(uint256,uint256,uint256)': TypedContractEvent<
      PartialBatchDepositEvent.InputTuple,
      PartialBatchDepositEvent.OutputTuple,
      PartialBatchDepositEvent.OutputObject
    >;
    PartialBatchDeposit: TypedContractEvent<
      PartialBatchDepositEvent.InputTuple,
      PartialBatchDepositEvent.OutputTuple,
      PartialBatchDepositEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    'SharesClaimed(address,address,uint256)': TypedContractEvent<
      SharesClaimedEvent.InputTuple,
      SharesClaimedEvent.OutputTuple,
      SharesClaimedEvent.OutputObject
    >;
    SharesClaimed: TypedContractEvent<
      SharesClaimedEvent.InputTuple,
      SharesClaimedEvent.OutputTuple,
      SharesClaimedEvent.OutputObject
    >;

    'ThresholdsUpdated(uint256)': TypedContractEvent<
      ThresholdsUpdatedEvent.InputTuple,
      ThresholdsUpdatedEvent.OutputTuple,
      ThresholdsUpdatedEvent.OutputObject
    >;
    ThresholdsUpdated: TypedContractEvent<
      ThresholdsUpdatedEvent.InputTuple,
      ThresholdsUpdatedEvent.OutputTuple,
      ThresholdsUpdatedEvent.OutputObject
    >;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
