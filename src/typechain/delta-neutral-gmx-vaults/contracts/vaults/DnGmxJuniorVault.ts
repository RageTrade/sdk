/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export declare namespace DnGmxJuniorVaultManager {
  export type TokensStruct = {
    weth: PromiseOrValue<string>;
    wbtc: PromiseOrValue<string>;
    sGlp: PromiseOrValue<string>;
    usdc: PromiseOrValue<string>;
  };

  export type TokensStructOutput = [string, string, string, string] & {
    weth: string;
    wbtc: string;
    sGlp: string;
    usdc: string;
  };
}

export interface DnGmxJuniorVaultInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'claimVestedGmx()': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositCap()': FunctionFragment;
    'dnUsdcDeposited()': FunctionFragment;
    'getAdminParams()': FunctionFragment;
    'getCurrentBorrows()': FunctionFragment;
    'getHedgeParams()': FunctionFragment;
    'getMarketValue(uint256)': FunctionFragment;
    'getOptimalBorrows(uint256)': FunctionFragment;
    'getPrice(bool)': FunctionFragment;
    'getPriceX128()': FunctionFragment;
    'getRebalanceParams()': FunctionFragment;
    'getThresholds()': FunctionFragment;
    'getUsdcBorrowed()': FunctionFragment;
    'getVaultMarketValue()': FunctionFragment;
    'grantAllowances()': FunctionFragment;
    'harvestFees()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(string,string,address,address,(address,address,address,address),address)': FunctionFragment;
    'isValidRebalance()': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'rebalance()': FunctionFragment;
    'receiveFlashLoan(address[],uint256[],uint256[],bytes)': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAdminParams(address,address,uint256,address,uint16,uint24)': FunctionFragment;
    'setFeeParams(uint16,address)': FunctionFragment;
    'setHedgeParams(address,address,uint256,address)': FunctionFragment;
    'setRebalanceParams(uint32,uint16,uint16)': FunctionFragment;
    'setThresholds(uint16,uint16,uint16,uint128,uint128,uint128,uint128,uint128)': FunctionFragment;
    'stopVestAndStakeEsGmx()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'unstakeAndVestEsGmx()': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
    'withdrawFees()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'claimVestedGmx'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositCap'
      | 'dnUsdcDeposited'
      | 'getAdminParams'
      | 'getCurrentBorrows'
      | 'getHedgeParams'
      | 'getMarketValue'
      | 'getOptimalBorrows'
      | 'getPrice'
      | 'getPriceX128'
      | 'getRebalanceParams'
      | 'getThresholds'
      | 'getUsdcBorrowed'
      | 'getVaultMarketValue'
      | 'grantAllowances'
      | 'harvestFees'
      | 'increaseAllowance'
      | 'initialize'
      | 'isValidRebalance'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint'
      | 'name'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'rebalance'
      | 'receiveFlashLoan'
      | 'redeem'
      | 'renounceOwnership'
      | 'setAdminParams'
      | 'setFeeParams'
      | 'setHedgeParams'
      | 'setRebalanceParams'
      | 'setThresholds'
      | 'stopVestAndStakeEsGmx'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'unpause'
      | 'unstakeAndVestEsGmx'
      | 'withdraw'
      | 'withdrawFees'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'allowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimVestedGmx',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCap',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'dnUsdcDeposited',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getAdminParams',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentBorrows',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getHedgeParams',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarketValue',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getOptimalBorrows',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPrice',
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPriceX128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getRebalanceParams',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getThresholds',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getUsdcBorrowed',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultMarketValue',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'grantAllowances',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestFees',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      DnGmxJuniorVaultManager.TokensStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidRebalance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'maxDeposit',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxMint',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxRedeem',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxWithdraw',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'rebalance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'receiveFlashLoan',
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setAdminParams',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeParams',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setHedgeParams',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setRebalanceParams',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setThresholds',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'stopVestAndStakeEsGmx',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'unstakeAndVestEsGmx',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'claimVestedGmx',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'dnUsdcDeposited',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAdminParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentBorrows',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getHedgeParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOptimalBorrows',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRebalanceParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getThresholds',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUsdcBorrowed',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVaultMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'grantAllowances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isValidRebalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewRedeem',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'receiveFlashLoan',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAdminParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFeeParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setHedgeParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRebalanceParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setThresholds',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stopVestAndStakeEsGmx',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'unstakeAndVestEsGmx',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result;

  events: {
    'AdminParamsUpdated(address,address,uint256,address,uint16)': EventFragment;
    'AllowancesGranted()': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'BatchingManagerUpdated(address)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'DepositCapUpdated(uint256)': EventFragment;
    'DnGmxSeniorVaultUpdated(address)': EventFragment;
    'FeeParamsUpdated(uint256,address)': EventFragment;
    'FeesWithdrawn(uint256)': EventFragment;
    'HedgeParamsUpdated(address,address,uint256,address,address,address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'KeeperUpdated(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'RebalanceParamsUpdated(uint32,uint16,uint16)': EventFragment;
    'Rebalanced()': EventFragment;
    'ThresholdsUpdated(uint16,uint16,uint16,uint128,uint128,uint128,uint128,uint128)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
    'WithdrawFeeUpdated(uint256)': EventFragment;
    'GlpSwapped(uint256,uint256,bool)': EventFragment;
    'RewardsHarvested(uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'TokenSwapped(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AllowancesGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BatchingManagerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositCapUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DnGmxSeniorVaultUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeesWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HedgeParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RebalanceParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Rebalanced'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ThresholdsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawFeeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GlpSwapped'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsHarvested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenSwapped'): EventFragment;
}

export interface AdminParamsUpdatedEventObject {
  newKeeper: string;
  dnGmxSeniorVault: string;
  newDepositCap: BigNumber;
  batchingManager: string;
  withdrawFeeBps: number;
}
export type AdminParamsUpdatedEvent = TypedEvent<
  [string, string, BigNumber, string, number],
  AdminParamsUpdatedEventObject
>;

export type AdminParamsUpdatedEventFilter =
  TypedEventFilter<AdminParamsUpdatedEvent>;

export interface AllowancesGrantedEventObject {}
export type AllowancesGrantedEvent = TypedEvent<
  [],
  AllowancesGrantedEventObject
>;

export type AllowancesGrantedEventFilter =
  TypedEventFilter<AllowancesGrantedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BatchingManagerUpdatedEventObject {
  _batchingManager: string;
}
export type BatchingManagerUpdatedEvent = TypedEvent<
  [string],
  BatchingManagerUpdatedEventObject
>;

export type BatchingManagerUpdatedEventFilter =
  TypedEventFilter<BatchingManagerUpdatedEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositCapUpdatedEventObject {
  _newDepositCap: BigNumber;
}
export type DepositCapUpdatedEvent = TypedEvent<
  [BigNumber],
  DepositCapUpdatedEventObject
>;

export type DepositCapUpdatedEventFilter =
  TypedEventFilter<DepositCapUpdatedEvent>;

export interface DnGmxSeniorVaultUpdatedEventObject {
  _dnGmxSeniorVault: string;
}
export type DnGmxSeniorVaultUpdatedEvent = TypedEvent<
  [string],
  DnGmxSeniorVaultUpdatedEventObject
>;

export type DnGmxSeniorVaultUpdatedEventFilter =
  TypedEventFilter<DnGmxSeniorVaultUpdatedEvent>;

export interface FeeParamsUpdatedEventObject {
  feeBps: BigNumber;
  _newFeeRecipient: string;
}
export type FeeParamsUpdatedEvent = TypedEvent<
  [BigNumber, string],
  FeeParamsUpdatedEventObject
>;

export type FeeParamsUpdatedEventFilter =
  TypedEventFilter<FeeParamsUpdatedEvent>;

export interface FeesWithdrawnEventObject {
  feeAmount: BigNumber;
}
export type FeesWithdrawnEvent = TypedEvent<
  [BigNumber],
  FeesWithdrawnEventObject
>;

export type FeesWithdrawnEventFilter = TypedEventFilter<FeesWithdrawnEvent>;

export interface HedgeParamsUpdatedEventObject {
  vault: string;
  swapRouter: string;
  targetHealthFactor: BigNumber;
  aaveRewardsController: string;
  pool: string;
  oracle: string;
}
export type HedgeParamsUpdatedEvent = TypedEvent<
  [string, string, BigNumber, string, string, string],
  HedgeParamsUpdatedEventObject
>;

export type HedgeParamsUpdatedEventFilter =
  TypedEventFilter<HedgeParamsUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KeeperUpdatedEventObject {
  _newKeeper: string;
}
export type KeeperUpdatedEvent = TypedEvent<[string], KeeperUpdatedEventObject>;

export type KeeperUpdatedEventFilter = TypedEventFilter<KeeperUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RebalanceParamsUpdatedEventObject {
  rebalanceTimeThreshold: number;
  rebalanceDeltaThresholdBps: number;
  rebalanceHfThresholdBps: number;
}
export type RebalanceParamsUpdatedEvent = TypedEvent<
  [number, number, number],
  RebalanceParamsUpdatedEventObject
>;

export type RebalanceParamsUpdatedEventFilter =
  TypedEventFilter<RebalanceParamsUpdatedEvent>;

export interface RebalancedEventObject {}
export type RebalancedEvent = TypedEvent<[], RebalancedEventObject>;

export type RebalancedEventFilter = TypedEventFilter<RebalancedEvent>;

export interface ThresholdsUpdatedEventObject {
  slippageThresholdSwapBtcBps: number;
  slippageThresholdSwapEthBps: number;
  slippageThresholdGmxBps: number;
  usdcConversionThreshold: BigNumber;
  wethConversionThreshold: BigNumber;
  hedgeUsdcAmountThreshold: BigNumber;
  partialBtcHedgeUsdcAmountThreshold: BigNumber;
  partialEthHedgeUsdcAmountThreshold: BigNumber;
}
export type ThresholdsUpdatedEvent = TypedEvent<
  [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ThresholdsUpdatedEventObject
>;

export type ThresholdsUpdatedEventFilter =
  TypedEventFilter<ThresholdsUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawFeeUpdatedEventObject {
  _withdrawFeeBps: BigNumber;
}
export type WithdrawFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  WithdrawFeeUpdatedEventObject
>;

export type WithdrawFeeUpdatedEventFilter =
  TypedEventFilter<WithdrawFeeUpdatedEvent>;

export interface GlpSwappedEventObject {
  glpQuantity: BigNumber;
  usdcQuantity: BigNumber;
  fromGlpToUsdc: boolean;
}
export type GlpSwappedEvent = TypedEvent<
  [BigNumber, BigNumber, boolean],
  GlpSwappedEventObject
>;

export type GlpSwappedEventFilter = TypedEventFilter<GlpSwappedEvent>;

export interface RewardsHarvestedEventObject {
  wethHarvested: BigNumber;
  esGmxStaked: BigNumber;
  juniorVaultWeth: BigNumber;
  seniorVaultWeth: BigNumber;
  juniorVaultGlp: BigNumber;
  seniorVaultAUsdc: BigNumber;
}
export type RewardsHarvestedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  RewardsHarvestedEventObject
>;

export type RewardsHarvestedEventFilter =
  TypedEventFilter<RewardsHarvestedEvent>;

export interface TokenSwappedEventObject {
  fromToken: string;
  toToken: string;
  fromQuantity: BigNumber;
  toQuantity: BigNumber;
}
export type TokenSwappedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TokenSwappedEventObject
>;

export type TokenSwappedEventFilter = TypedEventFilter<TokenSwappedEvent>;

export interface DnGmxJuniorVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DnGmxJuniorVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimVestedGmx(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    dnUsdcDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAdminParams(overrides?: CallOverrides): Promise<
      [string, string, BigNumber, string, number, number] & {
        keeper: string;
        dnGmxSeniorVault: string;
        depositCap: BigNumber;
        batchingManager: string;
        withdrawFeeBps: number;
        feeTierWethWbtcPool: number;
      }
    >;

    getCurrentBorrows(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        currentBtcBorrow: BigNumber;
        currentEthBorrow: BigNumber;
      }
    >;

    getHedgeParams(overrides?: CallOverrides): Promise<
      [string, string, BigNumber, string] & {
        balancerVault: string;
        swapRouter: string;
        targetHealthFactor: BigNumber;
        aaveRewardsController: string;
      }
    >;

    getMarketValue(
      assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marketValue: BigNumber }>;

    getOptimalBorrows(
      glpDeposited: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        optimalBtcBorrow: BigNumber;
        optimalEthBorrow: BigNumber;
      }
    >;

    getPrice(
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceX128(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRebalanceParams(overrides?: CallOverrides): Promise<
      [number, number, number] & {
        rebalanceTimeThreshold: number;
        rebalanceDeltaThresholdBps: number;
        rebalanceHfThresholdBps: number;
      }
    >;

    getThresholds(overrides?: CallOverrides): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        slippageThresholdSwapBtcBps: number;
        slippageThresholdSwapEthBps: number;
        slippageThresholdGmxBps: number;
        usdcConversionThreshold: BigNumber;
        wethConversionThreshold: BigNumber;
        hedgeUsdcAmountThreshold: BigNumber;
        partialBtcHedgeUsdcAmountThreshold: BigNumber;
        partialEthHedgeUsdcAmountThreshold: BigNumber;
      }
    >;

    getUsdcBorrowed(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usdcAmount: BigNumber }>;

    getVaultMarketValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { vaultMarketValue: BigNumber }>;

    grantAllowances(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harvestFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _swapRouter: PromiseOrValue<string>,
      _rewardRouter: PromiseOrValue<string>,
      _tokens: DnGmxJuniorVaultManager.TokensStruct,
      _poolAddressesProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isValidRebalance(overrides?: CallOverrides): Promise<[boolean]>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveFlashLoan(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      feeAmounts: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdminParams(
      newKeeper: PromiseOrValue<string>,
      dnGmxSeniorVault: PromiseOrValue<string>,
      newDepositCap: PromiseOrValue<BigNumberish>,
      batchingManager: PromiseOrValue<string>,
      withdrawFeeBps: PromiseOrValue<BigNumberish>,
      feeTierWethWbtcPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeParams(
      _feeBps: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHedgeParams(
      vault: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      targetHealthFactor: PromiseOrValue<BigNumberish>,
      aaveRewardsController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRebalanceParams(
      rebalanceTimeThreshold: PromiseOrValue<BigNumberish>,
      rebalanceDeltaThresholdBps: PromiseOrValue<BigNumberish>,
      rebalanceHfThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setThresholds(
      slippageThresholdSwapBtcBps: PromiseOrValue<BigNumberish>,
      slippageThresholdSwapEthBps: PromiseOrValue<BigNumberish>,
      slippageThresholdGmxBps: PromiseOrValue<BigNumberish>,
      usdcConversionThreshold: PromiseOrValue<BigNumberish>,
      wethConversionThreshold: PromiseOrValue<BigNumberish>,
      hedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      partialBtcHedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      partialEthHedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopVestAndStakeEsGmx(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeAndVestEsGmx(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimVestedGmx(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  convertToAssets(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositCap(overrides?: CallOverrides): Promise<BigNumber>;

  dnUsdcDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  getAdminParams(overrides?: CallOverrides): Promise<
    [string, string, BigNumber, string, number, number] & {
      keeper: string;
      dnGmxSeniorVault: string;
      depositCap: BigNumber;
      batchingManager: string;
      withdrawFeeBps: number;
      feeTierWethWbtcPool: number;
    }
  >;

  getCurrentBorrows(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      currentBtcBorrow: BigNumber;
      currentEthBorrow: BigNumber;
    }
  >;

  getHedgeParams(overrides?: CallOverrides): Promise<
    [string, string, BigNumber, string] & {
      balancerVault: string;
      swapRouter: string;
      targetHealthFactor: BigNumber;
      aaveRewardsController: string;
    }
  >;

  getMarketValue(
    assetAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOptimalBorrows(
    glpDeposited: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      optimalBtcBorrow: BigNumber;
      optimalEthBorrow: BigNumber;
    }
  >;

  getPrice(
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

  getRebalanceParams(overrides?: CallOverrides): Promise<
    [number, number, number] & {
      rebalanceTimeThreshold: number;
      rebalanceDeltaThresholdBps: number;
      rebalanceHfThresholdBps: number;
    }
  >;

  getThresholds(overrides?: CallOverrides): Promise<
    [
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      slippageThresholdSwapBtcBps: number;
      slippageThresholdSwapEthBps: number;
      slippageThresholdGmxBps: number;
      usdcConversionThreshold: BigNumber;
      wethConversionThreshold: BigNumber;
      hedgeUsdcAmountThreshold: BigNumber;
      partialBtcHedgeUsdcAmountThreshold: BigNumber;
      partialEthHedgeUsdcAmountThreshold: BigNumber;
    }
  >;

  getUsdcBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

  grantAllowances(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harvestFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _swapRouter: PromiseOrValue<string>,
    _rewardRouter: PromiseOrValue<string>,
    _tokens: DnGmxJuniorVaultManager.TokensStruct,
    _poolAddressesProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isValidRebalance(overrides?: CallOverrides): Promise<boolean>;

  maxDeposit(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxMint(
    receiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxRedeem(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxWithdraw(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    shares: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  previewDeposit(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rebalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveFlashLoan(
    tokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    feeAmounts: PromiseOrValue<BigNumberish>[],
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeem(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdminParams(
    newKeeper: PromiseOrValue<string>,
    dnGmxSeniorVault: PromiseOrValue<string>,
    newDepositCap: PromiseOrValue<BigNumberish>,
    batchingManager: PromiseOrValue<string>,
    withdrawFeeBps: PromiseOrValue<BigNumberish>,
    feeTierWethWbtcPool: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeParams(
    _feeBps: PromiseOrValue<BigNumberish>,
    _feeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHedgeParams(
    vault: PromiseOrValue<string>,
    swapRouter: PromiseOrValue<string>,
    targetHealthFactor: PromiseOrValue<BigNumberish>,
    aaveRewardsController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRebalanceParams(
    rebalanceTimeThreshold: PromiseOrValue<BigNumberish>,
    rebalanceDeltaThresholdBps: PromiseOrValue<BigNumberish>,
    rebalanceHfThresholdBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setThresholds(
    slippageThresholdSwapBtcBps: PromiseOrValue<BigNumberish>,
    slippageThresholdSwapEthBps: PromiseOrValue<BigNumberish>,
    slippageThresholdGmxBps: PromiseOrValue<BigNumberish>,
    usdcConversionThreshold: PromiseOrValue<BigNumberish>,
    wethConversionThreshold: PromiseOrValue<BigNumberish>,
    hedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
    partialBtcHedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
    partialEthHedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopVestAndStakeEsGmx(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeAndVestEsGmx(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimVestedGmx(overrides?: CallOverrides): Promise<void>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    dnUsdcDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    getAdminParams(overrides?: CallOverrides): Promise<
      [string, string, BigNumber, string, number, number] & {
        keeper: string;
        dnGmxSeniorVault: string;
        depositCap: BigNumber;
        batchingManager: string;
        withdrawFeeBps: number;
        feeTierWethWbtcPool: number;
      }
    >;

    getCurrentBorrows(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        currentBtcBorrow: BigNumber;
        currentEthBorrow: BigNumber;
      }
    >;

    getHedgeParams(overrides?: CallOverrides): Promise<
      [string, string, BigNumber, string] & {
        balancerVault: string;
        swapRouter: string;
        targetHealthFactor: BigNumber;
        aaveRewardsController: string;
      }
    >;

    getMarketValue(
      assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptimalBorrows(
      glpDeposited: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        optimalBtcBorrow: BigNumber;
        optimalEthBorrow: BigNumber;
      }
    >;

    getPrice(
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

    getRebalanceParams(overrides?: CallOverrides): Promise<
      [number, number, number] & {
        rebalanceTimeThreshold: number;
        rebalanceDeltaThresholdBps: number;
        rebalanceHfThresholdBps: number;
      }
    >;

    getThresholds(overrides?: CallOverrides): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        slippageThresholdSwapBtcBps: number;
        slippageThresholdSwapEthBps: number;
        slippageThresholdGmxBps: number;
        usdcConversionThreshold: BigNumber;
        wethConversionThreshold: BigNumber;
        hedgeUsdcAmountThreshold: BigNumber;
        partialBtcHedgeUsdcAmountThreshold: BigNumber;
        partialEthHedgeUsdcAmountThreshold: BigNumber;
      }
    >;

    getUsdcBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

    grantAllowances(overrides?: CallOverrides): Promise<void>;

    harvestFees(overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _swapRouter: PromiseOrValue<string>,
      _rewardRouter: PromiseOrValue<string>,
      _tokens: DnGmxJuniorVaultManager.TokensStruct,
      _poolAddressesProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isValidRebalance(overrides?: CallOverrides): Promise<boolean>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    receiveFlashLoan(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      feeAmounts: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminParams(
      newKeeper: PromiseOrValue<string>,
      dnGmxSeniorVault: PromiseOrValue<string>,
      newDepositCap: PromiseOrValue<BigNumberish>,
      batchingManager: PromiseOrValue<string>,
      withdrawFeeBps: PromiseOrValue<BigNumberish>,
      feeTierWethWbtcPool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeParams(
      _feeBps: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHedgeParams(
      vault: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      targetHealthFactor: PromiseOrValue<BigNumberish>,
      aaveRewardsController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalanceParams(
      rebalanceTimeThreshold: PromiseOrValue<BigNumberish>,
      rebalanceDeltaThresholdBps: PromiseOrValue<BigNumberish>,
      rebalanceHfThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setThresholds(
      slippageThresholdSwapBtcBps: PromiseOrValue<BigNumberish>,
      slippageThresholdSwapEthBps: PromiseOrValue<BigNumberish>,
      slippageThresholdGmxBps: PromiseOrValue<BigNumberish>,
      usdcConversionThreshold: PromiseOrValue<BigNumberish>,
      wethConversionThreshold: PromiseOrValue<BigNumberish>,
      hedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      partialBtcHedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      partialEthHedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stopVestAndStakeEsGmx(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstakeAndVestEsGmx(overrides?: CallOverrides): Promise<void>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFees(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AdminParamsUpdated(address,address,uint256,address,uint16)'(
      newKeeper?: null,
      dnGmxSeniorVault?: null,
      newDepositCap?: null,
      batchingManager?: null,
      withdrawFeeBps?: null
    ): AdminParamsUpdatedEventFilter;
    AdminParamsUpdated(
      newKeeper?: null,
      dnGmxSeniorVault?: null,
      newDepositCap?: null,
      batchingManager?: null,
      withdrawFeeBps?: null
    ): AdminParamsUpdatedEventFilter;

    'AllowancesGranted()'(): AllowancesGrantedEventFilter;
    AllowancesGranted(): AllowancesGrantedEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    'BatchingManagerUpdated(address)'(
      _batchingManager?: null
    ): BatchingManagerUpdatedEventFilter;
    BatchingManagerUpdated(
      _batchingManager?: null
    ): BatchingManagerUpdatedEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    'DepositCapUpdated(uint256)'(
      _newDepositCap?: null
    ): DepositCapUpdatedEventFilter;
    DepositCapUpdated(_newDepositCap?: null): DepositCapUpdatedEventFilter;

    'DnGmxSeniorVaultUpdated(address)'(
      _dnGmxSeniorVault?: null
    ): DnGmxSeniorVaultUpdatedEventFilter;
    DnGmxSeniorVaultUpdated(
      _dnGmxSeniorVault?: null
    ): DnGmxSeniorVaultUpdatedEventFilter;

    'FeeParamsUpdated(uint256,address)'(
      feeBps?: null,
      _newFeeRecipient?: null
    ): FeeParamsUpdatedEventFilter;
    FeeParamsUpdated(
      feeBps?: null,
      _newFeeRecipient?: null
    ): FeeParamsUpdatedEventFilter;

    'FeesWithdrawn(uint256)'(feeAmount?: null): FeesWithdrawnEventFilter;
    FeesWithdrawn(feeAmount?: null): FeesWithdrawnEventFilter;

    'HedgeParamsUpdated(address,address,uint256,address,address,address)'(
      vault?: null,
      swapRouter?: null,
      targetHealthFactor?: null,
      aaveRewardsController?: null,
      pool?: null,
      oracle?: null
    ): HedgeParamsUpdatedEventFilter;
    HedgeParamsUpdated(
      vault?: null,
      swapRouter?: null,
      targetHealthFactor?: null,
      aaveRewardsController?: null,
      pool?: null,
      oracle?: null
    ): HedgeParamsUpdatedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'KeeperUpdated(address)'(_newKeeper?: null): KeeperUpdatedEventFilter;
    KeeperUpdated(_newKeeper?: null): KeeperUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'RebalanceParamsUpdated(uint32,uint16,uint16)'(
      rebalanceTimeThreshold?: null,
      rebalanceDeltaThresholdBps?: null,
      rebalanceHfThresholdBps?: null
    ): RebalanceParamsUpdatedEventFilter;
    RebalanceParamsUpdated(
      rebalanceTimeThreshold?: null,
      rebalanceDeltaThresholdBps?: null,
      rebalanceHfThresholdBps?: null
    ): RebalanceParamsUpdatedEventFilter;

    'Rebalanced()'(): RebalancedEventFilter;
    Rebalanced(): RebalancedEventFilter;

    'ThresholdsUpdated(uint16,uint16,uint16,uint128,uint128,uint128,uint128,uint128)'(
      slippageThresholdSwapBtcBps?: null,
      slippageThresholdSwapEthBps?: null,
      slippageThresholdGmxBps?: null,
      usdcConversionThreshold?: null,
      wethConversionThreshold?: null,
      hedgeUsdcAmountThreshold?: null,
      partialBtcHedgeUsdcAmountThreshold?: null,
      partialEthHedgeUsdcAmountThreshold?: null
    ): ThresholdsUpdatedEventFilter;
    ThresholdsUpdated(
      slippageThresholdSwapBtcBps?: null,
      slippageThresholdSwapEthBps?: null,
      slippageThresholdGmxBps?: null,
      usdcConversionThreshold?: null,
      wethConversionThreshold?: null,
      hedgeUsdcAmountThreshold?: null,
      partialBtcHedgeUsdcAmountThreshold?: null,
      partialEthHedgeUsdcAmountThreshold?: null
    ): ThresholdsUpdatedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;

    'WithdrawFeeUpdated(uint256)'(
      _withdrawFeeBps?: null
    ): WithdrawFeeUpdatedEventFilter;
    WithdrawFeeUpdated(_withdrawFeeBps?: null): WithdrawFeeUpdatedEventFilter;

    'GlpSwapped(uint256,uint256,bool)'(
      glpQuantity?: null,
      usdcQuantity?: null,
      fromGlpToUsdc?: null
    ): GlpSwappedEventFilter;
    GlpSwapped(
      glpQuantity?: null,
      usdcQuantity?: null,
      fromGlpToUsdc?: null
    ): GlpSwappedEventFilter;

    'RewardsHarvested(uint256,uint256,uint256,uint256,uint256,uint256)'(
      wethHarvested?: null,
      esGmxStaked?: null,
      juniorVaultWeth?: null,
      seniorVaultWeth?: null,
      juniorVaultGlp?: null,
      seniorVaultAUsdc?: null
    ): RewardsHarvestedEventFilter;
    RewardsHarvested(
      wethHarvested?: null,
      esGmxStaked?: null,
      juniorVaultWeth?: null,
      seniorVaultWeth?: null,
      juniorVaultGlp?: null,
      seniorVaultAUsdc?: null
    ): RewardsHarvestedEventFilter;

    'TokenSwapped(address,address,uint256,uint256)'(
      fromToken?: PromiseOrValue<string> | null,
      toToken?: PromiseOrValue<string> | null,
      fromQuantity?: null,
      toQuantity?: null
    ): TokenSwappedEventFilter;
    TokenSwapped(
      fromToken?: PromiseOrValue<string> | null,
      toToken?: PromiseOrValue<string> | null,
      fromQuantity?: null,
      toQuantity?: null
    ): TokenSwappedEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimVestedGmx(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    dnUsdcDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    getAdminParams(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    getHedgeParams(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketValue(
      assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptimalBorrows(
      glpDeposited: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

    getRebalanceParams(overrides?: CallOverrides): Promise<BigNumber>;

    getThresholds(overrides?: CallOverrides): Promise<BigNumber>;

    getUsdcBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

    grantAllowances(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harvestFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _swapRouter: PromiseOrValue<string>,
      _rewardRouter: PromiseOrValue<string>,
      _tokens: DnGmxJuniorVaultManager.TokensStruct,
      _poolAddressesProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isValidRebalance(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveFlashLoan(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      feeAmounts: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdminParams(
      newKeeper: PromiseOrValue<string>,
      dnGmxSeniorVault: PromiseOrValue<string>,
      newDepositCap: PromiseOrValue<BigNumberish>,
      batchingManager: PromiseOrValue<string>,
      withdrawFeeBps: PromiseOrValue<BigNumberish>,
      feeTierWethWbtcPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeParams(
      _feeBps: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHedgeParams(
      vault: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      targetHealthFactor: PromiseOrValue<BigNumberish>,
      aaveRewardsController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRebalanceParams(
      rebalanceTimeThreshold: PromiseOrValue<BigNumberish>,
      rebalanceDeltaThresholdBps: PromiseOrValue<BigNumberish>,
      rebalanceHfThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setThresholds(
      slippageThresholdSwapBtcBps: PromiseOrValue<BigNumberish>,
      slippageThresholdSwapEthBps: PromiseOrValue<BigNumberish>,
      slippageThresholdGmxBps: PromiseOrValue<BigNumberish>,
      usdcConversionThreshold: PromiseOrValue<BigNumberish>,
      wethConversionThreshold: PromiseOrValue<BigNumberish>,
      hedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      partialBtcHedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      partialEthHedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopVestAndStakeEsGmx(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeAndVestEsGmx(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimVestedGmx(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dnUsdcDeposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAdminParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHedgeParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketValue(
      assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOptimalBorrows(
      glpDeposited: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceX128(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRebalanceParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThresholds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUsdcBorrowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultMarketValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAllowances(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harvestFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _swapRouter: PromiseOrValue<string>,
      _rewardRouter: PromiseOrValue<string>,
      _tokens: DnGmxJuniorVaultManager.TokensStruct,
      _poolAddressesProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isValidRebalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveFlashLoan(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      feeAmounts: PromiseOrValue<BigNumberish>[],
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdminParams(
      newKeeper: PromiseOrValue<string>,
      dnGmxSeniorVault: PromiseOrValue<string>,
      newDepositCap: PromiseOrValue<BigNumberish>,
      batchingManager: PromiseOrValue<string>,
      withdrawFeeBps: PromiseOrValue<BigNumberish>,
      feeTierWethWbtcPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeParams(
      _feeBps: PromiseOrValue<BigNumberish>,
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHedgeParams(
      vault: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      targetHealthFactor: PromiseOrValue<BigNumberish>,
      aaveRewardsController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRebalanceParams(
      rebalanceTimeThreshold: PromiseOrValue<BigNumberish>,
      rebalanceDeltaThresholdBps: PromiseOrValue<BigNumberish>,
      rebalanceHfThresholdBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setThresholds(
      slippageThresholdSwapBtcBps: PromiseOrValue<BigNumberish>,
      slippageThresholdSwapEthBps: PromiseOrValue<BigNumberish>,
      slippageThresholdGmxBps: PromiseOrValue<BigNumberish>,
      usdcConversionThreshold: PromiseOrValue<BigNumberish>,
      wethConversionThreshold: PromiseOrValue<BigNumberish>,
      hedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      partialBtcHedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      partialEthHedgeUsdcAmountThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopVestAndStakeEsGmx(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAndVestEsGmx(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
