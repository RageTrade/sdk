/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export declare namespace IDnGmxBatchingManager {
  export type RoundDepositStruct = {
    totalUsdc: PromiseOrValue<BigNumberish>;
    totalShares: PromiseOrValue<BigNumberish>;
  };

  export type RoundDepositStructOutput = [BigNumber, BigNumber] & {
    totalUsdc: BigNumber;
    totalShares: BigNumber;
  };

  export type UserDepositStruct = {
    round: PromiseOrValue<BigNumberish>;
    usdcBalance: PromiseOrValue<BigNumberish>;
    unclaimedShares: PromiseOrValue<BigNumberish>;
  };

  export type UserDepositStructOutput = [BigNumber, BigNumber, BigNumber] & {
    round: BigNumber;
    usdcBalance: BigNumber;
    unclaimedShares: BigNumber;
  };
}

export interface DnGmxBatchingManagerInterface extends utils.Interface {
  functions: {
    'claim(address,uint256)': FunctionFragment;
    'claimAndRedeem(address)': FunctionFragment;
    'currentRound()': FunctionFragment;
    'depositCap()': FunctionFragment;
    'depositUsdc(uint256,address)': FunctionFragment;
    'dnGmxJuniorVault()': FunctionFragment;
    'dnGmxJuniorVaultGlpBalance()': FunctionFragment;
    'executeBatch(uint128)': FunctionFragment;
    'grantAllowances()': FunctionFragment;
    'initialize(address,address,address,address,address,address)': FunctionFragment;
    'keeper()': FunctionFragment;
    'minUsdcConversionAmount()': FunctionFragment;
    'owner()': FunctionFragment;
    'pauseDeposit()': FunctionFragment;
    'paused()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rescueFees()': FunctionFragment;
    'roundDeposits(uint256)': FunctionFragment;
    'roundGlpDepositPending()': FunctionFragment;
    'roundGlpStaked()': FunctionFragment;
    'roundSharesMinted()': FunctionFragment;
    'roundUsdcBalance()': FunctionFragment;
    'setDepositCap(uint256)': FunctionFragment;
    'setKeeper(address)': FunctionFragment;
    'setParamsV1(address,address)': FunctionFragment;
    'setThresholds(uint256,uint256)': FunctionFragment;
    'slippageThresholdGmxBps()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unclaimedShares(address)': FunctionFragment;
    'unpauseDeposit()': FunctionFragment;
    'usdcBalance(address)': FunctionFragment;
    'userDeposits(address)': FunctionFragment;
    'vaultBatchingState()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'claim'
      | 'claimAndRedeem'
      | 'currentRound'
      | 'depositCap'
      | 'depositUsdc'
      | 'dnGmxJuniorVault'
      | 'dnGmxJuniorVaultGlpBalance'
      | 'executeBatch'
      | 'grantAllowances'
      | 'initialize'
      | 'keeper'
      | 'minUsdcConversionAmount'
      | 'owner'
      | 'pauseDeposit'
      | 'paused'
      | 'renounceOwnership'
      | 'rescueFees'
      | 'roundDeposits'
      | 'roundGlpDepositPending'
      | 'roundGlpStaked'
      | 'roundSharesMinted'
      | 'roundUsdcBalance'
      | 'setDepositCap'
      | 'setKeeper'
      | 'setParamsV1'
      | 'setThresholds'
      | 'slippageThresholdGmxBps'
      | 'transferOwnership'
      | 'unclaimedShares'
      | 'unpauseDeposit'
      | 'usdcBalance'
      | 'userDeposits'
      | 'vaultBatchingState'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'claim',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimAndRedeem',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'currentRound',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCap',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'depositUsdc',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'dnGmxJuniorVault',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'dnGmxJuniorVaultGlpBalance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'executeBatch',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'grantAllowances',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'minUsdcConversionAmount',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pauseDeposit',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rescueFees',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'roundDeposits',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'roundGlpDepositPending',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'roundGlpStaked',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'roundSharesMinted',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'roundUsdcBalance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositCap',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setKeeper',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setParamsV1',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setThresholds',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'slippageThresholdGmxBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'unclaimedShares',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'unpauseDeposit',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'usdcBalance',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'userDeposits',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'vaultBatchingState',
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'claimAndRedeem',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentRound',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'depositCap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositUsdc',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dnGmxJuniorVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dnGmxJuniorVaultGlpBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeBatch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'grantAllowances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'minUsdcConversionAmount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pauseDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'rescueFees', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'roundDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'roundGlpDepositPending',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'roundGlpStaked',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'roundSharesMinted',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'roundUsdcBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDepositCap',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setKeeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setParamsV1',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setThresholds',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'slippageThresholdGmxBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unclaimedShares',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unpauseDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'usdcBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'vaultBatchingState',
    data: BytesLike
  ): Result;

  events: {
    'BatchDeposit(uint256,uint256,uint256,uint256)': EventFragment;
    'BatchStake(uint256,uint256,uint256)': EventFragment;
    'ClaimedAndRedeemed(address,address,uint256,uint256)': EventFragment;
    'DepositCapUpdated(uint256)': EventFragment;
    'DepositToken(uint256,address,address,uint256,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'KeeperUpdated(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'ParamsV1Updated(address,address)': EventFragment;
    'PartialBatchDeposit(uint256,uint256,uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'SharesClaimed(address,address,uint256)': EventFragment;
    'ThresholdsUpdated(uint256,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BatchDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BatchStake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimedAndRedeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositCapUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ParamsV1Updated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PartialBatchDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SharesClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ThresholdsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface BatchDepositEventObject {
  round: BigNumber;
  userUsdcAmount: BigNumber;
  userGlpAmount: BigNumber;
  userShareAmount: BigNumber;
}
export type BatchDepositEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  BatchDepositEventObject
>;

export type BatchDepositEventFilter = TypedEventFilter<BatchDepositEvent>;

export interface BatchStakeEventObject {
  round: BigNumber;
  userUsdcAmount: BigNumber;
  userGlpAmount: BigNumber;
}
export type BatchStakeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  BatchStakeEventObject
>;

export type BatchStakeEventFilter = TypedEventFilter<BatchStakeEvent>;

export interface ClaimedAndRedeemedEventObject {
  claimer: string;
  receiver: string;
  shares: BigNumber;
  assetsReceived: BigNumber;
}
export type ClaimedAndRedeemedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ClaimedAndRedeemedEventObject
>;

export type ClaimedAndRedeemedEventFilter =
  TypedEventFilter<ClaimedAndRedeemedEvent>;

export interface DepositCapUpdatedEventObject {
  newDepositCap: BigNumber;
}
export type DepositCapUpdatedEvent = TypedEvent<
  [BigNumber],
  DepositCapUpdatedEventObject
>;

export type DepositCapUpdatedEventFilter =
  TypedEventFilter<DepositCapUpdatedEvent>;

export interface DepositTokenEventObject {
  round: BigNumber;
  token: string;
  receiver: string;
  amount: BigNumber;
  glpStaked: BigNumber;
}
export type DepositTokenEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  DepositTokenEventObject
>;

export type DepositTokenEventFilter = TypedEventFilter<DepositTokenEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KeeperUpdatedEventObject {
  newKeeper: string;
}
export type KeeperUpdatedEvent = TypedEvent<[string], KeeperUpdatedEventObject>;

export type KeeperUpdatedEventFilter = TypedEventFilter<KeeperUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ParamsV1UpdatedEventObject {
  rewardsHarvestingRouter: string;
  weth: string;
}
export type ParamsV1UpdatedEvent = TypedEvent<
  [string, string],
  ParamsV1UpdatedEventObject
>;

export type ParamsV1UpdatedEventFilter = TypedEventFilter<ParamsV1UpdatedEvent>;

export interface PartialBatchDepositEventObject {
  round: BigNumber;
  partialGlpAmount: BigNumber;
  partialShareAmount: BigNumber;
}
export type PartialBatchDepositEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PartialBatchDepositEventObject
>;

export type PartialBatchDepositEventFilter =
  TypedEventFilter<PartialBatchDepositEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SharesClaimedEventObject {
  from: string;
  receiver: string;
  claimAmount: BigNumber;
}
export type SharesClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  SharesClaimedEventObject
>;

export type SharesClaimedEventFilter = TypedEventFilter<SharesClaimedEvent>;

export interface ThresholdsUpdatedEventObject {
  newSlippageThresholdGmx: BigNumber;
  minUsdcConversionAmount: BigNumber;
}
export type ThresholdsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ThresholdsUpdatedEventObject
>;

export type ThresholdsUpdatedEventFilter =
  TypedEventFilter<ThresholdsUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface DnGmxBatchingManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DnGmxBatchingManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAndRedeem(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositUsdc(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dnGmxJuniorVault(overrides?: CallOverrides): Promise<[string]>;

    dnGmxJuniorVaultGlpBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeBatch(
      usdcAmountToConvert: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantAllowances(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _sGlp: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      _rewardRouter: PromiseOrValue<string>,
      _glpManager: PromiseOrValue<string>,
      _dnGmxJuniorVault: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    minUsdcConversionAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roundDeposits(
      round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IDnGmxBatchingManager.RoundDepositStructOutput]>;

    roundGlpDepositPending(overrides?: CallOverrides): Promise<[BigNumber]>;

    roundGlpStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    roundSharesMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    roundUsdcBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDepositCap(
      _depositCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setParamsV1(
      _weth: PromiseOrValue<string>,
      _rewardsHarvestingRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setThresholds(
      _slippageThresholdGmxBps: PromiseOrValue<BigNumberish>,
      _minUsdcConversionAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slippageThresholdGmxBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unclaimedShares(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    unpauseDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdcBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    userDeposits(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IDnGmxBatchingManager.UserDepositStructOutput]>;

    vaultBatchingState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        currentRound: BigNumber;
        roundGlpDepositPending: BigNumber;
        roundSharesMinted: BigNumber;
        roundGlpStaked: BigNumber;
        roundUsdcBalance: BigNumber;
      }
    >;
  };

  claim(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAndRedeem(
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  depositCap(overrides?: CallOverrides): Promise<BigNumber>;

  depositUsdc(
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dnGmxJuniorVault(overrides?: CallOverrides): Promise<string>;

  dnGmxJuniorVaultGlpBalance(overrides?: CallOverrides): Promise<BigNumber>;

  executeBatch(
    usdcAmountToConvert: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantAllowances(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _sGlp: PromiseOrValue<string>,
    _usdc: PromiseOrValue<string>,
    _rewardRouter: PromiseOrValue<string>,
    _glpManager: PromiseOrValue<string>,
    _dnGmxJuniorVault: PromiseOrValue<string>,
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  keeper(overrides?: CallOverrides): Promise<string>;

  minUsdcConversionAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseDeposit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roundDeposits(
    round: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IDnGmxBatchingManager.RoundDepositStructOutput>;

  roundGlpDepositPending(overrides?: CallOverrides): Promise<BigNumber>;

  roundGlpStaked(overrides?: CallOverrides): Promise<BigNumber>;

  roundSharesMinted(overrides?: CallOverrides): Promise<BigNumber>;

  roundUsdcBalance(overrides?: CallOverrides): Promise<BigNumber>;

  setDepositCap(
    _depositCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setParamsV1(
    _weth: PromiseOrValue<string>,
    _rewardsHarvestingRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setThresholds(
    _slippageThresholdGmxBps: PromiseOrValue<BigNumberish>,
    _minUsdcConversionAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slippageThresholdGmxBps(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unclaimedShares(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpauseDeposit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdcBalance(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userDeposits(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IDnGmxBatchingManager.UserDepositStructOutput>;

  vaultBatchingState(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      currentRound: BigNumber;
      roundGlpDepositPending: BigNumber;
      roundSharesMinted: BigNumber;
      roundGlpStaked: BigNumber;
      roundUsdcBalance: BigNumber;
    }
  >;

  callStatic: {
    claim(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAndRedeem(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    depositUsdc(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dnGmxJuniorVault(overrides?: CallOverrides): Promise<string>;

    dnGmxJuniorVaultGlpBalance(overrides?: CallOverrides): Promise<BigNumber>;

    executeBatch(
      usdcAmountToConvert: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantAllowances(overrides?: CallOverrides): Promise<void>;

    initialize(
      _sGlp: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      _rewardRouter: PromiseOrValue<string>,
      _glpManager: PromiseOrValue<string>,
      _dnGmxJuniorVault: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    keeper(overrides?: CallOverrides): Promise<string>;

    minUsdcConversionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseDeposit(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueFees(overrides?: CallOverrides): Promise<void>;

    roundDeposits(
      round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IDnGmxBatchingManager.RoundDepositStructOutput>;

    roundGlpDepositPending(overrides?: CallOverrides): Promise<BigNumber>;

    roundGlpStaked(overrides?: CallOverrides): Promise<BigNumber>;

    roundSharesMinted(overrides?: CallOverrides): Promise<BigNumber>;

    roundUsdcBalance(overrides?: CallOverrides): Promise<BigNumber>;

    setDepositCap(
      _depositCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setParamsV1(
      _weth: PromiseOrValue<string>,
      _rewardsHarvestingRouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setThresholds(
      _slippageThresholdGmxBps: PromiseOrValue<BigNumberish>,
      _minUsdcConversionAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    slippageThresholdGmxBps(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unclaimedShares(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseDeposit(overrides?: CallOverrides): Promise<void>;

    usdcBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDeposits(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IDnGmxBatchingManager.UserDepositStructOutput>;

    vaultBatchingState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        currentRound: BigNumber;
        roundGlpDepositPending: BigNumber;
        roundSharesMinted: BigNumber;
        roundGlpStaked: BigNumber;
        roundUsdcBalance: BigNumber;
      }
    >;
  };

  filters: {
    'BatchDeposit(uint256,uint256,uint256,uint256)'(
      round?: PromiseOrValue<BigNumberish> | null,
      userUsdcAmount?: null,
      userGlpAmount?: null,
      userShareAmount?: null
    ): BatchDepositEventFilter;
    BatchDeposit(
      round?: PromiseOrValue<BigNumberish> | null,
      userUsdcAmount?: null,
      userGlpAmount?: null,
      userShareAmount?: null
    ): BatchDepositEventFilter;

    'BatchStake(uint256,uint256,uint256)'(
      round?: PromiseOrValue<BigNumberish> | null,
      userUsdcAmount?: null,
      userGlpAmount?: null
    ): BatchStakeEventFilter;
    BatchStake(
      round?: PromiseOrValue<BigNumberish> | null,
      userUsdcAmount?: null,
      userGlpAmount?: null
    ): BatchStakeEventFilter;

    'ClaimedAndRedeemed(address,address,uint256,uint256)'(
      claimer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      shares?: null,
      assetsReceived?: null
    ): ClaimedAndRedeemedEventFilter;
    ClaimedAndRedeemed(
      claimer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      shares?: null,
      assetsReceived?: null
    ): ClaimedAndRedeemedEventFilter;

    'DepositCapUpdated(uint256)'(
      newDepositCap?: null
    ): DepositCapUpdatedEventFilter;
    DepositCapUpdated(newDepositCap?: null): DepositCapUpdatedEventFilter;

    'DepositToken(uint256,address,address,uint256,uint256)'(
      round?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      glpStaked?: null
    ): DepositTokenEventFilter;
    DepositToken(
      round?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      glpStaked?: null
    ): DepositTokenEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'KeeperUpdated(address)'(newKeeper?: null): KeeperUpdatedEventFilter;
    KeeperUpdated(newKeeper?: null): KeeperUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'ParamsV1Updated(address,address)'(
      rewardsHarvestingRouter?: PromiseOrValue<string> | null,
      weth?: null
    ): ParamsV1UpdatedEventFilter;
    ParamsV1Updated(
      rewardsHarvestingRouter?: PromiseOrValue<string> | null,
      weth?: null
    ): ParamsV1UpdatedEventFilter;

    'PartialBatchDeposit(uint256,uint256,uint256)'(
      round?: PromiseOrValue<BigNumberish> | null,
      partialGlpAmount?: null,
      partialShareAmount?: null
    ): PartialBatchDepositEventFilter;
    PartialBatchDeposit(
      round?: PromiseOrValue<BigNumberish> | null,
      partialGlpAmount?: null,
      partialShareAmount?: null
    ): PartialBatchDepositEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'SharesClaimed(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      claimAmount?: null
    ): SharesClaimedEventFilter;
    SharesClaimed(
      from?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      claimAmount?: null
    ): SharesClaimedEventFilter;

    'ThresholdsUpdated(uint256,uint256)'(
      newSlippageThresholdGmx?: null,
      minUsdcConversionAmount?: null
    ): ThresholdsUpdatedEventFilter;
    ThresholdsUpdated(
      newSlippageThresholdGmx?: null,
      minUsdcConversionAmount?: null
    ): ThresholdsUpdatedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    claim(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAndRedeem(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    depositUsdc(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dnGmxJuniorVault(overrides?: CallOverrides): Promise<BigNumber>;

    dnGmxJuniorVaultGlpBalance(overrides?: CallOverrides): Promise<BigNumber>;

    executeBatch(
      usdcAmountToConvert: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantAllowances(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _sGlp: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      _rewardRouter: PromiseOrValue<string>,
      _glpManager: PromiseOrValue<string>,
      _dnGmxJuniorVault: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    minUsdcConversionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roundDeposits(
      round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roundGlpDepositPending(overrides?: CallOverrides): Promise<BigNumber>;

    roundGlpStaked(overrides?: CallOverrides): Promise<BigNumber>;

    roundSharesMinted(overrides?: CallOverrides): Promise<BigNumber>;

    roundUsdcBalance(overrides?: CallOverrides): Promise<BigNumber>;

    setDepositCap(
      _depositCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setParamsV1(
      _weth: PromiseOrValue<string>,
      _rewardsHarvestingRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setThresholds(
      _slippageThresholdGmxBps: PromiseOrValue<BigNumberish>,
      _minUsdcConversionAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slippageThresholdGmxBps(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unclaimedShares(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdcBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDeposits(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultBatchingState(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAndRedeem(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositUsdc(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dnGmxJuniorVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dnGmxJuniorVaultGlpBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeBatch(
      usdcAmountToConvert: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantAllowances(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _sGlp: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      _rewardRouter: PromiseOrValue<string>,
      _glpManager: PromiseOrValue<string>,
      _dnGmxJuniorVault: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minUsdcConversionAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roundDeposits(
      round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roundGlpDepositPending(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roundGlpStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundSharesMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundUsdcBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDepositCap(
      _depositCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setParamsV1(
      _weth: PromiseOrValue<string>,
      _rewardsHarvestingRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setThresholds(
      _slippageThresholdGmxBps: PromiseOrValue<BigNumberish>,
      _minUsdcConversionAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slippageThresholdGmxBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unclaimedShares(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpauseDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdcBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDeposits(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultBatchingState(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
