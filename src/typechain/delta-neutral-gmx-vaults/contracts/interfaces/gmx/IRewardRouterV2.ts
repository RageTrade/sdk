/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export interface IRewardRouterV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | 'acceptTransfer'
      | 'batchCompoundForAccounts'
      | 'batchStakeGmxForAccount'
      | 'claim'
      | 'claimEsGmx'
      | 'claimFees'
      | 'compound'
      | 'compoundForAccount'
      | 'esGmx'
      | 'glpManager'
      | 'glpVester'
      | 'gmx'
      | 'handleRewards'
      | 'mintAndStakeGlp'
      | 'mintAndStakeGlpETH'
      | 'signalTransfer'
      | 'stakeEsGmx'
      | 'stakeGmx'
      | 'stakeGmxForAccount'
      | 'stakedGmxTracker'
      | 'unstakeAndRedeemGlp'
      | 'unstakeAndRedeemGlpETH'
      | 'unstakeEsGmx'
      | 'unstakeGmx'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'StakeGlp'
      | 'StakeGmx'
      | 'UnstakeGlp'
      | 'UnstakeGmx'
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'acceptTransfer',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'batchCompoundForAccounts',
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'batchStakeGmxForAccount',
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: 'claim', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'claimEsGmx',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'claimFees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'compound', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'compoundForAccount',
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: 'esGmx', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'glpManager',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'glpVester', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gmx', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'handleRewards',
    values: [boolean, boolean, boolean, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'mintAndStakeGlp',
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'mintAndStakeGlpETH',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'signalTransfer',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeEsGmx',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeGmx',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeGmxForAccount',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'stakedGmxTracker',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'unstakeAndRedeemGlp',
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'unstakeAndRedeemGlpETH',
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'unstakeEsGmx',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'unstakeGmx',
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'acceptTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'batchCompoundForAccounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'batchStakeGmxForAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimEsGmx', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'compound', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'compoundForAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'esGmx', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'glpManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'glpVester', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gmx', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'handleRewards',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintAndStakeGlp',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintAndStakeGlpETH',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'signalTransfer',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'stakeEsGmx', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeGmx', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'stakeGmxForAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stakedGmxTracker',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unstakeAndRedeemGlp',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unstakeAndRedeemGlpETH',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unstakeEsGmx',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unstakeGmx', data: BytesLike): Result;
}

export namespace StakeGlpEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeGmxEvent {
  export type InputTuple = [
    account: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, token: string, amount: bigint];
  export interface OutputObject {
    account: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakeGlpEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakeGmxEvent {
  export type InputTuple = [
    account: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, token: string, amount: bigint];
  export interface OutputObject {
    account: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRewardRouterV2 extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: IRewardRouterV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptTransfer: TypedContractMethod<
    [_sender: AddressLike],
    [void],
    'nonpayable'
  >;

  batchCompoundForAccounts: TypedContractMethod<
    [_accounts: AddressLike[]],
    [void],
    'nonpayable'
  >;

  batchStakeGmxForAccount: TypedContractMethod<
    [_accounts: AddressLike[], _amounts: BigNumberish[]],
    [void],
    'nonpayable'
  >;

  claim: TypedContractMethod<[], [void], 'nonpayable'>;

  claimEsGmx: TypedContractMethod<[], [void], 'nonpayable'>;

  claimFees: TypedContractMethod<[], [void], 'nonpayable'>;

  compound: TypedContractMethod<[], [void], 'nonpayable'>;

  compoundForAccount: TypedContractMethod<
    [_account: AddressLike],
    [void],
    'nonpayable'
  >;

  esGmx: TypedContractMethod<[], [string], 'view'>;

  glpManager: TypedContractMethod<[], [string], 'view'>;

  glpVester: TypedContractMethod<[], [string], 'view'>;

  gmx: TypedContractMethod<[], [string], 'view'>;

  handleRewards: TypedContractMethod<
    [
      shouldClaimGmx: boolean,
      shouldStakeGmx: boolean,
      shouldClaimEsGmx: boolean,
      shouldStakeEsGmx: boolean,
      shouldStakeMultiplierPoints: boolean,
      shouldClaimWeth: boolean,
      shouldConvertWethToEth: boolean
    ],
    [void],
    'nonpayable'
  >;

  mintAndStakeGlp: TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish
    ],
    [bigint],
    'nonpayable'
  >;

  mintAndStakeGlpETH: TypedContractMethod<
    [_minUsdg: BigNumberish, _minGlp: BigNumberish],
    [bigint],
    'payable'
  >;

  signalTransfer: TypedContractMethod<
    [_receiver: AddressLike],
    [void],
    'nonpayable'
  >;

  stakeEsGmx: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  stakeGmx: TypedContractMethod<[_amount: BigNumberish], [void], 'nonpayable'>;

  stakeGmxForAccount: TypedContractMethod<
    [_account: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  stakedGmxTracker: TypedContractMethod<[], [string], 'view'>;

  unstakeAndRedeemGlp: TypedContractMethod<
    [
      _tokenOut: AddressLike,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    'nonpayable'
  >;

  unstakeAndRedeemGlpETH: TypedContractMethod<
    [_glpAmount: BigNumberish, _minOut: BigNumberish, _receiver: AddressLike],
    [bigint],
    'nonpayable'
  >;

  unstakeEsGmx: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  unstakeGmx: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'acceptTransfer'
  ): TypedContractMethod<[_sender: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'batchCompoundForAccounts'
  ): TypedContractMethod<[_accounts: AddressLike[]], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'batchStakeGmxForAccount'
  ): TypedContractMethod<
    [_accounts: AddressLike[], _amounts: BigNumberish[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'claim'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'claimEsGmx'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'claimFees'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'compound'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'compoundForAccount'
  ): TypedContractMethod<[_account: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'esGmx'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'glpManager'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'glpVester'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'gmx'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'handleRewards'
  ): TypedContractMethod<
    [
      shouldClaimGmx: boolean,
      shouldStakeGmx: boolean,
      shouldClaimEsGmx: boolean,
      shouldStakeEsGmx: boolean,
      shouldStakeMultiplierPoints: boolean,
      shouldClaimWeth: boolean,
      shouldConvertWethToEth: boolean
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'mintAndStakeGlp'
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish
    ],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'mintAndStakeGlpETH'
  ): TypedContractMethod<
    [_minUsdg: BigNumberish, _minGlp: BigNumberish],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'signalTransfer'
  ): TypedContractMethod<[_receiver: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'stakeEsGmx'
  ): TypedContractMethod<[_amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'stakeGmx'
  ): TypedContractMethod<[_amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'stakeGmxForAccount'
  ): TypedContractMethod<
    [_account: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'stakedGmxTracker'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'unstakeAndRedeemGlp'
  ): TypedContractMethod<
    [
      _tokenOut: AddressLike,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'unstakeAndRedeemGlpETH'
  ): TypedContractMethod<
    [_glpAmount: BigNumberish, _minOut: BigNumberish, _receiver: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'unstakeEsGmx'
  ): TypedContractMethod<[_amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unstakeGmx'
  ): TypedContractMethod<[_amount: BigNumberish], [void], 'nonpayable'>;

  getEvent(
    key: 'StakeGlp'
  ): TypedContractEvent<
    StakeGlpEvent.InputTuple,
    StakeGlpEvent.OutputTuple,
    StakeGlpEvent.OutputObject
  >;
  getEvent(
    key: 'StakeGmx'
  ): TypedContractEvent<
    StakeGmxEvent.InputTuple,
    StakeGmxEvent.OutputTuple,
    StakeGmxEvent.OutputObject
  >;
  getEvent(
    key: 'UnstakeGlp'
  ): TypedContractEvent<
    UnstakeGlpEvent.InputTuple,
    UnstakeGlpEvent.OutputTuple,
    UnstakeGlpEvent.OutputObject
  >;
  getEvent(
    key: 'UnstakeGmx'
  ): TypedContractEvent<
    UnstakeGmxEvent.InputTuple,
    UnstakeGmxEvent.OutputTuple,
    UnstakeGmxEvent.OutputObject
  >;

  filters: {
    'StakeGlp(address,uint256)': TypedContractEvent<
      StakeGlpEvent.InputTuple,
      StakeGlpEvent.OutputTuple,
      StakeGlpEvent.OutputObject
    >;
    StakeGlp: TypedContractEvent<
      StakeGlpEvent.InputTuple,
      StakeGlpEvent.OutputTuple,
      StakeGlpEvent.OutputObject
    >;

    'StakeGmx(address,address,uint256)': TypedContractEvent<
      StakeGmxEvent.InputTuple,
      StakeGmxEvent.OutputTuple,
      StakeGmxEvent.OutputObject
    >;
    StakeGmx: TypedContractEvent<
      StakeGmxEvent.InputTuple,
      StakeGmxEvent.OutputTuple,
      StakeGmxEvent.OutputObject
    >;

    'UnstakeGlp(address,uint256)': TypedContractEvent<
      UnstakeGlpEvent.InputTuple,
      UnstakeGlpEvent.OutputTuple,
      UnstakeGlpEvent.OutputObject
    >;
    UnstakeGlp: TypedContractEvent<
      UnstakeGlpEvent.InputTuple,
      UnstakeGlpEvent.OutputTuple,
      UnstakeGlpEvent.OutputObject
    >;

    'UnstakeGmx(address,address,uint256)': TypedContractEvent<
      UnstakeGmxEvent.InputTuple,
      UnstakeGmxEvent.OutputTuple,
      UnstakeGmxEvent.OutputObject
    >;
    UnstakeGmx: TypedContractEvent<
      UnstakeGmxEvent.InputTuple,
      UnstakeGmxEvent.OutputTuple,
      UnstakeGmxEvent.OutputObject
    >;
  };
}
