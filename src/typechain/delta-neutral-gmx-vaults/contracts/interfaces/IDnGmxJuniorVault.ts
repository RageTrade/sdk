/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface IDnGmxJuniorVaultInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositCap()': FunctionFragment;
    'getMarketValue(uint256)': FunctionFragment;
    'getPriceX128()': FunctionFragment;
    'getUsdcBorrowed()': FunctionFragment;
    'getVaultMarketValue()': FunctionFragment;
    'harvestFees()': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'convertToAssets'
      | 'convertToShares'
      | 'deposit'
      | 'depositCap'
      | 'getMarketValue'
      | 'getPriceX128'
      | 'getUsdcBorrowed'
      | 'getVaultMarketValue'
      | 'harvestFees'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'redeem'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'withdraw'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'allowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCap',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarketValue',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPriceX128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getUsdcBorrowed',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultMarketValue',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestFees',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'maxDeposit',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxMint',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxRedeem',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'maxWithdraw',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUsdcBorrowed',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVaultMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewRedeem',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'AdminParamsUpdated(address,address,uint256,address,uint16)': EventFragment;
    'AllowancesGranted()': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'AssetSlippage(address,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'DepositCapUpdated(uint256)': EventFragment;
    'DnGmxSeniorVaultUpdated(address)': EventFragment;
    'EsGmxStaked(uint256)': EventFragment;
    'EsGmxVested(uint256)': EventFragment;
    'FeeParamsUpdated(uint256,address)': EventFragment;
    'FeesWithdrawn(uint256)': EventFragment;
    'GmxClaimed(uint256)': EventFragment;
    'HedgeParamsUpdated(address,address,uint256,address,address,address)': EventFragment;
    'KeeperUpdated(address)': EventFragment;
    'ParamsV1Updated(uint128,address)': EventFragment;
    'RebalanceParamsUpdated(uint32,uint16,uint16)': EventFragment;
    'Rebalanced()': EventFragment;
    'ThresholdsUpdated(uint16,uint16,uint16,uint128,uint128,uint128,uint128,uint128)': EventFragment;
    'TraderOIHedgesUpdated(int256,int256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
    'WithdrawFeeUpdated(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AllowancesGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetSlippage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositCapUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DnGmxSeniorVaultUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EsGmxStaked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EsGmxVested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeesWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GmxClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HedgeParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ParamsV1Updated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RebalanceParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Rebalanced'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ThresholdsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TraderOIHedgesUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawFeeUpdated'): EventFragment;
}

export interface AdminParamsUpdatedEventObject {
  newKeeper: string;
  dnGmxSeniorVault: string;
  newDepositCap: BigNumber;
  batchingManager: string;
  withdrawFeeBps: number;
}
export type AdminParamsUpdatedEvent = TypedEvent<
  [string, string, BigNumber, string, number],
  AdminParamsUpdatedEventObject
>;

export type AdminParamsUpdatedEventFilter =
  TypedEventFilter<AdminParamsUpdatedEvent>;

export interface AllowancesGrantedEventObject {}
export type AllowancesGrantedEvent = TypedEvent<
  [],
  AllowancesGrantedEventObject
>;

export type AllowancesGrantedEventFilter =
  TypedEventFilter<AllowancesGrantedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AssetSlippageEventObject {
  user: string;
  slippage: BigNumber;
}
export type AssetSlippageEvent = TypedEvent<
  [string, BigNumber],
  AssetSlippageEventObject
>;

export type AssetSlippageEventFilter = TypedEventFilter<AssetSlippageEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositCapUpdatedEventObject {
  _newDepositCap: BigNumber;
}
export type DepositCapUpdatedEvent = TypedEvent<
  [BigNumber],
  DepositCapUpdatedEventObject
>;

export type DepositCapUpdatedEventFilter =
  TypedEventFilter<DepositCapUpdatedEvent>;

export interface DnGmxSeniorVaultUpdatedEventObject {
  _dnGmxSeniorVault: string;
}
export type DnGmxSeniorVaultUpdatedEvent = TypedEvent<
  [string],
  DnGmxSeniorVaultUpdatedEventObject
>;

export type DnGmxSeniorVaultUpdatedEventFilter =
  TypedEventFilter<DnGmxSeniorVaultUpdatedEvent>;

export interface EsGmxStakedEventObject {
  amount: BigNumber;
}
export type EsGmxStakedEvent = TypedEvent<[BigNumber], EsGmxStakedEventObject>;

export type EsGmxStakedEventFilter = TypedEventFilter<EsGmxStakedEvent>;

export interface EsGmxVestedEventObject {
  amount: BigNumber;
}
export type EsGmxVestedEvent = TypedEvent<[BigNumber], EsGmxVestedEventObject>;

export type EsGmxVestedEventFilter = TypedEventFilter<EsGmxVestedEvent>;

export interface FeeParamsUpdatedEventObject {
  feeBps: BigNumber;
  _newFeeRecipient: string;
}
export type FeeParamsUpdatedEvent = TypedEvent<
  [BigNumber, string],
  FeeParamsUpdatedEventObject
>;

export type FeeParamsUpdatedEventFilter =
  TypedEventFilter<FeeParamsUpdatedEvent>;

export interface FeesWithdrawnEventObject {
  feeAmount: BigNumber;
}
export type FeesWithdrawnEvent = TypedEvent<
  [BigNumber],
  FeesWithdrawnEventObject
>;

export type FeesWithdrawnEventFilter = TypedEventFilter<FeesWithdrawnEvent>;

export interface GmxClaimedEventObject {
  amount: BigNumber;
}
export type GmxClaimedEvent = TypedEvent<[BigNumber], GmxClaimedEventObject>;

export type GmxClaimedEventFilter = TypedEventFilter<GmxClaimedEvent>;

export interface HedgeParamsUpdatedEventObject {
  vault: string;
  swapRouter: string;
  targetHealthFactor: BigNumber;
  aaveRewardsController: string;
  pool: string;
  oracle: string;
}
export type HedgeParamsUpdatedEvent = TypedEvent<
  [string, string, BigNumber, string, string, string],
  HedgeParamsUpdatedEventObject
>;

export type HedgeParamsUpdatedEventFilter =
  TypedEventFilter<HedgeParamsUpdatedEvent>;

export interface KeeperUpdatedEventObject {
  _newKeeper: string;
}
export type KeeperUpdatedEvent = TypedEvent<[string], KeeperUpdatedEventObject>;

export type KeeperUpdatedEventFilter = TypedEventFilter<KeeperUpdatedEvent>;

export interface ParamsV1UpdatedEventObject {
  rebalanceProfitUsdcAmountThreshold: BigNumber;
  dnGmxTraderHedgeStrategy: string;
}
export type ParamsV1UpdatedEvent = TypedEvent<
  [BigNumber, string],
  ParamsV1UpdatedEventObject
>;

export type ParamsV1UpdatedEventFilter = TypedEventFilter<ParamsV1UpdatedEvent>;

export interface RebalanceParamsUpdatedEventObject {
  rebalanceTimeThreshold: number;
  rebalanceDeltaThresholdBps: number;
  rebalanceHfThresholdBps: number;
}
export type RebalanceParamsUpdatedEvent = TypedEvent<
  [number, number, number],
  RebalanceParamsUpdatedEventObject
>;

export type RebalanceParamsUpdatedEventFilter =
  TypedEventFilter<RebalanceParamsUpdatedEvent>;

export interface RebalancedEventObject {}
export type RebalancedEvent = TypedEvent<[], RebalancedEventObject>;

export type RebalancedEventFilter = TypedEventFilter<RebalancedEvent>;

export interface ThresholdsUpdatedEventObject {
  slippageThresholdSwapBtcBps: number;
  slippageThresholdSwapEthBps: number;
  slippageThresholdGmxBps: number;
  usdcConversionThreshold: BigNumber;
  wethConversionThreshold: BigNumber;
  hedgeUsdcAmountThreshold: BigNumber;
  partialBtcHedgeUsdcAmountThreshold: BigNumber;
  partialEthHedgeUsdcAmountThreshold: BigNumber;
}
export type ThresholdsUpdatedEvent = TypedEvent<
  [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ThresholdsUpdatedEventObject
>;

export type ThresholdsUpdatedEventFilter =
  TypedEventFilter<ThresholdsUpdatedEvent>;

export interface TraderOIHedgesUpdatedEventObject {
  btcTraderOIHedge: BigNumber;
  ethTraderOIHedge: BigNumber;
}
export type TraderOIHedgesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TraderOIHedgesUpdatedEventObject
>;

export type TraderOIHedgesUpdatedEventFilter =
  TypedEventFilter<TraderOIHedgesUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawFeeUpdatedEventObject {
  _withdrawFeeBps: BigNumber;
}
export type WithdrawFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  WithdrawFeeUpdatedEventObject
>;

export type WithdrawFeeUpdatedEventFilter =
  TypedEventFilter<WithdrawFeeUpdatedEvent>;

export interface IDnGmxJuniorVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDnGmxJuniorVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asset(
      overrides?: CallOverrides
    ): Promise<[string] & { assetTokenAddress: string }>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketValue(
      assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marketValue: BigNumber }>;

    getPriceX128(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUsdcBorrowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaultMarketValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxDeposit(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxAssets: BigNumber }>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxShares: BigNumber }>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxShares: BigNumber }>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxAssets: BigNumber }>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalAssets(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalManagedAssets: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToAssets(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositCap(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketValue(
    assetAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

  getUsdcBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

  harvestFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxDeposit(
    receiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxMint(
    receiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxRedeem(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxWithdraw(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  previewDeposit(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeem(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketValue(
      assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

    getUsdcBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFees(overrides?: CallOverrides): Promise<void>;

    maxDeposit(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    'AdminParamsUpdated(address,address,uint256,address,uint16)'(
      newKeeper?: null,
      dnGmxSeniorVault?: null,
      newDepositCap?: null,
      batchingManager?: null,
      withdrawFeeBps?: null
    ): AdminParamsUpdatedEventFilter;
    AdminParamsUpdated(
      newKeeper?: null,
      dnGmxSeniorVault?: null,
      newDepositCap?: null,
      batchingManager?: null,
      withdrawFeeBps?: null
    ): AdminParamsUpdatedEventFilter;

    'AllowancesGranted()'(): AllowancesGrantedEventFilter;
    AllowancesGranted(): AllowancesGrantedEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    'AssetSlippage(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      slippage?: null
    ): AssetSlippageEventFilter;
    AssetSlippage(
      user?: PromiseOrValue<string> | null,
      slippage?: null
    ): AssetSlippageEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    'DepositCapUpdated(uint256)'(
      _newDepositCap?: null
    ): DepositCapUpdatedEventFilter;
    DepositCapUpdated(_newDepositCap?: null): DepositCapUpdatedEventFilter;

    'DnGmxSeniorVaultUpdated(address)'(
      _dnGmxSeniorVault?: null
    ): DnGmxSeniorVaultUpdatedEventFilter;
    DnGmxSeniorVaultUpdated(
      _dnGmxSeniorVault?: null
    ): DnGmxSeniorVaultUpdatedEventFilter;

    'EsGmxStaked(uint256)'(amount?: null): EsGmxStakedEventFilter;
    EsGmxStaked(amount?: null): EsGmxStakedEventFilter;

    'EsGmxVested(uint256)'(amount?: null): EsGmxVestedEventFilter;
    EsGmxVested(amount?: null): EsGmxVestedEventFilter;

    'FeeParamsUpdated(uint256,address)'(
      feeBps?: null,
      _newFeeRecipient?: null
    ): FeeParamsUpdatedEventFilter;
    FeeParamsUpdated(
      feeBps?: null,
      _newFeeRecipient?: null
    ): FeeParamsUpdatedEventFilter;

    'FeesWithdrawn(uint256)'(feeAmount?: null): FeesWithdrawnEventFilter;
    FeesWithdrawn(feeAmount?: null): FeesWithdrawnEventFilter;

    'GmxClaimed(uint256)'(amount?: null): GmxClaimedEventFilter;
    GmxClaimed(amount?: null): GmxClaimedEventFilter;

    'HedgeParamsUpdated(address,address,uint256,address,address,address)'(
      vault?: null,
      swapRouter?: null,
      targetHealthFactor?: null,
      aaveRewardsController?: null,
      pool?: null,
      oracle?: null
    ): HedgeParamsUpdatedEventFilter;
    HedgeParamsUpdated(
      vault?: null,
      swapRouter?: null,
      targetHealthFactor?: null,
      aaveRewardsController?: null,
      pool?: null,
      oracle?: null
    ): HedgeParamsUpdatedEventFilter;

    'KeeperUpdated(address)'(_newKeeper?: null): KeeperUpdatedEventFilter;
    KeeperUpdated(_newKeeper?: null): KeeperUpdatedEventFilter;

    'ParamsV1Updated(uint128,address)'(
      rebalanceProfitUsdcAmountThreshold?: null,
      dnGmxTraderHedgeStrategy?: null
    ): ParamsV1UpdatedEventFilter;
    ParamsV1Updated(
      rebalanceProfitUsdcAmountThreshold?: null,
      dnGmxTraderHedgeStrategy?: null
    ): ParamsV1UpdatedEventFilter;

    'RebalanceParamsUpdated(uint32,uint16,uint16)'(
      rebalanceTimeThreshold?: null,
      rebalanceDeltaThresholdBps?: null,
      rebalanceHfThresholdBps?: null
    ): RebalanceParamsUpdatedEventFilter;
    RebalanceParamsUpdated(
      rebalanceTimeThreshold?: null,
      rebalanceDeltaThresholdBps?: null,
      rebalanceHfThresholdBps?: null
    ): RebalanceParamsUpdatedEventFilter;

    'Rebalanced()'(): RebalancedEventFilter;
    Rebalanced(): RebalancedEventFilter;

    'ThresholdsUpdated(uint16,uint16,uint16,uint128,uint128,uint128,uint128,uint128)'(
      slippageThresholdSwapBtcBps?: null,
      slippageThresholdSwapEthBps?: null,
      slippageThresholdGmxBps?: null,
      usdcConversionThreshold?: null,
      wethConversionThreshold?: null,
      hedgeUsdcAmountThreshold?: null,
      partialBtcHedgeUsdcAmountThreshold?: null,
      partialEthHedgeUsdcAmountThreshold?: null
    ): ThresholdsUpdatedEventFilter;
    ThresholdsUpdated(
      slippageThresholdSwapBtcBps?: null,
      slippageThresholdSwapEthBps?: null,
      slippageThresholdGmxBps?: null,
      usdcConversionThreshold?: null,
      wethConversionThreshold?: null,
      hedgeUsdcAmountThreshold?: null,
      partialBtcHedgeUsdcAmountThreshold?: null,
      partialEthHedgeUsdcAmountThreshold?: null
    ): ThresholdsUpdatedEventFilter;

    'TraderOIHedgesUpdated(int256,int256)'(
      btcTraderOIHedge?: null,
      ethTraderOIHedge?: null
    ): TraderOIHedgesUpdatedEventFilter;
    TraderOIHedgesUpdated(
      btcTraderOIHedge?: null,
      ethTraderOIHedge?: null
    ): TraderOIHedgesUpdatedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;

    'WithdrawFeeUpdated(uint256)'(
      _withdrawFeeBps?: null
    ): WithdrawFeeUpdatedEventFilter;
    WithdrawFeeUpdated(_withdrawFeeBps?: null): WithdrawFeeUpdatedEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketValue(
      assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

    getUsdcBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxDeposit(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketValue(
      assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceX128(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUsdcBorrowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultMarketValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxDeposit(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
