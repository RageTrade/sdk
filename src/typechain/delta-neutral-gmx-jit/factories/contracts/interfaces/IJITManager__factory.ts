/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type {
  IJITManager,
  IJITManagerInterface,
} from '../../../contracts/interfaces/IJITManager';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        indexed: false,
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
      {
        indexed: false,
        internalType: 'uint128',
        name: 'liquidity',
        type: 'uint128',
      },
    ],
    name: 'JITLiquidity',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'bool',
        name: 'isToken0',
        type: 'bool',
      },
    ],
    name: 'addLiquidity',
    outputs: [
      {
        internalType: 'uint256',
        name: 'liquidity',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'removeLiquidity',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
      {
        internalType: 'bool',
        name: 'approveToken0',
        type: 'bool',
      },
    ],
    name: 'swapTokens',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class IJITManager__factory {
  static readonly abi = _abi;
  static createInterface(): IJITManagerInterface {
    return new utils.Interface(_abi) as IJITManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IJITManager {
    return new Contract(address, _abi, signerOrProvider) as IJITManager;
  }
}
