/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../../../../common';

export interface ITransferStrategyBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'emergencyWithdrawal'
      | 'getIncentivesController'
      | 'getRewardsAdmin'
      | 'performTransfer'
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdrawal'): EventFragment;

  encodeFunctionData(
    functionFragment: 'emergencyWithdrawal',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getIncentivesController',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getRewardsAdmin',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'performTransfer',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'emergencyWithdrawal',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getIncentivesController',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRewardsAdmin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'performTransfer',
    data: BytesLike
  ): Result;
}

export namespace EmergencyWithdrawalEvent {
  export type InputTuple = [
    caller: AddressLike,
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    token: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    caller: string;
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITransferStrategyBase extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: ITransferStrategyBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emergencyWithdrawal: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  getIncentivesController: TypedContractMethod<[], [string], 'view'>;

  getRewardsAdmin: TypedContractMethod<[], [string], 'view'>;

  performTransfer: TypedContractMethod<
    [to: AddressLike, reward: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'emergencyWithdrawal'
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'getIncentivesController'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getRewardsAdmin'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'performTransfer'
  ): TypedContractMethod<
    [to: AddressLike, reward: AddressLike, amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  getEvent(
    key: 'EmergencyWithdrawal'
  ): TypedContractEvent<
    EmergencyWithdrawalEvent.InputTuple,
    EmergencyWithdrawalEvent.OutputTuple,
    EmergencyWithdrawalEvent.OutputObject
  >;

  filters: {
    'EmergencyWithdrawal(address,address,address,uint256)': TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;
    EmergencyWithdrawal: TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;
  };
}
