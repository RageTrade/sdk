/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../common';

export interface JITManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'addLiquidity'
      | 'authorizedCaller'
      | 'feeTier'
      | 'getDeviationFromChainlink'
      | 'getDollarValue'
      | 'getPrice'
      | 'getTickRange'
      | 'initialize'
      | 'keeper'
      | 'liquidity'
      | 'nfpm'
      | 'nfpmTokenId'
      | 'owner'
      | 'pool'
      | 'priceDeviationThresholdBPS'
      | 'removeLiquidity'
      | 'renounceOwnership'
      | 'setValues'
      | 'sqrtPriceThresholdBPS'
      | 'swapLossThresholdBPS'
      | 'swapTokens'
      | 'tickSpacing'
      | 'token0'
      | 'token0PriceFeed'
      | 'token1'
      | 'token1PriceFeed'
      | 'transferOwnership'
      | 'uniswapV3Factory'
      | 'withdrawFunds'
      | 'withdrawTokenFunds'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'Initialized'
      | 'JITLiquidity'
      | 'OwnershipTransferred'
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'addLiquidity',
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'authorizedCaller',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'feeTier', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getDeviationFromChainlink',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getDollarValue',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getPrice',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTickRange',
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidity', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nfpm', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nfpmTokenId',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'priceDeviationThresholdBPS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLiquidity',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setValues',
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'sqrtPriceThresholdBPS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'swapLossThresholdBPS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokens',
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'tickSpacing',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'token0', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'token0PriceFeed',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'token1', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'token1PriceFeed',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'uniswapV3Factory',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFunds',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawTokenFunds',
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: 'addLiquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'authorizedCaller',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'feeTier', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getDeviationFromChainlink',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDollarValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getTickRange',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nfpm', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'nfpmTokenId',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'priceDeviationThresholdBPS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLiquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setValues', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'sqrtPriceThresholdBPS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapLossThresholdBPS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'tickSpacing',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'token0', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'token0PriceFeed',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'token1', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'token1PriceFeed',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'uniswapV3Factory',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawFunds',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawTokenFunds',
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JITLiquidityEvent {
  export type InputTuple = [
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    tickLower: bigint,
    tickUpper: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    tickLower: bigint;
    tickUpper: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JITManager extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: JITManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [isToken0: boolean],
    [bigint],
    'nonpayable'
  >;

  authorizedCaller: TypedContractMethod<[], [string], 'view'>;

  feeTier: TypedContractMethod<[], [bigint], 'view'>;

  getDeviationFromChainlink: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        deviationBPS: bigint;
        uniswapPriceX128: bigint;
        chainlinkPriceX128: bigint;
      }
    ],
    'view'
  >;

  getDollarValue: TypedContractMethod<[], [bigint], 'view'>;

  getPrice: TypedContractMethod<[priceFeed: AddressLike], [bigint], 'view'>;

  getTickRange: TypedContractMethod<
    [isToken0: boolean],
    [[bigint, bigint] & { tickLower: bigint; tickUpper: bigint }],
    'view'
  >;

  initialize: TypedContractMethod<
    [_uniswapV3Factory: AddressLike, _nfpm: AddressLike, _pool: AddressLike],
    [void],
    'nonpayable'
  >;

  keeper: TypedContractMethod<[], [string], 'view'>;

  liquidity: TypedContractMethod<[], [bigint], 'view'>;

  nfpm: TypedContractMethod<[], [string], 'view'>;

  nfpmTokenId: TypedContractMethod<[], [bigint], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  pool: TypedContractMethod<[], [string], 'view'>;

  priceDeviationThresholdBPS: TypedContractMethod<[], [bigint], 'view'>;

  removeLiquidity: TypedContractMethod<[], [void], 'nonpayable'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  setValues: TypedContractMethod<
    [
      _keeper: AddressLike,
      _authorizedCaller: AddressLike,
      _token0PriceFeed: AddressLike,
      _token1PriceFeed: AddressLike,
      _sqrtPriceThresholdBPS: BigNumberish,
      _swapLossThresholdBPS: BigNumberish,
      _priceDeviationThresholdBPS: BigNumberish
    ],
    [void],
    'nonpayable'
  >;

  sqrtPriceThresholdBPS: TypedContractMethod<[], [bigint], 'view'>;

  swapLossThresholdBPS: TypedContractMethod<[], [bigint], 'view'>;

  swapTokens: TypedContractMethod<
    [to: AddressLike, data: BytesLike, approveToken0: boolean],
    [void],
    'nonpayable'
  >;

  tickSpacing: TypedContractMethod<[], [bigint], 'view'>;

  token0: TypedContractMethod<[], [string], 'view'>;

  token0PriceFeed: TypedContractMethod<[], [string], 'view'>;

  token1: TypedContractMethod<[], [string], 'view'>;

  token1PriceFeed: TypedContractMethod<[], [string], 'view'>;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  uniswapV3Factory: TypedContractMethod<[], [string], 'view'>;

  withdrawFunds: TypedContractMethod<
    [token: AddressLike],
    [void],
    'nonpayable'
  >;

  withdrawTokenFunds: TypedContractMethod<[], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'addLiquidity'
  ): TypedContractMethod<[isToken0: boolean], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'authorizedCaller'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'feeTier'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getDeviationFromChainlink'
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        deviationBPS: bigint;
        uniswapPriceX128: bigint;
        chainlinkPriceX128: bigint;
      }
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getDollarValue'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getPrice'
  ): TypedContractMethod<[priceFeed: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getTickRange'
  ): TypedContractMethod<
    [isToken0: boolean],
    [[bigint, bigint] & { tickLower: bigint; tickUpper: bigint }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [_uniswapV3Factory: AddressLike, _nfpm: AddressLike, _pool: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'keeper'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'liquidity'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'nfpm'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'nfpmTokenId'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'owner'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pool'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'priceDeviationThresholdBPS'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'removeLiquidity'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'renounceOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setValues'
  ): TypedContractMethod<
    [
      _keeper: AddressLike,
      _authorizedCaller: AddressLike,
      _token0PriceFeed: AddressLike,
      _token1PriceFeed: AddressLike,
      _sqrtPriceThresholdBPS: BigNumberish,
      _swapLossThresholdBPS: BigNumberish,
      _priceDeviationThresholdBPS: BigNumberish
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'sqrtPriceThresholdBPS'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'swapLossThresholdBPS'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'swapTokens'
  ): TypedContractMethod<
    [to: AddressLike, data: BytesLike, approveToken0: boolean],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'tickSpacing'
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'token0'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'token0PriceFeed'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'token1'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'token1PriceFeed'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'uniswapV3Factory'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'withdrawFunds'
  ): TypedContractMethod<[token: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'withdrawTokenFunds'
  ): TypedContractMethod<[], [void], 'nonpayable'>;

  getEvent(
    key: 'Initialized'
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'JITLiquidity'
  ): TypedContractEvent<
    JITLiquidityEvent.InputTuple,
    JITLiquidityEvent.OutputTuple,
    JITLiquidityEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'JITLiquidity(int24,int24,uint128)': TypedContractEvent<
      JITLiquidityEvent.InputTuple,
      JITLiquidityEvent.OutputTuple,
      JITLiquidityEvent.OutputObject
    >;
    JITLiquidity: TypedContractEvent<
      JITLiquidityEvent.InputTuple,
      JITLiquidityEvent.OutputTuple,
      JITLiquidityEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
