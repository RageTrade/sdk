/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../common';

export interface DnGmxRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'batchingManagerKeeper'
      | 'deposit'
      | 'depositPeriphery'
      | 'depositToken'
      | 'dnGmxBatchingManager'
      | 'dnGmxJuniorVault'
      | 'executeBatchDeposit'
      | 'executeBatchStake'
      | 'getQuotes'
      | 'getQuotesJitRevert'
      | 'gmxVault'
      | 'initialize'
      | 'jitManager1'
      | 'jitManager2'
      | 'owner'
      | 'quoterV1'
      | 'renounceOwnership'
      | 'sGLP'
      | 'setBatchingManagerKeeper'
      | 'setValues'
      | 'transferOwnership'
      | 'usdc'
      | 'wbtc'
      | 'weth'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: 'Initialized' | 'OwnershipTransferred'
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'batchingManagerKeeper',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositPeriphery',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'depositToken',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'dnGmxBatchingManager',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'dnGmxJuniorVault',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'executeBatchDeposit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'executeBatchStake',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getQuotes',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getQuotesJitRevert',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'gmxVault', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'jitManager1',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'jitManager2',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'quoterV1', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'sGLP', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setBatchingManagerKeeper',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setValues',
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: 'usdc', values?: undefined): string;
  encodeFunctionData(functionFragment: 'wbtc', values?: undefined): string;
  encodeFunctionData(functionFragment: 'weth', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'batchingManagerKeeper',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositPeriphery',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'depositToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dnGmxBatchingManager',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dnGmxJuniorVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeBatchDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeBatchStake',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getQuotes', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getQuotesJitRevert',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'gmxVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'jitManager1',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'jitManager2',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quoterV1', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'sGLP', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setBatchingManagerKeeper',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setValues', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'usdc', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wbtc', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weth', data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DnGmxRouter extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: DnGmxRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchingManagerKeeper: TypedContractMethod<[], [string], 'view'>;

  deposit: TypedContractMethod<
    [amount: BigNumberish, receiver: AddressLike],
    [bigint],
    'nonpayable'
  >;

  depositPeriphery: TypedContractMethod<[], [string], 'view'>;

  depositToken: TypedContractMethod<
    [token: AddressLike, receiver: AddressLike, tokenAmount: BigNumberish],
    [bigint],
    'nonpayable'
  >;

  dnGmxBatchingManager: TypedContractMethod<[], [string], 'view'>;

  dnGmxJuniorVault: TypedContractMethod<[], [string], 'view'>;

  executeBatchDeposit: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  executeBatchStake: TypedContractMethod<[], [void], 'nonpayable'>;

  getQuotes: TypedContractMethod<
    [assets: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        ethQuoteWithoutJIT: bigint;
        btcQuoteWithoutJIT: bigint;
        ethQuoteWithJIT: bigint;
        btcQuoteWithJIT: bigint;
      }
    ],
    'nonpayable'
  >;

  getQuotesJitRevert: TypedContractMethod<
    [assets: BigNumberish],
    [void],
    'nonpayable'
  >;

  gmxVault: TypedContractMethod<[], [string], 'view'>;

  initialize: TypedContractMethod<[], [void], 'nonpayable'>;

  jitManager1: TypedContractMethod<[], [string], 'view'>;

  jitManager2: TypedContractMethod<[], [string], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  quoterV1: TypedContractMethod<[], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  sGLP: TypedContractMethod<[], [string], 'view'>;

  setBatchingManagerKeeper: TypedContractMethod<
    [_bmKeeper: AddressLike],
    [void],
    'nonpayable'
  >;

  setValues: TypedContractMethod<
    [
      _dnGmxJuniorVault: AddressLike,
      _dnGmxBatchingManager: AddressLike,
      _depositPeriphery: AddressLike,
      _gmxVault: AddressLike,
      _jitManager1: AddressLike,
      _jitManager2: AddressLike,
      _quoterV1: AddressLike,
      _sGLP: AddressLike,
      _weth: AddressLike,
      _wbtc: AddressLike,
      _usdc: AddressLike
    ],
    [void],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  usdc: TypedContractMethod<[], [string], 'view'>;

  wbtc: TypedContractMethod<[], [string], 'view'>;

  weth: TypedContractMethod<[], [string], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'batchingManagerKeeper'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'deposit'
  ): TypedContractMethod<
    [amount: BigNumberish, receiver: AddressLike],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'depositPeriphery'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'depositToken'
  ): TypedContractMethod<
    [token: AddressLike, receiver: AddressLike, tokenAmount: BigNumberish],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'dnGmxBatchingManager'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'dnGmxJuniorVault'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'executeBatchDeposit'
  ): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'executeBatchStake'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'getQuotes'): TypedContractMethod<
    [assets: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        ethQuoteWithoutJIT: bigint;
        btcQuoteWithoutJIT: bigint;
        ethQuoteWithJIT: bigint;
        btcQuoteWithJIT: bigint;
      }
    ],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'getQuotesJitRevert'
  ): TypedContractMethod<[assets: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'gmxVault'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'jitManager1'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'jitManager2'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'owner'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'quoterV1'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'renounceOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'sGLP'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'setBatchingManagerKeeper'
  ): TypedContractMethod<[_bmKeeper: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setValues'
  ): TypedContractMethod<
    [
      _dnGmxJuniorVault: AddressLike,
      _dnGmxBatchingManager: AddressLike,
      _depositPeriphery: AddressLike,
      _gmxVault: AddressLike,
      _jitManager1: AddressLike,
      _jitManager2: AddressLike,
      _quoterV1: AddressLike,
      _sGLP: AddressLike,
      _weth: AddressLike,
      _wbtc: AddressLike,
      _usdc: AddressLike
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'usdc'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'wbtc'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'weth'
  ): TypedContractMethod<[], [string], 'view'>;

  getEvent(
    key: 'Initialized'
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
