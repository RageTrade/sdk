/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common';

export interface DnGmxRouterInterface extends utils.Interface {
  functions: {
    'deposit(uint256,address)': FunctionFragment;
    'dnGmxBatchingManager()': FunctionFragment;
    'dnGmxJuniorVault()': FunctionFragment;
    'executeBatchDeposit()': FunctionFragment;
    'getQuotes(uint256)': FunctionFragment;
    'getQuotesJitRevert(uint256)': FunctionFragment;
    'gmxVault()': FunctionFragment;
    'initialize(address,address,address,address,address,address,address,address,address,address)': FunctionFragment;
    'jitManager1()': FunctionFragment;
    'jitManager2()': FunctionFragment;
    'owner()': FunctionFragment;
    'quoterV1()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'sGLP()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'usdc()': FunctionFragment;
    'wbtc()': FunctionFragment;
    'weth()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'deposit'
      | 'dnGmxBatchingManager'
      | 'dnGmxJuniorVault'
      | 'executeBatchDeposit'
      | 'getQuotes'
      | 'getQuotesJitRevert'
      | 'gmxVault'
      | 'initialize'
      | 'jitManager1'
      | 'jitManager2'
      | 'owner'
      | 'quoterV1'
      | 'renounceOwnership'
      | 'sGLP'
      | 'transferOwnership'
      | 'usdc'
      | 'wbtc'
      | 'weth'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'dnGmxBatchingManager',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'dnGmxJuniorVault',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'executeBatchDeposit',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getQuotes',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getQuotesJitRevert',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'gmxVault', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'jitManager1',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'jitManager2',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'quoterV1', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'sGLP', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'usdc', values?: undefined): string;
  encodeFunctionData(functionFragment: 'wbtc', values?: undefined): string;
  encodeFunctionData(functionFragment: 'weth', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'dnGmxBatchingManager',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dnGmxJuniorVault',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeBatchDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getQuotes', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getQuotesJitRevert',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'gmxVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'jitManager1',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'jitManager2',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quoterV1', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'sGLP', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'usdc', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wbtc', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weth', data: BytesLike): Result;

  events: {
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface DnGmxRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DnGmxRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dnGmxBatchingManager(overrides?: CallOverrides): Promise<[string]>;

    dnGmxJuniorVault(overrides?: CallOverrides): Promise<[string]>;

    executeBatchDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getQuotes(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getQuotesJitRevert(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gmxVault(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _dnGmxJuniorVault: PromiseOrValue<string>,
      _dnGmxBatchingManager: PromiseOrValue<string>,
      _gmxVault: PromiseOrValue<string>,
      _jitManager1: PromiseOrValue<string>,
      _jitManager2: PromiseOrValue<string>,
      _quoterV1: PromiseOrValue<string>,
      _sGLP: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _wbtc: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    jitManager1(overrides?: CallOverrides): Promise<[string]>;

    jitManager2(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quoterV1(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sGLP(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    wbtc(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dnGmxBatchingManager(overrides?: CallOverrides): Promise<string>;

  dnGmxJuniorVault(overrides?: CallOverrides): Promise<string>;

  executeBatchDeposit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getQuotes(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getQuotesJitRevert(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gmxVault(overrides?: CallOverrides): Promise<string>;

  initialize(
    _dnGmxJuniorVault: PromiseOrValue<string>,
    _dnGmxBatchingManager: PromiseOrValue<string>,
    _gmxVault: PromiseOrValue<string>,
    _jitManager1: PromiseOrValue<string>,
    _jitManager2: PromiseOrValue<string>,
    _quoterV1: PromiseOrValue<string>,
    _sGLP: PromiseOrValue<string>,
    _weth: PromiseOrValue<string>,
    _wbtc: PromiseOrValue<string>,
    _usdc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  jitManager1(overrides?: CallOverrides): Promise<string>;

  jitManager2(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  quoterV1(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sGLP(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  wbtc(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dnGmxBatchingManager(overrides?: CallOverrides): Promise<string>;

    dnGmxJuniorVault(overrides?: CallOverrides): Promise<string>;

    executeBatchDeposit(overrides?: CallOverrides): Promise<void>;

    getQuotes(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        ethQuoteWithoutJIT: BigNumber;
        btcQuoteWithoutJIT: BigNumber;
        ethQuoteWithJIT: BigNumber;
        btcQuoteWithJIT: BigNumber;
      }
    >;

    getQuotesJitRevert(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    gmxVault(overrides?: CallOverrides): Promise<string>;

    initialize(
      _dnGmxJuniorVault: PromiseOrValue<string>,
      _dnGmxBatchingManager: PromiseOrValue<string>,
      _gmxVault: PromiseOrValue<string>,
      _jitManager1: PromiseOrValue<string>,
      _jitManager2: PromiseOrValue<string>,
      _quoterV1: PromiseOrValue<string>,
      _sGLP: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _wbtc: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    jitManager1(overrides?: CallOverrides): Promise<string>;

    jitManager2(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    quoterV1(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sGLP(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;

    wbtc(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dnGmxBatchingManager(overrides?: CallOverrides): Promise<BigNumber>;

    dnGmxJuniorVault(overrides?: CallOverrides): Promise<BigNumber>;

    executeBatchDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getQuotes(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getQuotesJitRevert(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gmxVault(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _dnGmxJuniorVault: PromiseOrValue<string>,
      _dnGmxBatchingManager: PromiseOrValue<string>,
      _gmxVault: PromiseOrValue<string>,
      _jitManager1: PromiseOrValue<string>,
      _jitManager2: PromiseOrValue<string>,
      _quoterV1: PromiseOrValue<string>,
      _sGLP: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _wbtc: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    jitManager1(overrides?: CallOverrides): Promise<BigNumber>;

    jitManager2(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quoterV1(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sGLP(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    wbtc(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dnGmxBatchingManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dnGmxJuniorVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeBatchDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getQuotes(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getQuotesJitRevert(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gmxVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _dnGmxJuniorVault: PromiseOrValue<string>,
      _dnGmxBatchingManager: PromiseOrValue<string>,
      _gmxVault: PromiseOrValue<string>,
      _jitManager1: PromiseOrValue<string>,
      _jitManager2: PromiseOrValue<string>,
      _quoterV1: PromiseOrValue<string>,
      _sGLP: PromiseOrValue<string>,
      _weth: PromiseOrValue<string>,
      _wbtc: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    jitManager1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jitManager2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoterV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sGLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wbtc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
