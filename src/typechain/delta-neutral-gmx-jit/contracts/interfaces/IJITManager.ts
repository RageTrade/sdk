/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export interface IJITManagerInterface extends Interface {
  getFunction(
    nameOrSignature: 'addLiquidity' | 'removeLiquidity' | 'swapTokens'
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'JITLiquidity'): EventFragment;

  encodeFunctionData(
    functionFragment: 'addLiquidity',
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLiquidity',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokens',
    values: [AddressLike, BytesLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: 'addLiquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLiquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapTokens', data: BytesLike): Result;
}

export namespace JITLiquidityEvent {
  export type InputTuple = [
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    tickLower: bigint,
    tickUpper: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    tickLower: bigint;
    tickUpper: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IJITManager extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: IJITManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [isToken0: boolean],
    [bigint],
    'nonpayable'
  >;

  removeLiquidity: TypedContractMethod<[], [void], 'nonpayable'>;

  swapTokens: TypedContractMethod<
    [to: AddressLike, data: BytesLike, approveToken0: boolean],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'addLiquidity'
  ): TypedContractMethod<[isToken0: boolean], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'removeLiquidity'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'swapTokens'
  ): TypedContractMethod<
    [to: AddressLike, data: BytesLike, approveToken0: boolean],
    [void],
    'nonpayable'
  >;

  getEvent(
    key: 'JITLiquidity'
  ): TypedContractEvent<
    JITLiquidityEvent.InputTuple,
    JITLiquidityEvent.OutputTuple,
    JITLiquidityEvent.OutputObject
  >;

  filters: {
    'JITLiquidity(int24,int24,uint128)': TypedContractEvent<
      JITLiquidityEvent.InputTuple,
      JITLiquidityEvent.OutputTuple,
      JITLiquidityEvent.OutputObject
    >;
    JITLiquidity: TypedContractEvent<
      JITLiquidityEvent.InputTuple,
      JITLiquidityEvent.OutputTuple,
      JITLiquidityEvent.OutputObject
    >;
  };
}
