/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../../../common';

export interface IVaultInterface extends utils.Interface {
  functions: {
    'allWhitelistedTokens(uint256)': FunctionFragment;
    'allWhitelistedTokensLength()': FunctionFragment;
    'approvedRouters(address,address)': FunctionFragment;
    'bufferAmounts(address)': FunctionFragment;
    'buyUSDG(address,address)': FunctionFragment;
    'cumulativeFundingRates(address)': FunctionFragment;
    'decreasePosition(address,address,address,uint256,uint256,bool,address)': FunctionFragment;
    'directPoolDeposit(address)': FunctionFragment;
    'feeReserves(address)': FunctionFragment;
    'fundingInterval()': FunctionFragment;
    'fundingRateFactor()': FunctionFragment;
    'getDelta(address,uint256,uint256,bool,uint256)': FunctionFragment;
    'getFeeBasisPoints(address,uint256,uint256,uint256,bool)': FunctionFragment;
    'getMaxPrice(address)': FunctionFragment;
    'getMinPrice(address)': FunctionFragment;
    'getNextFundingRate(address)': FunctionFragment;
    'getPosition(address,address,address,bool)': FunctionFragment;
    'getRedemptionAmount(address,uint256)': FunctionFragment;
    'globalShortAveragePrices(address)': FunctionFragment;
    'globalShortSizes(address)': FunctionFragment;
    'gov()': FunctionFragment;
    'guaranteedUsd(address)': FunctionFragment;
    'hasDynamicFees()': FunctionFragment;
    'inManagerMode()': FunctionFragment;
    'inPrivateLiquidationMode()': FunctionFragment;
    'increasePosition(address,address,address,uint256,bool)': FunctionFragment;
    'isInitialized()': FunctionFragment;
    'isLeverageEnabled()': FunctionFragment;
    'isLiquidator(address)': FunctionFragment;
    'isManager(address)': FunctionFragment;
    'isSwapEnabled()': FunctionFragment;
    'lastFundingTimes(address)': FunctionFragment;
    'liquidationFeeUsd()': FunctionFragment;
    'marginFeeBasisPoints()': FunctionFragment;
    'maxGasPrice()': FunctionFragment;
    'maxLeverage()': FunctionFragment;
    'maxUsdgAmounts(address)': FunctionFragment;
    'minProfitBasisPoints(address)': FunctionFragment;
    'minProfitTime()': FunctionFragment;
    'mintBurnFeeBasisPoints()': FunctionFragment;
    'poolAmounts(address)': FunctionFragment;
    'priceFeed()': FunctionFragment;
    'reservedAmounts(address)': FunctionFragment;
    'router()': FunctionFragment;
    'sellUSDG(address,address)': FunctionFragment;
    'setError(uint256,string)': FunctionFragment;
    'setFees(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)': FunctionFragment;
    'setInManagerMode(bool)': FunctionFragment;
    'setIsLeverageEnabled(bool)': FunctionFragment;
    'setIsSwapEnabled(bool)': FunctionFragment;
    'setManager(address,bool)': FunctionFragment;
    'setMaxGasPrice(uint256)': FunctionFragment;
    'setPriceFeed(address)': FunctionFragment;
    'setTokenConfig(address,uint256,uint256,uint256,uint256,bool,bool)': FunctionFragment;
    'shortableTokens(address)': FunctionFragment;
    'stableFundingRateFactor()': FunctionFragment;
    'stableSwapFeeBasisPoints()': FunctionFragment;
    'stableTaxBasisPoints()': FunctionFragment;
    'stableTokens(address)': FunctionFragment;
    'swap(address,address,address)': FunctionFragment;
    'swapFeeBasisPoints()': FunctionFragment;
    'taxBasisPoints()': FunctionFragment;
    'tokenBalances(address)': FunctionFragment;
    'tokenDecimals(address)': FunctionFragment;
    'tokenToUsdMin(address,uint256)': FunctionFragment;
    'tokenWeights(address)': FunctionFragment;
    'totalTokenWeights()': FunctionFragment;
    'usdg()': FunctionFragment;
    'usdgAmounts(address)': FunctionFragment;
    'whitelistedTokenCount()': FunctionFragment;
    'whitelistedTokens(address)': FunctionFragment;
    'withdrawFees(address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allWhitelistedTokens'
      | 'allWhitelistedTokensLength'
      | 'approvedRouters'
      | 'bufferAmounts'
      | 'buyUSDG'
      | 'cumulativeFundingRates'
      | 'decreasePosition'
      | 'directPoolDeposit'
      | 'feeReserves'
      | 'fundingInterval'
      | 'fundingRateFactor'
      | 'getDelta'
      | 'getFeeBasisPoints'
      | 'getMaxPrice'
      | 'getMinPrice'
      | 'getNextFundingRate'
      | 'getPosition'
      | 'getRedemptionAmount'
      | 'globalShortAveragePrices'
      | 'globalShortSizes'
      | 'gov'
      | 'guaranteedUsd'
      | 'hasDynamicFees'
      | 'inManagerMode'
      | 'inPrivateLiquidationMode'
      | 'increasePosition'
      | 'isInitialized'
      | 'isLeverageEnabled'
      | 'isLiquidator'
      | 'isManager'
      | 'isSwapEnabled'
      | 'lastFundingTimes'
      | 'liquidationFeeUsd'
      | 'marginFeeBasisPoints'
      | 'maxGasPrice'
      | 'maxLeverage'
      | 'maxUsdgAmounts'
      | 'minProfitBasisPoints'
      | 'minProfitTime'
      | 'mintBurnFeeBasisPoints'
      | 'poolAmounts'
      | 'priceFeed'
      | 'reservedAmounts'
      | 'router'
      | 'sellUSDG'
      | 'setError'
      | 'setFees'
      | 'setInManagerMode'
      | 'setIsLeverageEnabled'
      | 'setIsSwapEnabled'
      | 'setManager'
      | 'setMaxGasPrice'
      | 'setPriceFeed'
      | 'setTokenConfig'
      | 'shortableTokens'
      | 'stableFundingRateFactor'
      | 'stableSwapFeeBasisPoints'
      | 'stableTaxBasisPoints'
      | 'stableTokens'
      | 'swap'
      | 'swapFeeBasisPoints'
      | 'taxBasisPoints'
      | 'tokenBalances'
      | 'tokenDecimals'
      | 'tokenToUsdMin'
      | 'tokenWeights'
      | 'totalTokenWeights'
      | 'usdg'
      | 'usdgAmounts'
      | 'whitelistedTokenCount'
      | 'whitelistedTokens'
      | 'withdrawFees'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'allWhitelistedTokens',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'allWhitelistedTokensLength',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'approvedRouters',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'bufferAmounts',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'buyUSDG',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'cumulativeFundingRates',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'decreasePosition',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'directPoolDeposit',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'feeReserves',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'fundingInterval',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'fundingRateFactor',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getDelta',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'getFeeBasisPoints',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMaxPrice',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMinPrice',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getNextFundingRate',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPosition',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRedemptionAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'globalShortAveragePrices',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'globalShortSizes',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'gov', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'guaranteedUsd',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasDynamicFees',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'inManagerMode',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'inPrivateLiquidationMode',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'increasePosition',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'isInitialized',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isLeverageEnabled',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isLiquidator',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'isManager',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'isSwapEnabled',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'lastFundingTimes',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidationFeeUsd',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'marginFeeBasisPoints',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'maxGasPrice',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'maxLeverage',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'maxUsdgAmounts',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'minProfitBasisPoints',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'minProfitTime',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'mintBurnFeeBasisPoints',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'poolAmounts',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'reservedAmounts',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'router', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'sellUSDG',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setError',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setFees',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setInManagerMode',
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setIsLeverageEnabled',
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setIsSwapEnabled',
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setManager',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxGasPrice',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setPriceFeed',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'setTokenConfig',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'shortableTokens',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'stableFundingRateFactor',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'stableSwapFeeBasisPoints',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'stableTaxBasisPoints',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'stableTokens',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'swap',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapFeeBasisPoints',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'taxBasisPoints',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenBalances',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenDecimals',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenToUsdMin',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenWeights',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalTokenWeights',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'usdg', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'usdgAmounts',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'whitelistedTokenCount',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'whitelistedTokens',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: 'allWhitelistedTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'allWhitelistedTokensLength',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'approvedRouters',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'bufferAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'buyUSDG', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'cumulativeFundingRates',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'decreasePosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'directPoolDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeReserves',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'fundingInterval',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'fundingRateFactor',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getDelta', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getFeeBasisPoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMaxPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMinPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNextFundingRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRedemptionAmount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'globalShortAveragePrices',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'globalShortSizes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'gov', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'guaranteedUsd',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'hasDynamicFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'inManagerMode',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'inPrivateLiquidationMode',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increasePosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isInitialized',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isLeverageEnabled',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isLiquidator',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isManager', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isSwapEnabled',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastFundingTimes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidationFeeUsd',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'marginFeeBasisPoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxGasPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxLeverage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxUsdgAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'minProfitBasisPoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'minProfitTime',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintBurnFeeBasisPoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'poolAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'reservedAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellUSDG', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setError', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFees', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setInManagerMode',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setIsLeverageEnabled',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setIsSwapEnabled',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setManager', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setMaxGasPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setPriceFeed',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setTokenConfig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'shortableTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stableFundingRateFactor',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stableSwapFeeBasisPoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stableTaxBasisPoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stableTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapFeeBasisPoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'taxBasisPoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokenBalances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokenDecimals',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokenToUsdMin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokenWeights',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalTokenWeights',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'usdg', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'usdgAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedTokenCount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allWhitelistedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allWhitelistedTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    approvedRouters(
      _account: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bufferAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyUSDG(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cumulativeFundingRates(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    directPoolDeposit(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeReserves(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fundingInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingRateFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ]
    >;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    globalShortAveragePrices(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    globalShortSizes(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    guaranteedUsd(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasDynamicFees(overrides?: CallOverrides): Promise<[boolean]>;

    inManagerMode(overrides?: CallOverrides): Promise<[boolean]>;

    inPrivateLiquidationMode(overrides?: CallOverrides): Promise<[boolean]>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isLiquidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isManager(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSwapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    lastFundingTimes(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLeverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxUsdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minProfitBasisPoints(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minProfitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    reservedAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sellUSDG(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setError(
      _errorCode: PromiseOrValue<BigNumberish>,
      _error: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInManagerMode(
      _inManagerMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsLeverageEnabled(
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsSwapEnabled(
      _isSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isManager: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxGasPrice(
      _maxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _redemptionBps: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shortableTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stableFundingRateFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableTaxBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swap(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    taxBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenBalances(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenDecimals(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenWeights(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalTokenWeights(overrides?: CallOverrides): Promise<[BigNumber]>;

    usdg(overrides?: CallOverrides): Promise<[string]>;

    usdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistedTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allWhitelistedTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allWhitelistedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  approvedRouters(
    _account: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bufferAmounts(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyUSDG(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cumulativeFundingRates(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreasePosition(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _collateralDelta: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  directPoolDeposit(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeReserves(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

  fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

  getDelta(
    _indexToken: PromiseOrValue<string>,
    _size: PromiseOrValue<BigNumberish>,
    _averagePrice: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _lastIncreasedTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getFeeBasisPoints(
    _token: PromiseOrValue<string>,
    _usdgDelta: PromiseOrValue<BigNumberish>,
    _feeBasisPoints: PromiseOrValue<BigNumberish>,
    _taxBasisPoints: PromiseOrValue<BigNumberish>,
    _increment: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextFundingRate(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPosition(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber
    ]
  >;

  getRedemptionAmount(
    _token: PromiseOrValue<string>,
    _usdgAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalShortAveragePrices(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalShortSizes(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  guaranteedUsd(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasDynamicFees(overrides?: CallOverrides): Promise<boolean>;

  inManagerMode(overrides?: CallOverrides): Promise<boolean>;

  inPrivateLiquidationMode(overrides?: CallOverrides): Promise<boolean>;

  increasePosition(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

  isLiquidator(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isManager(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

  lastFundingTimes(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

  marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

  maxUsdgAmounts(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minProfitBasisPoints(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

  mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  poolAmounts(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  reservedAmounts(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  sellUSDG(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setError(
    _errorCode: PromiseOrValue<BigNumberish>,
    _error: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _taxBasisPoints: PromiseOrValue<BigNumberish>,
    _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
    _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
    _minProfitTime: PromiseOrValue<BigNumberish>,
    _hasDynamicFees: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInManagerMode(
    _inManagerMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsLeverageEnabled(
    _isLeverageEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsSwapEnabled(
    _isSwapEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManager(
    _manager: PromiseOrValue<string>,
    _isManager: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxGasPrice(
    _maxGasPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenConfig(
    _token: PromiseOrValue<string>,
    _tokenDecimals: PromiseOrValue<BigNumberish>,
    _redemptionBps: PromiseOrValue<BigNumberish>,
    _minProfitBps: PromiseOrValue<BigNumberish>,
    _maxUsdgAmount: PromiseOrValue<BigNumberish>,
    _isStable: PromiseOrValue<boolean>,
    _isShortable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shortableTokens(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stableFundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

  stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  stableTaxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  stableTokens(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swap(
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  tokenBalances(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenDecimals(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenToUsdMin(
    _token: PromiseOrValue<string>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenWeights(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalTokenWeights(overrides?: CallOverrides): Promise<BigNumber>;

  usdg(overrides?: CallOverrides): Promise<string>;

  usdgAmounts(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistedTokens(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawFees(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allWhitelistedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allWhitelistedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    approvedRouters(
      _account: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bufferAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyUSDG(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeFundingRates(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directPoolDeposit(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeReserves(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ]
    >;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortAveragePrices(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortSizes(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    guaranteedUsd(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDynamicFees(overrides?: CallOverrides): Promise<boolean>;

    inManagerMode(overrides?: CallOverrides): Promise<boolean>;

    inPrivateLiquidationMode(overrides?: CallOverrides): Promise<boolean>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

    isLiquidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isManager(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

    lastFundingTimes(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minProfitBasisPoints(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    poolAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    reservedAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    sellUSDG(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setError(
      _errorCode: PromiseOrValue<BigNumberish>,
      _error: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInManagerMode(
      _inManagerMode: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsLeverageEnabled(
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSwapEnabled(
      _isSwapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isManager: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGasPrice(
      _maxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _redemptionBps: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    shortableTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stableFundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTaxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swap(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalances(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenDecimals(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWeights(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTokenWeights(overrides?: CallOverrides): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<string>;

    usdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    allWhitelistedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allWhitelistedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    approvedRouters(
      _account: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bufferAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyUSDG(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cumulativeFundingRates(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    directPoolDeposit(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeReserves(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortAveragePrices(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortSizes(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    guaranteedUsd(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDynamicFees(overrides?: CallOverrides): Promise<BigNumber>;

    inManagerMode(overrides?: CallOverrides): Promise<BigNumber>;

    inPrivateLiquidationMode(overrides?: CallOverrides): Promise<BigNumber>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isManager(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSwapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    lastFundingTimes(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minProfitBasisPoints(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    poolAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    reservedAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sellUSDG(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setError(
      _errorCode: PromiseOrValue<BigNumberish>,
      _error: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFees(
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInManagerMode(
      _inManagerMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsLeverageEnabled(
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsSwapEnabled(
      _isSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isManager: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxGasPrice(
      _maxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _redemptionBps: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shortableTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTaxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalances(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenDecimals(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWeights(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTokenWeights(overrides?: CallOverrides): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<BigNumber>;

    usdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allWhitelistedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allWhitelistedTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedRouters(
      _account: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bufferAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyUSDG(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cumulativeFundingRates(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    directPoolDeposit(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeReserves(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingRateFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalShortAveragePrices(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalShortSizes(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guaranteedUsd(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasDynamicFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inManagerMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inPrivateLiquidationMode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLiquidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isManager(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSwapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastFundingTimes(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marginFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLeverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxUsdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minProfitBasisPoints(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minProfitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintBurnFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reservedAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellUSDG(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setError(
      _errorCode: PromiseOrValue<BigNumberish>,
      _error: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInManagerMode(
      _inManagerMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsLeverageEnabled(
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsSwapEnabled(
      _isSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isManager: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGasPrice(
      _maxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _redemptionBps: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shortableTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFundingRateFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableSwapFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableTaxBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBalances(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenDecimals(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenWeights(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTokenWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
