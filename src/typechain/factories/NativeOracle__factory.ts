/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { NativeOracle, NativeOracleInterface } from '../NativeOracle';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_aggregator',
        type: 'address',
      },
      {
        internalType: 'uint8',
        name: '_vTokenDecimals',
        type: 'uint8',
      },
      {
        internalType: 'uint8',
        name: '_vQuoteDecimals',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'aggregator',
        type: 'address',
      },
    ],
    name: 'IllegalAggregatorAddress',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotEnoughHistory',
    type: 'error',
  },
  {
    inputs: [],
    name: 'aggregator',
    outputs: [
      {
        internalType: 'contract AggregatorV3Interface',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'twapDuration',
        type: 'uint32',
      },
    ],
    name: 'getTwapPriceX128',
    outputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x60c060405234801561001057600080fd5b506040516109e13803806109e183398101604081905261002f916100c5565b61004b836001600160a01b03166100a260201b6101931760201c565b156100705760405163091b998160e11b81526000600482015260240160405180910390fd5b600080546001600160a01b0319166001600160a01b03949094169390931790925560ff9081166080521660a052610116565b6001600160a01b03161590565b805160ff811681146100c057600080fd5b919050565b6000806000606084860312156100da57600080fd5b83516001600160a01b03811681146100f157600080fd5b92506100ff602085016100af565b915061010d604085016100af565b90509250925092565b60805160a0516108a761013a600039600060a70152600061015601526108a76000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063245a7bfc1461003b578063dd86c1011461006b575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e6100793660046105f6565b61008c565b604051908152602001610062565b600061009d8263ffffffff166101a0565b905061018d6100cd7f0000000000000000000000000000000000000000000000000000000000000000600a610716565b6100db90600160801b610725565b60008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561012c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101509190610744565b61017a907f0000000000000000000000000000000000000000000000000000000000000000610767565b61018590600a610716565b8391906102dd565b92915050565b6001600160a01b03161590565b6000806000806101ae610390565b919450925090504260006101c2878361078c565b90508615806101d857506001600160501b038516155b806101e35750808311155b156101f357509195945050505050565b60006101ff848461078c565b9050600061020d8287610725565b905060008060008796505b896001600160501b031660000361025057841561023e5761023985856107a3565b610240565b885b9c9b505050505050505050505050565b61025b60018b6107c5565b99506102668a61047f565b93509150508582116102975761027c868861078c565b6102869082610725565b61029090856107ed565b93506102cd565b6102a1828861078c565b92506102ad8382610725565b6102b790856107ed565b93506102c383866107ed565b9450819650610218565b831561023e576102398c856107a3565b6000808060001985870985870292508281108382030391505080600003610316576000841161030b57600080fd5b508290049050610389565b80841161032257600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60008060008060008060008054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e9190610821565b509350509250925081945060008212801561043057506001600160501b038316155b1561044e57604051639ee522a960e01b815260040160405180910390fd5b60008212156104735761046a6104656001856107c5565b61047f565b90965090935090505b91959394509092915050565b60008054604051639a6fc8f560e01b81526001600160501b0384166004820152829182918291829182916001600160a01b031690639a6fc8f59060240160a060405180830381865afa1580156104d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fd9190610821565b50935050925092505b60008212801561051f57506000836001600160501b0316115b156105b45761052f6001846107c5565b600054604051639a6fc8f560e01b81526001600160501b03831660048201529194506001600160a01b031690639a6fc8f59060240160a060405180830381865afa158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190610821565b50919450909250610506915050565b6000821280156105cb57506001600160501b038316155b156105e957604051639ee522a960e01b815260040160405180910390fd5b9196909550909350915050565b60006020828403121561060857600080fd5b813563ffffffff8116811461038957600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561066d5781600019048211156106535761065361061c565b8085161561066057918102915b93841c9390800290610637565b509250929050565b6000826106845750600161018d565b816106915750600061018d565b81600181146106a757600281146106b1576106cd565b600191505061018d565b60ff8411156106c2576106c261061c565b50506001821b61018d565b5060208310610133831016604e8410600b84101617156106f0575081810a61018d565b6106fa8383610632565b806000190482111561070e5761070e61061c565b029392505050565b600061038960ff841683610675565b600081600019048311821515161561073f5761073f61061c565b500290565b60006020828403121561075657600080fd5b815160ff8116811461038957600080fd5b600060ff821660ff84168060ff038211156107845761078461061c565b019392505050565b60008282101561079e5761079e61061c565b500390565b6000826107c057634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160501b03838116908316818110156107e5576107e561061c565b039392505050565b600082198211156108005761080061061c565b500190565b80516001600160501b038116811461081c57600080fd5b919050565b600080600080600060a0868803121561083957600080fd5b61084286610805565b945060208601519350604086015192506060860151915061086560808701610805565b9050929550929590935056fea264697066735822122076290ce807b556b1cb0eefc2b2e7e4b563803b689d7b0cf4bbc56ec530e89fe964736f6c634300080d0033';

type NativeOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NativeOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NativeOracle__factory extends ContractFactory {
  constructor(...args: NativeOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'NativeOracle';
  }

  deploy(
    _aggregator: string,
    _vTokenDecimals: BigNumberish,
    _vQuoteDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NativeOracle> {
    return super.deploy(
      _aggregator,
      _vTokenDecimals,
      _vQuoteDecimals,
      overrides || {}
    ) as Promise<NativeOracle>;
  }
  getDeployTransaction(
    _aggregator: string,
    _vTokenDecimals: BigNumberish,
    _vQuoteDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _aggregator,
      _vTokenDecimals,
      _vQuoteDecimals,
      overrides || {}
    );
  }
  attach(address: string): NativeOracle {
    return super.attach(address) as NativeOracle;
  }
  connect(signer: Signer): NativeOracle__factory {
    return super.connect(signer) as NativeOracle__factory;
  }
  static readonly contractName: 'NativeOracle';
  public readonly contractName: 'NativeOracle';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NativeOracleInterface {
    return new utils.Interface(_abi) as NativeOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NativeOracle {
    return new Contract(address, _abi, signerOrProvider) as NativeOracle;
  }
}
