/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { NativeOracle, NativeOracleInterface } from '../NativeOracle';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_aggregator',
        type: 'address',
      },
      {
        internalType: 'uint8',
        name: '_vTokenDecimals',
        type: 'uint8',
      },
      {
        internalType: 'uint8',
        name: '_vQuoteDecimals',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'aggregator',
        type: 'address',
      },
    ],
    name: 'IllegalAggregatorAddress',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotEnoughHistory',
    type: 'error',
  },
  {
    inputs: [],
    name: 'aggregator',
    outputs: [
      {
        internalType: 'contract AggregatorV3Interface',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'twapDuration',
        type: 'uint32',
      },
    ],
    name: 'getTwapPriceX128',
    outputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x60c060405234801561001057600080fd5b506040516109de3803806109de83398101604081905261002f916100c5565b61004b836001600160a01b03166100a260201b6101931760201c565b156100705760405163091b998160e11b81526000600482015260240160405180910390fd5b600080546001600160a01b0319166001600160a01b03949094169390931790925560ff9081166080521660a052610116565b6001600160a01b03161590565b805160ff811681146100c057600080fd5b919050565b6000806000606084860312156100da57600080fd5b83516001600160a01b03811681146100f157600080fd5b92506100ff602085016100af565b915061010d604085016100af565b90509250925092565b60805160a0516108a461013a600039600060a70152600061015601526108a46000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063245a7bfc1461003b578063dd86c1011461006b575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e6100793660046105f3565b61008c565b604051908152602001610062565b600061009d8263ffffffff166101a0565b905061018d6100cd7f0000000000000000000000000000000000000000000000000000000000000000600a610713565b6100db90600160801b610722565b60008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561012c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101509190610741565b61017a907f0000000000000000000000000000000000000000000000000000000000000000610764565b61018590600a610713565b8391906102da565b92915050565b6001600160a01b03161590565b6000806000806101ae61038d565b919450925090504260006101c28783610789565b90508615806101d857506001600160501b038516155b806101e35750808311155b156101f357509195945050505050565b60006101ff8484610789565b9050600061020d8287610722565b905060008060008796505b6001600160501b038a1661024d57841561023b5761023685856107a0565b61023d565b885b9c9b505050505050505050505050565b61025860018b6107c2565b99506102638a61047c565b9350915050858211610294576102798688610789565b6102839082610722565b61028d90856107ea565b93506102ca565b61029e8288610789565b92506102aa8382610722565b6102b490856107ea565b93506102c083866107ea565b9450819650610218565b831561023b576102368c856107a0565b600080806000198587098587029250828110838203039150508060001415610314576000841161030957600080fd5b508290049050610386565b80841161032057600080fd5b60008486880960018619810187169687900496828603819004959092119093036000829003919091049092019190910291909117600260038502811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b60008060008060008060008054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b919061081e565b509350509250925081945060008212801561042d57506001600160501b038316155b1561044b57604051639ee522a960e01b815260040160405180910390fd5b6000821215610470576104676104626001856107c2565b61047c565b90965090935090505b91959394509092915050565b60008054604051639a6fc8f560e01b81526001600160501b0384166004820152829182918291829182916001600160a01b031690639a6fc8f59060240160a060405180830381865afa1580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa919061081e565b50935050925092505b60008212801561051c57506000836001600160501b0316115b156105b15761052c6001846107c2565b600054604051639a6fc8f560e01b81526001600160501b03831660048201529194506001600160a01b031690639a6fc8f59060240160a060405180830381865afa15801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a2919061081e565b50919450909250610503915050565b6000821280156105c857506001600160501b038316155b156105e657604051639ee522a960e01b815260040160405180910390fd5b9196909550909350915050565b60006020828403121561060557600080fd5b813563ffffffff8116811461038657600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561066a57816000190482111561065057610650610619565b8085161561065d57918102915b93841c9390800290610634565b509250929050565b6000826106815750600161018d565b8161068e5750600061018d565b81600181146106a457600281146106ae576106ca565b600191505061018d565b60ff8411156106bf576106bf610619565b50506001821b61018d565b5060208310610133831016604e8410600b84101617156106ed575081810a61018d565b6106f7838361062f565b806000190482111561070b5761070b610619565b029392505050565b600061038660ff841683610672565b600081600019048311821515161561073c5761073c610619565b500290565b60006020828403121561075357600080fd5b815160ff8116811461038657600080fd5b600060ff821660ff84168060ff0382111561078157610781610619565b019392505050565b60008282101561079b5761079b610619565b500390565b6000826107bd57634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160501b03838116908316818110156107e2576107e2610619565b039392505050565b600082198211156107fd576107fd610619565b500190565b80516001600160501b038116811461081957600080fd5b919050565b600080600080600060a0868803121561083657600080fd5b61083f86610802565b945060208601519350604086015192506060860151915061086260808701610802565b9050929550929590935056fea2646970667358221220553c312db2834b73e917544759750384a03d454ffc520915410c1226bc5f2e4c64736f6c634300080c0033';

type NativeOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NativeOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NativeOracle__factory extends ContractFactory {
  constructor(...args: NativeOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'NativeOracle';
  }

  deploy(
    _aggregator: string,
    _vTokenDecimals: BigNumberish,
    _vQuoteDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NativeOracle> {
    return super.deploy(
      _aggregator,
      _vTokenDecimals,
      _vQuoteDecimals,
      overrides || {}
    ) as Promise<NativeOracle>;
  }
  getDeployTransaction(
    _aggregator: string,
    _vTokenDecimals: BigNumberish,
    _vQuoteDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _aggregator,
      _vTokenDecimals,
      _vQuoteDecimals,
      overrides || {}
    );
  }
  attach(address: string): NativeOracle {
    return super.attach(address) as NativeOracle;
  }
  connect(signer: Signer): NativeOracle__factory {
    return super.connect(signer) as NativeOracle__factory;
  }
  static readonly contractName: 'NativeOracle';
  public readonly contractName: 'NativeOracle';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NativeOracleInterface {
    return new utils.Interface(_abi) as NativeOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NativeOracle {
    return new Contract(address, _abi, signerOrProvider) as NativeOracle;
  }
}
