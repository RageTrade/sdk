/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  ETHIndexOracle,
  ETHIndexOracleInterface,
} from '../ETHIndexOracle';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_aggregator',
        type: 'address',
      },
      {
        internalType: 'uint8',
        name: '_vTokenDecimals',
        type: 'uint8',
      },
      {
        internalType: 'uint8',
        name: '_vQuoteDecimals',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'aggregator',
        type: 'address',
      },
    ],
    name: 'IllegalAggregatorAddress',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotEnoughHistory',
    type: 'error',
  },
  {
    inputs: [],
    name: 'aggregator',
    outputs: [
      {
        internalType: 'contract AggregatorV3Interface',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'twapDuration',
        type: 'uint32',
      },
    ],
    name: 'getTwapPriceX128',
    outputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x60c060405234801561001057600080fd5b50604051610a09380380610a0983398101604081905261002f916100c5565b61004b836001600160a01b03166100a260201b6101a01760201c565b156100705760405163091b998160e11b81526000600482015260240160405180910390fd5b600080546001600160a01b0319166001600160a01b03949094169390931790925560ff9081166080521660a052610116565b6001600160a01b03161590565b805160ff811681146100c057600080fd5b919050565b6000806000606084860312156100da57600080fd5b83516001600160a01b03811681146100f157600080fd5b92506100ff602085016100af565b915061010d604085016100af565b90509250925092565b60805160a0516108cf61013a600039600060a70152600061016301526108cf6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063245a7bfc1461003b578063dd86c1011461006b575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e610079366004610618565b61008c565b604051908152602001610062565b600061009d8263ffffffff166101ad565b905061019a6100cd7f0000000000000000000000000000000000000000000000000000000000000000600a610738565b6100e890700100000000000000000000000000000000610747565b60008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015d9190610766565b610187907f0000000000000000000000000000000000000000000000000000000000000000610789565b61019290600a610738565b8391906102f0565b92915050565b6001600160a01b03161590565b6000806000806101bb6103a3565b919450925090504260006101cf87836107ae565b90508615806101e8575069ffffffffffffffffffff8516155b806101f35750808311155b1561020357509195945050505050565b600061020f84846107ae565b9050600061021d8287610747565b905060008060008796505b8969ffffffffffffffffffff166000036102635784156102515761024c85856107c5565b610253565b885b9c9b505050505050505050505050565b61026e60018b6107e7565b99506102798a610495565b93509150508582116102aa5761028f86886107ae565b6102999082610747565b6102a39085610812565b93506102e0565b6102b482886107ae565b92506102c08382610747565b6102ca9085610812565b93506102d68386610812565b9450819650610228565b83156102515761024c8c856107c5565b6000808060001985870985870292508281108382030391505080600003610329576000841161031e57600080fd5b50829004905061039c565b80841161033557600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60008060008060008060008054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156103fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104219190610849565b5093505092509250819450600082128015610446575069ffffffffffffffffffff8316155b1561046457604051639ee522a960e01b815260040160405180910390fd5b60008212156104895761048061047b6001856107e7565b610495565b90965090935090505b91959394509092915050565b60008054604051639a6fc8f560e01b815269ffffffffffffffffffff84166004820152829182918291829182916001600160a01b031690639a6fc8f59060240160a060405180830381865afa1580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105169190610849565b50935050925092505b60008212801561053b575060008369ffffffffffffffffffff16115b156105d35761054b6001846107e7565b600054604051639a6fc8f560e01b815269ffffffffffffffffffff831660048201529194506001600160a01b031690639a6fc8f59060240160a060405180830381865afa1580156105a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c49190610849565b5091945090925061051f915050565b6000821280156105ed575069ffffffffffffffffffff8316155b1561060b57604051639ee522a960e01b815260040160405180910390fd5b9196909550909350915050565b60006020828403121561062a57600080fd5b813563ffffffff8116811461039c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561068f5781600019048211156106755761067561063e565b8085161561068257918102915b93841c9390800290610659565b509250929050565b6000826106a65750600161019a565b816106b35750600061019a565b81600181146106c957600281146106d3576106ef565b600191505061019a565b60ff8411156106e4576106e461063e565b50506001821b61019a565b5060208310610133831016604e8410600b8410161715610712575081810a61019a565b61071c8383610654565b80600019048211156107305761073061063e565b029392505050565b600061039c60ff841683610697565b60008160001904831182151516156107615761076161063e565b500290565b60006020828403121561077857600080fd5b815160ff8116811461039c57600080fd5b600060ff821660ff84168060ff038211156107a6576107a661063e565b019392505050565b6000828210156107c0576107c061063e565b500390565b6000826107e257634e487b7160e01b600052601260045260246000fd5b500490565b600069ffffffffffffffffffff8381169083168181101561080a5761080a61063e565b039392505050565b600082198211156108255761082561063e565b500190565b805169ffffffffffffffffffff8116811461084457600080fd5b919050565b600080600080600060a0868803121561086157600080fd5b61086a8661082a565b945060208601519350604086015192506060860151915061088d6080870161082a565b9050929550929590935056fea264697066735822122078997978889448e55c610b2c21f1e094c97183e9e2550988e3dc22c836a1b77564736f6c634300080d0033';

type ETHIndexOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ETHIndexOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ETHIndexOracle__factory extends ContractFactory {
  constructor(...args: ETHIndexOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'ETHIndexOracle';
  }

  deploy(
    _aggregator: string,
    _vTokenDecimals: BigNumberish,
    _vQuoteDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ETHIndexOracle> {
    return super.deploy(
      _aggregator,
      _vTokenDecimals,
      _vQuoteDecimals,
      overrides || {}
    ) as Promise<ETHIndexOracle>;
  }
  getDeployTransaction(
    _aggregator: string,
    _vTokenDecimals: BigNumberish,
    _vQuoteDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _aggregator,
      _vTokenDecimals,
      _vQuoteDecimals,
      overrides || {}
    );
  }
  attach(address: string): ETHIndexOracle {
    return super.attach(address) as ETHIndexOracle;
  }
  connect(signer: Signer): ETHIndexOracle__factory {
    return super.connect(signer) as ETHIndexOracle__factory;
  }
  static readonly contractName: 'ETHIndexOracle';
  public readonly contractName: 'ETHIndexOracle';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ETHIndexOracleInterface {
    return new utils.Interface(_abi) as ETHIndexOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ETHIndexOracle {
    return new Contract(address, _abi, signerOrProvider) as ETHIndexOracle;
  }
}
