/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  SwapManager,
  SwapManagerInterface,
} from '../../../contracts/libraries/SwapManager';

const _abi = [
  {
    inputs: [],
    name: 'CYS_NEGATIVE_CRV_PRICE',
    type: 'error',
  },
];

const _bytecode =
  '0x6108b261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063585f5c691461005057806369b6f5dc146100825780638b8f9f0f146100a2575b600080fd5b81801561005c57600080fd5b5061007061006b366004610597565b6100c4565b60405190815260200160405180910390f35b81801561008e57600080fd5b5061007061009d3660046105f1565b610182565b8180156100ae57600080fd5b506100c26100bd366004610679565b61030d565b005b6000806127106100d6866123286106fa565b6100e09190610719565b6040805160a08101825286815230602082015242818301526060810188905260808101839052905163c04b8d5960e01b8152919250906001600160a01b0385169063c04b8d599061013590849060040161073b565b6020604051808303816000875af1158015610154573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017891906107ce565b9695505050505050565b60008061271061019288826107e7565b8961019c8961044a565b6101a691906106fa565b6101b091906106fa565b6101ba9190610719565b90506305f5e100670de0b6b3a76400006101d783620f42406106fa565b6101e19190610719565b6101eb9190610719565b6040805160a0810182528781523060208201524281830152606081018b905260808101839052905163c04b8d5960e01b8152919250906001600160a01b0386169063c04b8d599061024090849060040161073b565b6020604051808303816000875af115801561025f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028391906107ce565b604080516060810182528281526000602082018190528183018190529151634515cef360e01b8152929550916001600160a01b03871691634515cef3916102ce9185916004016107fe565b600060405180830381600087803b1580156102e857600080fd5b505af11580156102fc573d6000803e3d6000fd5b505050505050509695505050505050565b600061271061031e866123286106fa565b6103289190610719565b6040805160a08101825286815230602082015242818301526060810188905260808101839052905163c04b8d5960e01b8152919250906000906001600160a01b0386169063c04b8d599061038090859060040161073b565b6020604051808303816000875af115801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c391906107ce565b604080516060810182528281526000602082018190528183018190529151634515cef360e01b8152929350916001600160a01b03871691634515cef39161040e9185916004016107fe565b600060405180830381600087803b15801561042857600080fd5b505af115801561043c573d6000803e3d6000fd5b505050505050505050505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190610855565b50505091505060008112156104d75760405163033e96f360e21b815260040160405180910390fd5b92915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261050457600080fd5b81356001600160401b038082111561051e5761051e6104dd565b604051601f8301601f19908116603f01168101908282118183101715610546576105466104dd565b8160405283815286602085880101111561055f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6001600160a01b038116811461059457600080fd5b50565b6000806000606084860312156105ac57600080fd5b8335925060208401356001600160401b038111156105c957600080fd5b6105d5868287016104f3565b92505060408401356105e68161057f565b809150509250925092565b60008060008060008060c0878903121561060a57600080fd5b863595506020870135945060408701356106238161057f565b935060608701356001600160401b0381111561063e57600080fd5b61064a89828a016104f3565b935050608087013561065b8161057f565b915060a087013561066b8161057f565b809150509295509295509295565b6000806000806080858703121561068f57600080fd5b8435935060208501356001600160401b038111156106ac57600080fd5b6106b8878288016104f3565b93505060408501356106c98161057f565b915060608501356106d98161057f565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610714576107146106e4565b500290565b60008261073657634e487b7160e01b600052601260045260246000fd5b500490565b60006020808352835160a08285015280518060c086015260005b818110156107715782810184015186820160e001528301610755565b8181111561078357600060e083880101525b50918501516001600160a01b0381166040860152916040860151606086015260608601516080860152608086015160a086015260e0601f19601f830116860101935050505092915050565b6000602082840312156107e057600080fd5b5051919050565b6000828210156107f9576107f96106e4565b500390565b60808101818460005b6003811015610826578151835260209283019290910190600101610807565b5050508260608301529392505050565b805169ffffffffffffffffffff8116811461085057600080fd5b919050565b600080600080600060a0868803121561086d57600080fd5b61087686610836565b945060208601519350604086015192506060860151915061089960808701610836565b9050929550929590935056fea164736f6c634300080d000a';

type SwapManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapManager__factory extends ContractFactory {
  constructor(...args: SwapManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SwapManager> {
    return super.deploy(overrides || {}) as Promise<SwapManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapManager {
    return super.attach(address) as SwapManager;
  }
  override connect(signer: Signer): SwapManager__factory {
    return super.connect(signer) as SwapManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapManagerInterface {
    return new utils.Interface(_abi) as SwapManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapManager {
    return new Contract(address, _abi, signerOrProvider) as SwapManager;
  }
}
