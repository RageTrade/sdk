/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  StableSwapMock,
  StableSwapMockInterface,
} from '../../../../../contracts/test/curve-mocks/StableSwapMock.sol/StableSwapMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_lpToken',
        type: 'address',
      },
      {
        internalType: 'address[3]',
        name: '_tokens',
        type: 'address[3]',
      },
      {
        internalType: 'address[3]',
        name: '_oracles',
        type: 'address[3]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'NEGATIVE_PRICE',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256[3]',
        name: 'amounts',
        type: 'uint256[3]',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'add_liquidity',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int128',
        name: 'from',
        type: 'int128',
      },
      {
        internalType: 'int128',
        name: 'to',
        type: 'int128',
      },
      {
        internalType: 'uint256',
        name: '_from_amount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'exchange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'lpToken',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'lp_price',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'oracles',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'quantities',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'token_amount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'index',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'remove_liquidity_one_coin',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'tokens',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162001129380380620011298339810160408190526200003491620001fa565b620000436000836003620000aa565b506200005260038281620000aa565b5060408051606081018252600680825260086020830152601292820192909252620000809190600362000107565b5050600c80546001600160a01b0319166001600160a01b0393909316929092179091555062000246565b8260038101928215620000f5579160200282015b82811115620000f557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620000be565b50620001039291506200013d565b5090565b8260038101928215620000f5579160200282015b82811115620000f5578251829060ff169055916020019190600101906200011b565b5b808211156200010357600081556001016200013e565b80516001600160a01b03811681146200016c57600080fd5b919050565b600082601f8301126200018357600080fd5b604051606081016001600160401b0381118282101715620001b457634e487b7160e01b600052604160045260246000fd5b604052806060840185811115620001ca57600080fd5b845b81811015620001ef57620001e08162000154565b835260209283019201620001cc565b509195945050505050565b600080600060e084860312156200021057600080fd5b6200021b8462000154565b92506200022c856020860162000171565b91506200023d856080860162000171565b90509250925092565b610ed380620002566000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c80633df02124146100885780633f47e6621461009d5780634515cef3146100c35780634f64b2be146100d657806354f0f7d5146101015780635b69a7d8146101095780635fcbd2851461011c578063a41254031461012f578063f1dc3cc914610142575b600080fd5b61009b610096366004610b6f565b610155565b005b6100b06100ab366004610bb1565b61040d565b6040519081526020015b60405180910390f35b61009b6100d1366004610bca565b610424565b6100e96100e4366004610bb1565b6106bf565b6040516001600160a01b0390911681526020016100ba565b6100b06106df565b6100e9610117366004610bb1565b610867565b600c546100e9906001600160a01b031681565b6100b061013d366004610bb1565b610877565b61009b610150366004610bf8565b610887565b6001600160801b03808516908416600080836003811061017757610177610c24565b0160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ed9190610c3a565b9050600080836003811061020357610203610c24565b0160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102799190610c3a565b90506000846003811061028e5761028e610c24565b01546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906102c190339030908b90600401610c5d565b6020604051808303816000875af11580156102e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103049190610c81565b50600061037861031583600a610d9d565b61033b6000886003811061032b5761032b610c24565b01546001600160a01b0316610a12565b6103459190610dac565b61035085600a610d9d565b6103666000886003811061032b5761032b610c24565b6103709190610dac565b899190610aa5565b90506000846003811061038d5761038d610c24565b015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906103be9033908590600401610dcb565b6020604051808303816000875af11580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104019190610c81565b50505050505050505050565b6006816003811061041d57600080fd5b0154905081565b60036000805b8281101561063457600085826003811061044657610446610c24565b60200201351115610624576000816003811061046457610464610c24565b01546001600160a01b03166323b872dd333088856003811061048857610488610c24565b60200201356040518463ffffffff1660e01b81526004016104ab93929190610c5d565b6020604051808303816000875af11580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610c81565b5084816003811061050157610501610c24565b60200201356009826003811061051957610519610c24565b0160008282546105299190610de4565b909155506000905080826003811061054357610543610c24565b0160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b99190610c3a565b6105c490600a610d9d565b8683600381106105d6576105d6610c24565b60200201356105f16003856003811061032b5761032b610c24565b610600906402540be400610dac565b61060a9190610dac565b6106149190610dfc565b90506106208184610de4565b9250505b61062d81610e1e565b905061042a565b506000610653670de0b6b3a764000061064b6106df565b849190610aa5565b600c546040516340c10f1960e01b81529192506001600160a01b0316906340c10f19906106869033908590600401610dcb565b600060405180830381600087803b1580156106a057600080fd5b505af11580156106b4573d6000803e3d6000fd5b505050505050505050565b600081600381106106cf57600080fd5b01546001600160a01b0316905081565b600080600c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190610e37565b90508015610858576000620f424060098201546107786003600061032b565b610787906402540be400610dac565b6107919190610dac565b61079b9190610dfc565b905060006305f5e1006009600101546107b66003600161032b565b6107c5906402540be400610dac565b6107cf9190610dac565b6107d99190610dfc565b90506000670de0b6b3a76400006009600201546107f86003600261032b565b610807906402540be400610dac565b6108119190610dac565b61081b9190610dfc565b905083816108298486610de4565b6108339190610de4565b61084590670de0b6b3a7640000610dac565b61084f9190610dfc565b94505050505090565b670de0b6b3a764000091505090565b600381600381106106cf57600080fd5b6009816003811061041d57600080fd5b600c5460405163079cc67960e41b81526001600160a01b03909116906379cc6790906108b99033908790600401610dcb565b600060405180830381600087803b1580156108d357600080fd5b505af11580156108e7573d6000803e3d6000fd5b505050506000670de0b6b3a76400006108fe6106df565b6109089086610dac565b6109129190610dfc565b90506000670de0b6b3a76400006109356003866003811061032b5761032b610c24565b6006866003811061094857610948610c24565b015461095590600a610e50565b61095f9085610dac565b61096d906305f5e100610dac565b6109779190610dfc565b6109819190610dfc565b90506000846003811061099657610996610c24565b015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906109c79033908590600401610dcb565b6020604051808303816000875af11580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a9190610c81565b505050505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190610e76565b5050509150506000811215610a9f5760405163b6cc0ca160e01b815260040160405180910390fd5b92915050565b6000808060001985870985870292508281108382030391505080600003610ade5760008411610ad357600080fd5b508290049050610b51565b808411610aea57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b8035600f81900b8114610b6a57600080fd5b919050565b60008060008060808587031215610b8557600080fd5b610b8e85610b58565b9350610b9c60208601610b58565b93969395505050506040820135916060013590565b600060208284031215610bc357600080fd5b5035919050565b60008060808385031215610bdd57600080fd5b6060830184811115610bee57600080fd5b9294923593505050565b600080600060608486031215610c0d57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610c4c57600080fd5b815160ff81168114610b5157600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610c9357600080fd5b81518015158114610b5157600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610cf4578160001904821115610cda57610cda610ca3565b80851615610ce757918102915b93841c9390800290610cbe565b509250929050565b600082610d0b57506001610a9f565b81610d1857506000610a9f565b8160018114610d2e5760028114610d3857610d54565b6001915050610a9f565b60ff841115610d4957610d49610ca3565b50506001821b610a9f565b5060208310610133831016604e8410600b8410161715610d77575081810a610a9f565b610d818383610cb9565b8060001904821115610d9557610d95610ca3565b029392505050565b6000610b5160ff841683610cfc565b6000816000190483118215151615610dc657610dc6610ca3565b500290565b6001600160a01b03929092168252602082015260400190565b60008219821115610df757610df7610ca3565b500190565b600082610e1957634e487b7160e01b600052601260045260246000fd5b500490565b600060018201610e3057610e30610ca3565b5060010190565b600060208284031215610e4957600080fd5b5051919050565b6000610b518383610cfc565b805169ffffffffffffffffffff81168114610b6a57600080fd5b600080600080600060a08688031215610e8e57600080fd5b610e9786610e5c565b9450602086015193506040860151925060608601519150610eba60808701610e5c565b9050929550929590935056fea164736f6c634300080d000a';

type StableSwapMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StableSwapMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StableSwapMock__factory extends ContractFactory {
  constructor(...args: StableSwapMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lpToken: string,
    _tokens: [string, string, string],
    _oracles: [string, string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StableSwapMock> {
    return super.deploy(
      _lpToken,
      _tokens,
      _oracles,
      overrides || {}
    ) as Promise<StableSwapMock>;
  }
  override getDeployTransaction(
    _lpToken: string,
    _tokens: [string, string, string],
    _oracles: [string, string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lpToken,
      _tokens,
      _oracles,
      overrides || {}
    );
  }
  override attach(address: string): StableSwapMock {
    return super.attach(address) as StableSwapMock;
  }
  override connect(signer: Signer): StableSwapMock__factory {
    return super.connect(signer) as StableSwapMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StableSwapMockInterface {
    return new utils.Interface(_abi) as StableSwapMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StableSwapMock {
    return new Contract(address, _abi, signerOrProvider) as StableSwapMock;
  }
}
