/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  StableSwapMock,
  StableSwapMockInterface,
} from '../../../../../contracts/test/curve-mocks/StableSwapMock.sol/StableSwapMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_lpToken',
        type: 'address',
      },
      {
        internalType: 'address[3]',
        name: '_tokens',
        type: 'address[3]',
      },
      {
        internalType: 'address[3]',
        name: '_oracles',
        type: 'address[3]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'NEGATIVE_PRICE',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256[3]',
        name: 'amounts',
        type: 'uint256[3]',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'add_liquidity',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int128',
        name: 'from',
        type: 'int128',
      },
      {
        internalType: 'int128',
        name: 'to',
        type: 'int128',
      },
      {
        internalType: 'uint256',
        name: '_from_amount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'exchange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'lpToken',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'lp_price',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'oracles',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'quantities',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'token_amount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'index',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'remove_liquidity_one_coin',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'tokens',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '';

type StableSwapMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StableSwapMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StableSwapMock__factory extends ContractFactory {
  constructor(...args: StableSwapMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lpToken: string,
    _tokens: [string, string, string],
    _oracles: [string, string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StableSwapMock> {
    return super.deploy(
      _lpToken,
      _tokens,
      _oracles,
      overrides || {}
    ) as Promise<StableSwapMock>;
  }
  override getDeployTransaction(
    _lpToken: string,
    _tokens: [string, string, string],
    _oracles: [string, string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lpToken,
      _tokens,
      _oracles,
      overrides || {}
    );
  }
  override attach(address: string): StableSwapMock {
    return super.attach(address) as StableSwapMock;
  }
  override connect(signer: Signer): StableSwapMock__factory {
    return super.connect(signer) as StableSwapMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StableSwapMockInterface {
    return new utils.Interface(_abi) as StableSwapMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StableSwapMock {
    return new Contract(address, _abi, signerOrProvider) as StableSwapMock;
  }
}
