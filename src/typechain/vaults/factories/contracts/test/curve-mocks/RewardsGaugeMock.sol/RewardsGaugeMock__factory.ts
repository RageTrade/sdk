/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  RewardsGaugeMock,
  RewardsGaugeMockInterface,
} from '../../../../../contracts/test/curve-mocks/RewardsGaugeMock.sol/RewardsGaugeMock';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_crvToken',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_lpToken',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'claim_rewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'claimable_reward',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'claimable_reward_write',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'crvToken',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_value',
        type: 'uint256',
      },
    ],
    name: 'deposit',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'lpToken',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ratePerBlock',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_value',
        type: 'uint256',
      },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040526402540be40060025534801561001957600080fd5b5060405161084438038061084483398101604081905261003891610085565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100b8565b80516001600160a01b038116811461008057600080fd5b919050565b6000806040838503121561009857600080fd5b6100a183610069565b91506100af60208401610069565b90509250929050565b61077d806100c76000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806359b7e4091161006657806359b7e4091461011e5780635fcbd2851461013157806370a082311461014457806384e9bd7e1461016d578063b6b55f251461018057600080fd5b80632e1a7d4d1461009857806332d7d66d146100ad57806333fd6f74146100dd57806334a4b0a514610115575b600080fd5b6100ab6100a6366004610660565b610193565b005b6000546100c0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101076100eb366004610695565b506001600160a01b031660009081526004602052604090205490565b6040519081526020016100d4565b61010760025481565b61010761012c366004610695565b610337565b6001546100c0906001600160a01b031681565b6101076101523660046106c8565b6001600160a01b031660009081526003602052604090205490565b6100ab61017b3660046106c8565b6103ef565b6100ab61018e366004610660565b6104fa565b33600090815260056020526040902080544390915580158015906101b75750438114155b1561029857336000908152600360205260409020546002546101d98343610700565b6101e39190610717565b6101ed9190610717565b336000908152600460205260408120805490919061020c908490610736565b90915550506000805433808352600460208190526040938490205493516340c10f1960e01b81529081019190915260248101929092526001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561026f57600080fd5b505af1158015610283573d6000803e3d6000fd5b50503360009081526004602052604081205550505b33600090815260036020526040812080548492906102b7908490610700565b909155505060015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044015b6020604051808303816000875af115801561030e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610332919061074e565b505050565b6001600160a01b038216600090815260056020526040812080544390915580158015906103645750438114155b156103d1576001600160a01b03841660009081526003602052604090205460025461038f8343610700565b6103999190610717565b6103a39190610717565b6001600160a01b038516600090815260046020526040812080549091906103cb908490610736565b90915550505b5050506001600160a01b031660009081526004602052604090205490565b33600090815260056020526040902080544390915580158015906104135750438114155b156104f657336000908152600360205260409020546002546104358343610700565b61043f9190610717565b6104499190610717565b3360009081526004602052604081208054909190610468908490610736565b909155505060008054338252600460208190526040928390205492516340c10f1960e01b81526001600160a01b0386811692820192909252602481019390935216906340c10f1990604401600060405180830381600087803b1580156104cd57600080fd5b505af11580156104e1573d6000803e3d6000fd5b50503360009081526004602052604081205550505b5050565b336000908152600560205260409020805443909155801580159061051e5750438114155b156105ff57336000908152600360205260409020546002546105408343610700565b61054a9190610717565b6105549190610717565b3360009081526004602052604081208054909190610573908490610736565b90915550506000805433808352600460208190526040938490205493516340c10f1960e01b81529081019190915260248101929092526001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156105d657600080fd5b505af11580156105ea573d6000803e3d6000fd5b50503360009081526004602052604081205550505b336000908152600360205260408120805484929061061e908490610736565b90915550506001546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016102ef565b60006020828403121561067257600080fd5b5035919050565b80356001600160a01b038116811461069057600080fd5b919050565b600080604083850312156106a857600080fd5b6106b183610679565b91506106bf60208401610679565b90509250929050565b6000602082840312156106da57600080fd5b6106e382610679565b9392505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610712576107126106ea565b500390565b6000816000190483118215151615610731576107316106ea565b500290565b60008219821115610749576107496106ea565b500190565b60006020828403121561076057600080fd5b815180151581146106e357600080fdfea164736f6c634300080d000a';

type RewardsGaugeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RewardsGaugeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RewardsGaugeMock__factory extends ContractFactory {
  constructor(...args: RewardsGaugeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _crvToken: string,
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RewardsGaugeMock> {
    return super.deploy(
      _crvToken,
      _lpToken,
      overrides || {}
    ) as Promise<RewardsGaugeMock>;
  }
  override getDeployTransaction(
    _crvToken: string,
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_crvToken, _lpToken, overrides || {});
  }
  override attach(address: string): RewardsGaugeMock {
    return super.attach(address) as RewardsGaugeMock;
  }
  override connect(signer: Signer): RewardsGaugeMock__factory {
    return super.connect(signer) as RewardsGaugeMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RewardsGaugeMockInterface {
    return new utils.Interface(_abi) as RewardsGaugeMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RewardsGaugeMock {
    return new Contract(address, _abi, signerOrProvider) as RewardsGaugeMock;
  }
}
