/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  OracleMock,
  OracleMockInterface,
} from '../../../../contracts/test/mocks/OracleMock';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'IllegalSqrtPrice',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'y_target',
        type: 'uint256',
      },
      {
        internalType: 'uint160',
        name: 'x_lower',
        type: 'uint160',
      },
      {
        internalType: 'uint160',
        name: 'x_upper',
        type: 'uint160',
      },
    ],
    name: 'SolutionOutOfBounds',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    name: 'getTwapPriceX128',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    name: 'getTwapSqrtPriceX96',
    outputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_priceX128',
        type: 'uint256',
      },
    ],
    name: 'setPriceX128',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: '_sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'setSqrtPriceX96',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061001e600160801b600055565b61049b8061002d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063726416331461005157806372b6bb3814610066578063c9c32f2a1461008f578063dd86c101146100a2575b600080fd5b61006461005f366004610375565b600055565b005b61007961007436600461038e565b6100c5565b60405161008691906103b4565b60405180910390f35b61006461009d3660046103c8565b6100d8565b6100b76100b036600461038e565b5060005490565b604051908152602001610086565b60006100d26000546100f0565b92915050565b6100ea816001600160a01b0316610123565b60005550565b60006100d261018c836401000276a361011e600173fffd8963efd1fc6a506488495d951d5263988d26610407565b6101a6565b60006401000276a36001600160a01b038316108061015e575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03831610155b156101875781604051635d236c4560e01b815260040161017e91906103b4565b60405180910390fd5b6100d2825b60006100d26001600160a01b03831680600160401b6102c2565b6000806101b6848763ffffffff16565b905060006101c7848863ffffffff16565b9050818610806101d657508086115b1561020e5760405163f7b6b2e960e01b8152600481018790526001600160a01b0380871660248301528516604482015260640161017e565b6000805b600161021e8888610407565b6001600160a01b0316111561027c5760026102398888610407565b610243919061042f565b61024d9088610463565b905061025c818a63ffffffff16565b91508782111561027157809550819250610212565b809650819350610212565b856001600160a01b0316876001600160a01b0316141580156102a95750876102a7878b63ffffffff16565b145b6102b357866102b5565b855b9998505050505050505050565b60008080600019858709858702925082811083820303915050806000036102fb57600084116102f057600080fd5b50829004905061036e565b80841161030757600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60006020828403121561038757600080fd5b5035919050565b6000602082840312156103a057600080fd5b813563ffffffff8116811461036e57600080fd5b6001600160a01b0391909116815260200190565b6000602082840312156103da57600080fd5b81356001600160a01b038116811461036e57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160a01b0383811690831681811015610427576104276103f1565b039392505050565b60006001600160a01b038381168061045757634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160a01b03828116848216808303821115610485576104856103f1565b0194935050505056fea164736f6c634300080d000a';

type OracleMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleMock__factory extends ContractFactory {
  constructor(...args: OracleMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OracleMock> {
    return super.deploy(overrides || {}) as Promise<OracleMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OracleMock {
    return super.attach(address) as OracleMock;
  }
  override connect(signer: Signer): OracleMock__factory {
    return super.connect(signer) as OracleMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleMockInterface {
    return new utils.Interface(_abi) as OracleMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleMock {
    return new Contract(address, _abi, signerOrProvider) as OracleMock;
  }
}
