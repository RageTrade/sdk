/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../../common';

export declare namespace RageERC4626 {
  export type RageERC4626InitParamsStruct = {
    asset: string;
    name: string;
    symbol: string;
  };

  export type RageERC4626InitParamsStructOutput = [string, string, string] & {
    asset: string;
    name: string;
    symbol: string;
  };
}

export declare namespace GlpStakingManager {
  export type GlpStakingManagerInitParamsStruct = {
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStruct;
    weth: string;
    usdc: string;
    feeRecipient: string;
    rewardRouter: string;
  };

  export type GlpStakingManagerInitParamsStructOutput = [
    RageERC4626.RageERC4626InitParamsStructOutput,
    string,
    string,
    string,
    string
  ] & {
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStructOutput;
    weth: string;
    usdc: string;
    feeRecipient: string;
    rewardRouter: string;
  };
}

export interface GlpStakingManagerInterface extends utils.Interface {
  functions: {
    'FEE()': FunctionFragment;
    'MAX_BPS()': FunctionFragment;
    'PRICE_PRECISION()': FunctionFragment;
    'USDG_DECIMALS()': FunctionFragment;
    'WETH_DECIMALS()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositToken(address,uint256)': FunctionFragment;
    'feeRecipient()': FunctionFragment;
    'grantAllowances()': FunctionFragment;
    'harvestFees()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(((address,string,string),address,address,address,address))': FunctionFragment;
    'isVault(address)': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'protocolFee()': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setFeeRecipient(address)': FunctionFragment;
    'setVault(address,bool)': FunctionFragment;
    'slippageThreshold()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateGMXParams(uint256,uint256,uint256,address)': FunctionFragment;
    'wethThreshold()': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
    'withdrawFees()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'FEE'
      | 'MAX_BPS'
      | 'PRICE_PRECISION'
      | 'USDG_DECIMALS'
      | 'WETH_DECIMALS'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositToken'
      | 'feeRecipient'
      | 'grantAllowances'
      | 'harvestFees'
      | 'increaseAllowance'
      | 'initialize'
      | 'isVault'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint'
      | 'name'
      | 'owner'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'protocolFee'
      | 'redeem'
      | 'renounceOwnership'
      | 'setFeeRecipient'
      | 'setVault'
      | 'slippageThreshold'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'updateGMXParams'
      | 'wethThreshold'
      | 'withdraw'
      | 'withdrawFees'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BPS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'PRICE_PRECISION',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'USDG_DECIMALS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'WETH_DECIMALS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositToken',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'feeRecipient',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'grantAllowances',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestFees',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [GlpStakingManager.GlpStakingManagerInitParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: 'isVault', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxMint', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxRedeem', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolFee',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeRecipient',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'setVault',
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'slippageThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateGMXParams',
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'wethThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: 'FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BPS', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'PRICE_PRECISION',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'USDG_DECIMALS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'WETH_DECIMALS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeRecipient',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'grantAllowances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'harvestFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewRedeem',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolFee',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFeeRecipient',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setVault', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'slippageThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateGMXParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'wethThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'FeeRecipientUpdated(address)': EventFragment;
    'FeesWithdrawn(uint256)': EventFragment;
    'GmxParamsUpdated(uint256,uint256,uint256,address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'TokenRedeemded(address,uint256,address)': EventFragment;
    'TokenWithdrawn(address,uint256,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'VaultUpdated(address,bool)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeRecipientUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeesWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GmxParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenRedeemded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FeeRecipientUpdatedEventObject {
  feeRecipient: string;
}
export type FeeRecipientUpdatedEvent = TypedEvent<
  [string],
  FeeRecipientUpdatedEventObject
>;

export type FeeRecipientUpdatedEventFilter =
  TypedEventFilter<FeeRecipientUpdatedEvent>;

export interface FeesWithdrawnEventObject {
  vaule: BigNumber;
}
export type FeesWithdrawnEvent = TypedEvent<
  [BigNumber],
  FeesWithdrawnEventObject
>;

export type FeesWithdrawnEventFilter = TypedEventFilter<FeesWithdrawnEvent>;

export interface GmxParamsUpdatedEventObject {
  newFee: BigNumber;
  wethThreshold: BigNumber;
  slippageThreshold: BigNumber;
  batchingManager: string;
}
export type GmxParamsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  GmxParamsUpdatedEventObject
>;

export type GmxParamsUpdatedEventFilter =
  TypedEventFilter<GmxParamsUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenRedeemdedEventObject {
  token: string;
  _sGLPQuantity: BigNumber;
  receiver: string;
}
export type TokenRedeemdedEvent = TypedEvent<
  [string, BigNumber, string],
  TokenRedeemdedEventObject
>;

export type TokenRedeemdedEventFilter = TypedEventFilter<TokenRedeemdedEvent>;

export interface TokenWithdrawnEventObject {
  token: string;
  shares: BigNumber;
  receiver: string;
}
export type TokenWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  TokenWithdrawnEventObject
>;

export type TokenWithdrawnEventFilter = TypedEventFilter<TokenWithdrawnEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VaultUpdatedEventObject {
  vaultAddress: string;
  isVault: boolean;
}
export type VaultUpdatedEvent = TypedEvent<
  [string, boolean],
  VaultUpdatedEventObject
>;

export type VaultUpdatedEventFilter = TypedEventFilter<VaultUpdatedEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface GlpStakingManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlpStakingManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    grantAllowances(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      glpStakingManagerInitParams: GlpStakingManager.GlpStakingManagerInitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isVault(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      shares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      shares: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVault(
      vaultAddress: string,
      _isVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slippageThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGMXParams(
      _feeBps: BigNumberish,
      _wethThreshold: BigNumberish,
      _slippageThreshold: BigNumberish,
      _batchingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wethThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  WETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  convertToAssets(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositToken(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  grantAllowances(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    glpStakingManagerInitParams: GlpStakingManager.GlpStakingManagerInitParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isVault(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    shares: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  previewDeposit(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    shares: BigNumberish,
    to: string,
    from: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    _feeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVault(
    vaultAddress: string,
    _isVault: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slippageThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGMXParams(
    _feeBps: BigNumberish,
    _wethThreshold: BigNumberish,
    _slippageThreshold: BigNumberish,
    _batchingManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wethThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    to: string,
    from: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    grantAllowances(overrides?: CallOverrides): Promise<void>;

    harvestFees(overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      glpStakingManagerInitParams: GlpStakingManager.GlpStakingManagerInitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isVault(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      shares: BigNumberish,
      to: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeeRecipient(
      _feeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVault(
      vaultAddress: string,
      _isVault: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    slippageThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGMXParams(
      _feeBps: BigNumberish,
      _wethThreshold: BigNumberish,
      _slippageThreshold: BigNumberish,
      _batchingManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wethThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      to: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFees(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      caller?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    'FeeRecipientUpdated(address)'(
      feeRecipient?: null
    ): FeeRecipientUpdatedEventFilter;
    FeeRecipientUpdated(feeRecipient?: null): FeeRecipientUpdatedEventFilter;

    'FeesWithdrawn(uint256)'(vaule?: null): FeesWithdrawnEventFilter;
    FeesWithdrawn(vaule?: null): FeesWithdrawnEventFilter;

    'GmxParamsUpdated(uint256,uint256,uint256,address)'(
      newFee?: null,
      wethThreshold?: null,
      slippageThreshold?: null,
      batchingManager?: null
    ): GmxParamsUpdatedEventFilter;
    GmxParamsUpdated(
      newFee?: null,
      wethThreshold?: null,
      slippageThreshold?: null,
      batchingManager?: null
    ): GmxParamsUpdatedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    'TokenRedeemded(address,uint256,address)'(
      token?: string | null,
      _sGLPQuantity?: null,
      receiver?: string | null
    ): TokenRedeemdedEventFilter;
    TokenRedeemded(
      token?: string | null,
      _sGLPQuantity?: null,
      receiver?: string | null
    ): TokenRedeemdedEventFilter;

    'TokenWithdrawn(address,uint256,address)'(
      token?: string | null,
      shares?: null,
      receiver?: string | null
    ): TokenWithdrawnEventFilter;
    TokenWithdrawn(
      token?: string | null,
      shares?: null,
      receiver?: string | null
    ): TokenWithdrawnEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    'VaultUpdated(address,bool)'(
      vaultAddress?: null,
      isVault?: null
    ): VaultUpdatedEventFilter;
    VaultUpdated(vaultAddress?: null, isVault?: null): VaultUpdatedEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    grantAllowances(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      glpStakingManagerInitParams: GlpStakingManager.GlpStakingManagerInitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isVault(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      shares: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVault(
      vaultAddress: string,
      _isVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slippageThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGMXParams(
      _feeBps: BigNumberish,
      _wethThreshold: BigNumberish,
      _slippageThreshold: BigNumberish,
      _batchingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wethThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantAllowances(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      glpStakingManagerInitParams: GlpStakingManager.GlpStakingManagerInitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMint(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      shares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      shares: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVault(
      vaultAddress: string,
      _isVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slippageThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGMXParams(
      _feeBps: BigNumberish,
      _wethThreshold: BigNumberish,
      _slippageThreshold: BigNumberish,
      _batchingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wethThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
