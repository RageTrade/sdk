/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../../common';

export interface IGlpManagerInterface extends utils.Interface {
  functions: {
    'addLiquidity(address,uint256,uint256,uint256)': FunctionFragment;
    'addLiquidityForAccount(address,address,address,uint256,uint256,uint256)': FunctionFragment;
    'cooldownDuration()': FunctionFragment;
    'getAum(bool)': FunctionFragment;
    'getAumInUsdg(bool)': FunctionFragment;
    'getAums()': FunctionFragment;
    'lastAddedAt(address)': FunctionFragment;
    'removeLiquidity(address,uint256,uint256,address)': FunctionFragment;
    'removeLiquidityForAccount(address,address,uint256,uint256,address)': FunctionFragment;
    'vault()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addLiquidity'
      | 'addLiquidityForAccount'
      | 'cooldownDuration'
      | 'getAum'
      | 'getAumInUsdg'
      | 'getAums'
      | 'lastAddedAt'
      | 'removeLiquidity'
      | 'removeLiquidityForAccount'
      | 'vault'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addLiquidity',
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'addLiquidityForAccount',
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'cooldownDuration',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'getAum', values: [boolean]): string;
  encodeFunctionData(
    functionFragment: 'getAumInUsdg',
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: 'getAums', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastAddedAt', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'removeLiquidity',
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLiquidityForAccount',
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'vault', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'addLiquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addLiquidityForAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cooldownDuration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getAum', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAumInUsdg',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getAums', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastAddedAt',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLiquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLiquidityForAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'vault', data: BytesLike): Result;

  events: {};
}

export interface IGlpManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGlpManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityForAccount(
      _fundingAccount: string,
      _account: string,
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cooldownDuration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAum(maximise: boolean, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAumInUsdg(
      maximise: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAums(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    lastAddedAt(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityForAccount(
      _account: string,
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  addLiquidity(
    _token: string,
    _amount: BigNumberish,
    _minUsdg: BigNumberish,
    _minGlp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityForAccount(
    _fundingAccount: string,
    _account: string,
    _token: string,
    _amount: BigNumberish,
    _minUsdg: BigNumberish,
    _minGlp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cooldownDuration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAum(maximise: boolean, overrides?: CallOverrides): Promise<BigNumber>;

  getAumInUsdg(
    maximise: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAums(overrides?: CallOverrides): Promise<BigNumber[]>;

  lastAddedAt(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    _tokenOut: string,
    _glpAmount: BigNumberish,
    _minOut: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityForAccount(
    _account: string,
    _tokenOut: string,
    _glpAmount: BigNumberish,
    _minOut: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addLiquidity(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityForAccount(
      _fundingAccount: string,
      _account: string,
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cooldownDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getAum(maximise: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    getAumInUsdg(
      maximise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAums(overrides?: CallOverrides): Promise<BigNumber[]>;

    lastAddedAt(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityForAccount(
      _account: string,
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityForAccount(
      _fundingAccount: string,
      _account: string,
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cooldownDuration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAum(maximise: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    getAumInUsdg(
      maximise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAums(overrides?: CallOverrides): Promise<BigNumber>;

    lastAddedAt(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityForAccount(
      _account: string,
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityForAccount(
      _fundingAccount: string,
      _account: string,
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minGlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cooldownDuration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAum(
      maximise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAumInUsdg(
      maximise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAums(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastAddedAt(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityForAccount(
      _account: string,
      _tokenOut: string,
      _glpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
