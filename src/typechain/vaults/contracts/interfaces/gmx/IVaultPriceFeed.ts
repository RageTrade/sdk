/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../../common';

export interface IVaultPriceFeedInterface extends utils.Interface {
  functions: {
    'adjustmentBasisPoints(address)': FunctionFragment;
    'getAmmPrice(address)': FunctionFragment;
    'getPrice(address,bool,bool,bool)': FunctionFragment;
    'isAdjustmentAdditive(address)': FunctionFragment;
    'setAdjustment(address,bool,uint256)': FunctionFragment;
    'setFavorPrimaryPrice(bool)': FunctionFragment;
    'setIsAmmEnabled(bool)': FunctionFragment;
    'setIsSecondaryPriceEnabled(bool)': FunctionFragment;
    'setMaxStrictPriceDeviation(uint256)': FunctionFragment;
    'setPriceSampleSpace(uint256)': FunctionFragment;
    'setSpreadBasisPoints(address,uint256)': FunctionFragment;
    'setSpreadThresholdBasisPoints(uint256)': FunctionFragment;
    'setUseV2Pricing(bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'adjustmentBasisPoints'
      | 'getAmmPrice'
      | 'getPrice'
      | 'isAdjustmentAdditive'
      | 'setAdjustment'
      | 'setFavorPrimaryPrice'
      | 'setIsAmmEnabled'
      | 'setIsSecondaryPriceEnabled'
      | 'setMaxStrictPriceDeviation'
      | 'setPriceSampleSpace'
      | 'setSpreadBasisPoints'
      | 'setSpreadThresholdBasisPoints'
      | 'setUseV2Pricing'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'adjustmentBasisPoints',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'getAmmPrice', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getPrice',
    values: [string, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'isAdjustmentAdditive',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'setAdjustment',
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setFavorPrimaryPrice',
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'setIsAmmEnabled',
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'setIsSecondaryPriceEnabled',
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaxStrictPriceDeviation',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setPriceSampleSpace',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setSpreadBasisPoints',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setSpreadThresholdBasisPoints',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setUseV2Pricing',
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: 'adjustmentBasisPoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAmmPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isAdjustmentAdditive',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAdjustment',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFavorPrimaryPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setIsAmmEnabled',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setIsSecondaryPriceEnabled',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMaxStrictPriceDeviation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setPriceSampleSpace',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSpreadBasisPoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSpreadThresholdBasisPoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setUseV2Pricing',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IVaultPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustmentBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmmPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      _token: string,
      _maximise: boolean,
      _includeAmmPrice: boolean,
      _useSwapPricing: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAdjustmentAdditive(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAdjustment(
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsAmmEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsSecondaryPriceEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceSampleSpace(
      _priceSampleSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPoints(
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUseV2Pricing(
      _useV2Pricing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  adjustmentBasisPoints(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmmPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(
    _token: string,
    _maximise: boolean,
    _includeAmmPrice: boolean,
    _useSwapPricing: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAdjustmentAdditive(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAdjustment(
    _token: string,
    _isAdditive: boolean,
    _adjustmentBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFavorPrimaryPrice(
    _favorPrimaryPrice: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsAmmEnabled(
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsSecondaryPriceEnabled(
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxStrictPriceDeviation(
    _maxStrictPriceDeviation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceSampleSpace(
    _priceSampleSpace: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPoints(
    _token: string,
    _spreadBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpreadThresholdBasisPoints(
    _spreadThresholdBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUseV2Pricing(
    _useV2Pricing: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustmentBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmmPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      _token: string,
      _maximise: boolean,
      _includeAmmPrice: boolean,
      _useSwapPricing: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdjustmentAdditive(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAdjustment(
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsAmmEnabled(
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSecondaryPriceEnabled(
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceSampleSpace(
      _priceSampleSpace: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPoints(
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUseV2Pricing(
      _useV2Pricing: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    adjustmentBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmmPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      _token: string,
      _maximise: boolean,
      _includeAmmPrice: boolean,
      _useSwapPricing: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdjustmentAdditive(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdjustment(
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsAmmEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsSecondaryPriceEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceSampleSpace(
      _priceSampleSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPoints(
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUseV2Pricing(
      _useV2Pricing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustmentBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmmPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _token: string,
      _maximise: boolean,
      _includeAmmPrice: boolean,
      _useSwapPricing: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdjustmentAdditive(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdjustment(
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsAmmEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsSecondaryPriceEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceSampleSpace(
      _priceSampleSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPoints(
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUseV2Pricing(
      _useV2Pricing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
