/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../../common';

export interface IVesterInterface extends utils.Interface {
  functions: {
    'bonusRewards(address)': FunctionFragment;
    'claimForAccount(address,address)': FunctionFragment;
    'cumulativeRewardDeductions(address)': FunctionFragment;
    'getCombinedAverageStakedAmount(address)': FunctionFragment;
    'getMaxVestableAmount(address)': FunctionFragment;
    'setBonusRewards(address,uint256)': FunctionFragment;
    'setCumulativeRewardDeductions(address,uint256)': FunctionFragment;
    'setTransferredAverageStakedAmounts(address,uint256)': FunctionFragment;
    'setTransferredCumulativeRewards(address,uint256)': FunctionFragment;
    'transferStakeValues(address,address)': FunctionFragment;
    'transferredAverageStakedAmounts(address)': FunctionFragment;
    'transferredCumulativeRewards(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'bonusRewards'
      | 'claimForAccount'
      | 'cumulativeRewardDeductions'
      | 'getCombinedAverageStakedAmount'
      | 'getMaxVestableAmount'
      | 'setBonusRewards'
      | 'setCumulativeRewardDeductions'
      | 'setTransferredAverageStakedAmounts'
      | 'setTransferredCumulativeRewards'
      | 'transferStakeValues'
      | 'transferredAverageStakedAmounts'
      | 'transferredCumulativeRewards'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'bonusRewards',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimForAccount',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'cumulativeRewardDeductions',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCombinedAverageStakedAmount',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMaxVestableAmount',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBonusRewards',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setCumulativeRewardDeductions',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setTransferredAverageStakedAmounts',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setTransferredCumulativeRewards',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferStakeValues',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferredAverageStakedAmounts',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferredCumulativeRewards',
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: 'bonusRewards',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimForAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cumulativeRewardDeductions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCombinedAverageStakedAmount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMaxVestableAmount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBonusRewards',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setCumulativeRewardDeductions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setTransferredAverageStakedAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setTransferredCumulativeRewards',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferStakeValues',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferredAverageStakedAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferredCumulativeRewards',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IVester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bonusRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimForAccount(
      _account: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cumulativeRewardDeductions(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCombinedAverageStakedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxVestableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBonusRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCumulativeRewardDeductions(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferredAverageStakedAmounts(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferredCumulativeRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferStakeValues(
      _sender: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferredAverageStakedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferredCumulativeRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  bonusRewards(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimForAccount(
    _account: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cumulativeRewardDeductions(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCombinedAverageStakedAmount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxVestableAmount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBonusRewards(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCumulativeRewardDeductions(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferredAverageStakedAmounts(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferredCumulativeRewards(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferStakeValues(
    _sender: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferredAverageStakedAmounts(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferredCumulativeRewards(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    bonusRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimForAccount(
      _account: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeRewardDeductions(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCombinedAverageStakedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxVestableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBonusRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCumulativeRewardDeductions(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferredAverageStakedAmounts(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferredCumulativeRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferStakeValues(
      _sender: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferredAverageStakedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferredCumulativeRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    bonusRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimForAccount(
      _account: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cumulativeRewardDeductions(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCombinedAverageStakedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxVestableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBonusRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCumulativeRewardDeductions(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferredAverageStakedAmounts(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferredCumulativeRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferStakeValues(
      _sender: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferredAverageStakedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferredCumulativeRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bonusRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimForAccount(
      _account: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cumulativeRewardDeductions(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCombinedAverageStakedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxVestableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBonusRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCumulativeRewardDeductions(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferredAverageStakedAmounts(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferredCumulativeRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferStakeValues(
      _sender: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferredAverageStakedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferredCumulativeRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
