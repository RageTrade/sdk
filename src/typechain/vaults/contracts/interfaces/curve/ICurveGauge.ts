/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../../common';

export interface ICurveGaugeInterface extends utils.Interface {
  functions: {
    'balanceOf(address)': FunctionFragment;
    'claim_rewards(address)': FunctionFragment;
    'claim_rewards(address,address)': FunctionFragment;
    'claim_rewards()': FunctionFragment;
    'claimable_reward(address,address)': FunctionFragment;
    'claimable_reward_write(address,address)': FunctionFragment;
    'claimable_tokens(address)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'integrate_fraction(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdraw(uint256,bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'balanceOf'
      | 'claim_rewards(address)'
      | 'claim_rewards(address,address)'
      | 'claim_rewards()'
      | 'claimable_reward'
      | 'claimable_reward_write'
      | 'claimable_tokens'
      | 'deposit(uint256,address)'
      | 'deposit(uint256)'
      | 'integrate_fraction'
      | 'withdraw(uint256)'
      | 'withdraw(uint256,bool)'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'claim_rewards(address)',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'claim_rewards(address,address)',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'claim_rewards()',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'claimable_reward',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimable_reward_write',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimable_tokens',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256,address)',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256)',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'integrate_fraction',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw(uint256)',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw(uint256,bool)',
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'claim_rewards(address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claim_rewards(address,address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claim_rewards()',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimable_reward',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimable_reward_write',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimable_tokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deposit(uint256,address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deposit(uint256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'integrate_fraction',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdraw(uint256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdraw(uint256,bool)',
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICurveGauge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICurveGaugeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'claim_rewards(address)'(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'claim_rewards(address,address)'(
      addr: string,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'claim_rewards()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable_reward(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimable_reward_write(
      user: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'deposit(uint256,address)'(
      _value: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'deposit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'withdraw(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdraw(uint256,bool)'(
      _value: BigNumberish,
      claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'claim_rewards(address)'(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'claim_rewards(address,address)'(
    addr: string,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'claim_rewards()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable_reward(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimable_reward_write(
    user: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable_tokens(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'deposit(uint256,address)'(
    _value: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'deposit(uint256)'(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  integrate_fraction(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'withdraw(uint256)'(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdraw(uint256,bool)'(
    _value: BigNumberish,
    claim_rewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claim_rewards(address)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'claim_rewards(address,address)'(
      addr: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'claim_rewards()'(overrides?: CallOverrides): Promise<void>;

    claimable_reward(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_reward_write(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_tokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'deposit(uint256,address)'(
      _value: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'deposit(uint256)'(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'withdraw(uint256)'(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'withdraw(uint256,bool)'(
      _value: BigNumberish,
      claim_rewards: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claim_rewards(address)'(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'claim_rewards(address,address)'(
      addr: string,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'claim_rewards()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable_reward(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_reward_write(
      user: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'deposit(uint256,address)'(
      _value: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'deposit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'withdraw(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdraw(uint256,bool)'(
      _value: BigNumberish,
      claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'claim_rewards(address)'(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'claim_rewards(address,address)'(
      addr: string,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'claim_rewards()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable_reward(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimable_reward_write(
      user: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'deposit(uint256,address)'(
      _value: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'deposit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256,bool)'(
      _value: BigNumberish,
      claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
