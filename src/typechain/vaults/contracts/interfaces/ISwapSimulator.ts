/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common';

export declare namespace IVPoolWrapper {
  export type SwapResultStruct = {
    amountSpecified: BigNumberish;
    vTokenIn: BigNumberish;
    vQuoteIn: BigNumberish;
    liquidityFees: BigNumberish;
    protocolFees: BigNumberish;
    sqrtPriceX96Start: BigNumberish;
    sqrtPriceX96End: BigNumberish;
  };

  export type SwapResultStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    amountSpecified: BigNumber;
    vTokenIn: BigNumber;
    vQuoteIn: BigNumber;
    liquidityFees: BigNumber;
    protocolFees: BigNumber;
    sqrtPriceX96Start: BigNumber;
    sqrtPriceX96End: BigNumber;
  };
}

export interface ISwapSimulatorInterface extends utils.Interface {
  functions: {
    'simulateSwapView(address,uint32,int256,uint160,bool)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'simulateSwapView'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'simulateSwapView',
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: 'simulateSwapView',
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISwapSimulator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISwapSimulatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    simulateSwapView(
      clearingHouse: string,
      poolId: BigNumberish,
      amount: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      isNotional: boolean,
      overrides?: CallOverrides
    ): Promise<
      [IVPoolWrapper.SwapResultStructOutput] & {
        swapResult: IVPoolWrapper.SwapResultStructOutput;
      }
    >;
  };

  simulateSwapView(
    clearingHouse: string,
    poolId: BigNumberish,
    amount: BigNumberish,
    sqrtPriceLimitX96: BigNumberish,
    isNotional: boolean,
    overrides?: CallOverrides
  ): Promise<IVPoolWrapper.SwapResultStructOutput>;

  callStatic: {
    simulateSwapView(
      clearingHouse: string,
      poolId: BigNumberish,
      amount: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      isNotional: boolean,
      overrides?: CallOverrides
    ): Promise<IVPoolWrapper.SwapResultStructOutput>;
  };

  filters: {};

  estimateGas: {
    simulateSwapView(
      clearingHouse: string,
      poolId: BigNumberish,
      amount: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      isNotional: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    simulateSwapView(
      clearingHouse: string,
      poolId: BigNumberish,
      amount: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      isNotional: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
