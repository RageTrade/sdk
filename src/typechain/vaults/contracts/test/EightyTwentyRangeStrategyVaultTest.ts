/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common';

export declare namespace RageERC4626 {
  export type RageERC4626InitParamsStruct = {
    asset: string;
    name: string;
    symbol: string;
  };

  export type RageERC4626InitParamsStructOutput = [string, string, string] & {
    asset: string;
    name: string;
    symbol: string;
  };
}

export declare namespace BaseVault {
  export type BaseVaultInitParamsStruct = {
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStruct;
    ethPoolId: BigNumberish;
    rageClearingHouse: string;
    rageCollateralToken: string;
    rageSettlementToken: string;
  };

  export type BaseVaultInitParamsStructOutput = [
    RageERC4626.RageERC4626InitParamsStructOutput,
    number,
    string,
    string,
    string
  ] & {
    rageErc4626InitParams: RageERC4626.RageERC4626InitParamsStructOutput;
    ethPoolId: number;
    rageClearingHouse: string;
    rageCollateralToken: string;
    rageSettlementToken: string;
  };
}

export declare namespace EightyTwentyRangeStrategyVault {
  export type EightyTwentyRangeStrategyVaultInitParamsStruct = {
    baseVaultInitParams: BaseVault.BaseVaultInitParamsStruct;
    closePositionSlippageSqrtToleranceBps: BigNumberish;
    resetPositionThresholdBps: BigNumberish;
    minNotionalPositionToCloseThreshold: BigNumberish;
  };

  export type EightyTwentyRangeStrategyVaultInitParamsStructOutput = [
    BaseVault.BaseVaultInitParamsStructOutput,
    number,
    number,
    BigNumber
  ] & {
    baseVaultInitParams: BaseVault.BaseVaultInitParamsStructOutput;
    closePositionSlippageSqrtToleranceBps: number;
    resetPositionThresholdBps: number;
    minNotionalPositionToCloseThreshold: BigNumber;
  };
}

export declare namespace IClearingHouseStructures {
  export type LiquidityChangeParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
    sqrtPriceCurrent: BigNumberish;
    slippageToleranceBps: BigNumberish;
    closeTokenPosition: boolean;
    limitOrderType: BigNumberish;
    settleProfit: boolean;
  };

  export type LiquidityChangeParamsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    number,
    boolean,
    number,
    boolean
  ] & {
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
    sqrtPriceCurrent: BigNumber;
    slippageToleranceBps: number;
    closeTokenPosition: boolean;
    limitOrderType: number;
    settleProfit: boolean;
  };
}

export interface EightyTwentyRangeStrategyVaultTestInterface
  extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'baseLiquidity()': FunctionFragment;
    'baseTickLower()': FunctionFragment;
    'baseTickUpper()': FunctionFragment;
    'closeTokenPosition()': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositCap()': FunctionFragment;
    'extsload(bytes32)': FunctionFragment;
    'extsload(bytes32[])': FunctionFragment;
    'getLiquidityChangeParamsOnRebalance(int256)': FunctionFragment;
    'getMarketValue(uint256)': FunctionFragment;
    'getPriceX128()': FunctionFragment;
    'getVaultMarketValue()': FunctionFragment;
    'grantAllowances()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'isReset()': FunctionFragment;
    'isValidRebalance(int256)': FunctionFragment;
    'keeper()': FunctionFragment;
    'lastRebalanceTS()': FunctionFragment;
    'maxAssets()': FunctionFragment;
    'maxAssetsAlwaysReverts()': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxShares()': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'priceX128()': FunctionFragment;
    'rageAccountNo()': FunctionFragment;
    'rebalance()': FunctionFragment;
    'rebalancePriceThresholdBps()': FunctionFragment;
    'rebalanceTimeThreshold()': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setEightTwentyParams(uint16,uint16,uint64)': FunctionFragment;
    'setKeeper(address)': FunctionFragment;
    'setRebalanceThreshold(uint32,uint16)': FunctionFragment;
    'setYieldTokenPriceX128(uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenTreasury()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateDepositCap(uint256)': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'baseLiquidity'
      | 'baseTickLower'
      | 'baseTickUpper'
      | 'closeTokenPosition'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositCap'
      | 'extsload(bytes32)'
      | 'extsload(bytes32[])'
      | 'getLiquidityChangeParamsOnRebalance'
      | 'getMarketValue'
      | 'getPriceX128'
      | 'getVaultMarketValue'
      | 'grantAllowances'
      | 'increaseAllowance'
      | 'isReset'
      | 'isValidRebalance'
      | 'keeper'
      | 'lastRebalanceTS'
      | 'maxAssets'
      | 'maxAssetsAlwaysReverts'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxShares'
      | 'maxWithdraw'
      | 'mint'
      | 'name'
      | 'owner'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'priceX128'
      | 'rageAccountNo'
      | 'rebalance'
      | 'rebalancePriceThresholdBps'
      | 'rebalanceTimeThreshold'
      | 'redeem'
      | 'renounceOwnership'
      | 'setEightTwentyParams'
      | 'setKeeper'
      | 'setRebalanceThreshold'
      | 'setYieldTokenPriceX128'
      | 'symbol'
      | 'tokenTreasury'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'updateDepositCap'
      | 'withdraw'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'baseLiquidity',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'baseTickLower',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'baseTickUpper',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'closeTokenPosition',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCap',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'extsload(bytes32)',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'extsload(bytes32[])',
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'getLiquidityChangeParamsOnRebalance',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarketValue',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPriceX128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultMarketValue',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'grantAllowances',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'isReset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isValidRebalance',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lastRebalanceTS',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'maxAssets', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'maxAssetsAlwaysReverts',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxMint', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxRedeem', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxShares', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'priceX128', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rageAccountNo',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'rebalance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rebalancePriceThresholdBps',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceTimeThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setEightTwentyParams',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'setKeeper', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setRebalanceThreshold',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setYieldTokenPriceX128',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'tokenTreasury',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateDepositCap',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'baseLiquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'baseTickLower',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'baseTickUpper',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'closeTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'extsload(bytes32)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'extsload(bytes32[])',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLiquidityChangeParamsOnRebalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVaultMarketValue',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'grantAllowances',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isReset', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isValidRebalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastRebalanceTS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'maxAssets', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxAssetsAlwaysReverts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxShares', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewDeposit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewMint',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewRedeem',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'priceX128', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rageAccountNo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rebalancePriceThresholdBps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceTimeThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setEightTwentyParams',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setKeeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setRebalanceThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setYieldTokenPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'tokenTreasury',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateDepositCap',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface EightyTwentyRangeStrategyVaultTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EightyTwentyRangeStrategyVaultTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseTickLower(overrides?: CallOverrides): Promise<[number]>;

    baseTickUpper(overrides?: CallOverrides): Promise<[number]>;

    closeTokenPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { val: string }>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getLiquidityChangeParamsOnRebalance(
      vaultMarketValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMarketValue(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marketValue: BigNumber }>;

    getPriceX128(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaultMarketValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { vaultMarketValue: BigNumber }>;

    grantAllowances(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isReset(overrides?: CallOverrides): Promise<[boolean]>;

    isValidRebalance(
      vaultMarketValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxAssetsAlwaysReverts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      shares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceX128(overrides?: CallOverrides): Promise<[BigNumber]>;

    rageAccountNo(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalancePriceThresholdBps(overrides?: CallOverrides): Promise<[number]>;

    rebalanceTimeThreshold(overrides?: CallOverrides): Promise<[number]>;

    redeem(
      shares: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEightTwentyParams(
      _closePositionSlippageSqrtToleranceBps: BigNumberish,
      _resetPositionThresholdBps: BigNumberish,
      _minNotionalPositionToCloseThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      newKeeperAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRebalanceThreshold(
      _rebalanceTimeThreshold: BigNumberish,
      _rebalancePriceThresholdBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setYieldTokenPriceX128(
      _priceX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenTreasury(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDepositCap(
      newDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  baseTickLower(overrides?: CallOverrides): Promise<number>;

  baseTickUpper(overrides?: CallOverrides): Promise<number>;

  closeTokenPosition(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertToAssets(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCap(overrides?: CallOverrides): Promise<BigNumber>;

  'extsload(bytes32)'(
    slot: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  'extsload(bytes32[])'(
    slots: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getLiquidityChangeParamsOnRebalance(
    vaultMarketValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMarketValue(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

  grantAllowances(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isReset(overrides?: CallOverrides): Promise<boolean>;

  isValidRebalance(
    vaultMarketValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keeper(overrides?: CallOverrides): Promise<string>;

  lastRebalanceTS(overrides?: CallOverrides): Promise<BigNumber>;

  maxAssets(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxAssetsAlwaysReverts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxShares(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    shares: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  previewDeposit(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceX128(overrides?: CallOverrides): Promise<BigNumber>;

  rageAccountNo(overrides?: CallOverrides): Promise<BigNumber>;

  rebalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalancePriceThresholdBps(overrides?: CallOverrides): Promise<number>;

  rebalanceTimeThreshold(overrides?: CallOverrides): Promise<number>;

  redeem(
    shares: BigNumberish,
    to: string,
    from: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEightTwentyParams(
    _closePositionSlippageSqrtToleranceBps: BigNumberish,
    _resetPositionThresholdBps: BigNumberish,
    _minNotionalPositionToCloseThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    newKeeperAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRebalanceThreshold(
    _rebalanceTimeThreshold: BigNumberish,
    _rebalancePriceThresholdBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setYieldTokenPriceX128(
    _priceX128: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenTreasury(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDepositCap(
    newDepositCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    to: string,
    from: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    baseTickLower(overrides?: CallOverrides): Promise<number>;

    baseTickUpper(overrides?: CallOverrides): Promise<number>;

    closeTokenPosition(overrides?: CallOverrides): Promise<void>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getLiquidityChangeParamsOnRebalance(
      vaultMarketValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        IClearingHouseStructures.LiquidityChangeParamsStructOutput,
        IClearingHouseStructures.LiquidityChangeParamsStructOutput
      ]
    >;

    getMarketValue(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

    grantAllowances(overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReset(overrides?: CallOverrides): Promise<boolean>;

    isValidRebalance(
      vaultMarketValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keeper(overrides?: CallOverrides): Promise<string>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<BigNumber>;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    maxAssetsAlwaysReverts(overrides?: CallOverrides): Promise<void>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxShares(overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceX128(overrides?: CallOverrides): Promise<BigNumber>;

    rageAccountNo(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    rebalancePriceThresholdBps(overrides?: CallOverrides): Promise<number>;

    rebalanceTimeThreshold(overrides?: CallOverrides): Promise<number>;

    redeem(
      shares: BigNumberish,
      to: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEightTwentyParams(
      _closePositionSlippageSqrtToleranceBps: BigNumberish,
      _resetPositionThresholdBps: BigNumberish,
      _minNotionalPositionToCloseThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      newKeeperAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalanceThreshold(
      _rebalanceTimeThreshold: BigNumberish,
      _rebalancePriceThresholdBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setYieldTokenPriceX128(
      _priceX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenTreasury(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDepositCap(
      newDepositCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: BigNumberish,
      to: string,
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      caller?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    baseTickLower(overrides?: CallOverrides): Promise<BigNumber>;

    baseTickUpper(overrides?: CallOverrides): Promise<BigNumber>;

    closeTokenPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityChangeParamsOnRebalance(
      vaultMarketValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMarketValue(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceX128(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultMarketValue(overrides?: CallOverrides): Promise<BigNumber>;

    grantAllowances(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isReset(overrides?: CallOverrides): Promise<BigNumber>;

    isValidRebalance(
      vaultMarketValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<BigNumber>;

    maxAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxAssetsAlwaysReverts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceX128(overrides?: CallOverrides): Promise<BigNumber>;

    rageAccountNo(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalancePriceThresholdBps(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceTimeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      shares: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEightTwentyParams(
      _closePositionSlippageSqrtToleranceBps: BigNumberish,
      _resetPositionThresholdBps: BigNumberish,
      _minNotionalPositionToCloseThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      newKeeperAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRebalanceThreshold(
      _rebalanceTimeThreshold: BigNumberish,
      _rebalancePriceThresholdBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setYieldTokenPriceX128(
      _priceX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDepositCap(
      newDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseTickLower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseTickUpper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeTokenPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityChangeParamsOnRebalance(
      vaultMarketValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMarketValue(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceX128(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultMarketValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAllowances(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isReset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidRebalance(
      vaultMarketValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRebalanceTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxAssetsAlwaysReverts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMint(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      shares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceX128(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rageAccountNo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalancePriceThresholdBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceTimeThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      shares: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEightTwentyParams(
      _closePositionSlippageSqrtToleranceBps: BigNumberish,
      _resetPositionThresholdBps: BigNumberish,
      _minNotionalPositionToCloseThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      newKeeperAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRebalanceThreshold(
      _rebalanceTimeThreshold: BigNumberish,
      _rebalancePriceThresholdBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setYieldTokenPriceX128(
      _priceX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDepositCap(
      newDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      to: string,
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
