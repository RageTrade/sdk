/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace IClearingHouse {
  export type RageTradePoolSettingsStruct = {
    initialMarginRatio: BigNumberish;
    maintainanceMarginRatio: BigNumberish;
    twapDuration: BigNumberish;
    supported: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type RageTradePoolSettingsStructOutput = [
    number,
    number,
    number,
    boolean,
    boolean,
    string
  ] & {
    initialMarginRatio: number;
    maintainanceMarginRatio: number;
    twapDuration: number;
    supported: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type DepositTokenViewStruct = {
    cTokenAddress: string;
    balance: BigNumberish;
  };

  export type DepositTokenViewStructOutput = [string, BigNumber] & {
    cTokenAddress: string;
    balance: BigNumber;
  };

  export type LiquidityPositionViewStruct = {
    limitOrderType: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidity: BigNumberish;
    vTokenAmountIn: BigNumberish;
    sumALastX128: BigNumberish;
    sumBInsideLastX128: BigNumberish;
    sumFpInsideLastX128: BigNumberish;
    sumFeeInsideLastX128: BigNumberish;
  };

  export type LiquidityPositionViewStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    limitOrderType: number;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    vTokenAmountIn: BigNumber;
    sumALastX128: BigNumber;
    sumBInsideLastX128: BigNumber;
    sumFpInsideLastX128: BigNumber;
    sumFeeInsideLastX128: BigNumber;
  };

  export type VTokenPositionViewStruct = {
    vTokenAddress: string;
    balance: BigNumberish;
    netTraderPosition: BigNumberish;
    sumAX128Ckpt: BigNumberish;
    liquidityPositions: IClearingHouse.LiquidityPositionViewStruct[];
  };

  export type VTokenPositionViewStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    IClearingHouse.LiquidityPositionViewStructOutput[]
  ] & {
    vTokenAddress: string;
    balance: BigNumber;
    netTraderPosition: BigNumber;
    sumAX128Ckpt: BigNumber;
    liquidityPositions: IClearingHouse.LiquidityPositionViewStructOutput[];
  };

  export type BalanceAdjustmentsStruct = {
    vBaseIncrease: BigNumberish;
    vTokenIncrease: BigNumberish;
    traderPositionIncrease: BigNumberish;
  };

  export type BalanceAdjustmentsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    vBaseIncrease: BigNumber;
    vTokenIncrease: BigNumber;
    traderPositionIncrease: BigNumber;
  };

  export type MulticallOperationStruct = {
    operationType: BigNumberish;
    data: BytesLike;
  };

  export type MulticallOperationStructOutput = [number, string] & {
    operationType: number;
    data: string;
  };

  export type RageTradePoolStruct = {
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouse.RageTradePoolSettingsStruct;
  };

  export type RageTradePoolStructOutput = [
    string,
    string,
    IClearingHouse.RageTradePoolSettingsStructOutput
  ] & {
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouse.RageTradePoolSettingsStructOutput;
  };

  export type SwapParamsStruct = {
    amount: BigNumberish;
    sqrtPriceLimit: BigNumberish;
    isNotional: boolean;
    isPartialAllowed: boolean;
  };

  export type SwapParamsStructOutput = [
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    amount: BigNumber;
    sqrtPriceLimit: BigNumber;
    isNotional: boolean;
    isPartialAllowed: boolean;
  };

  export type LiquidityChangeParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
    sqrtPriceCurrent: BigNumberish;
    slippageToleranceBps: BigNumberish;
    closeTokenPosition: boolean;
    limitOrderType: BigNumberish;
  };

  export type LiquidityChangeParamsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    number,
    boolean,
    number
  ] & {
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
    sqrtPriceCurrent: BigNumber;
    slippageToleranceBps: number;
    closeTokenPosition: boolean;
    limitOrderType: number;
  };
}

export declare namespace CTokenLib {
  export type CTokenStruct = {
    tokenAddress: string;
    oracleAddress: string;
    oracleTimeHorizon: BigNumberish;
    supported: boolean;
  };

  export type CTokenStructOutput = [string, string, number, boolean] & {
    tokenAddress: string;
    oracleAddress: string;
    oracleTimeHorizon: number;
    supported: boolean;
  };
}

export declare namespace Account {
  export type LiquidationParamsStruct = {
    liquidationFeeFraction: BigNumberish;
    tokenLiquidationPriceDeltaBps: BigNumberish;
    insuranceFundFeeShareBps: BigNumberish;
  };

  export type LiquidationParamsStructOutput = [number, number, number] & {
    liquidationFeeFraction: number;
    tokenLiquidationPriceDeltaBps: number;
    insuranceFundFeeShareBps: number;
  };
}

export interface ClearingHouseInterface extends utils.Interface {
  contractName: 'ClearingHouse';
  functions: {
    '__ClearingHouse_init(address,address,address,address,address,address)': FunctionFragment;
    'addCollateralSupport(address,address,uint32)': FunctionFragment;
    'addMargin(uint256,uint32,uint256)': FunctionFragment;
    'cTokens(uint32)': FunctionFragment;
    'createAccount()': FunctionFragment;
    'createAccountAndAddMargin(uint32,uint256)': FunctionFragment;
    'extsload(bytes32)': FunctionFragment;
    'getAccountMarketValueAndRequiredMargin(uint256,bool)': FunctionFragment;
    'getAccountNetProfit(uint256)': FunctionFragment;
    'getAccountView(uint256)': FunctionFragment;
    'getTwapSqrtPricesForSetDuration(address)': FunctionFragment;
    'governance()': FunctionFragment;
    'insuranceFund()': FunctionFragment;
    'isVTokenAddressAvailable(uint32)': FunctionFragment;
    'liquidateLiquidityPositions(uint256)': FunctionFragment;
    'liquidateLiquidityPositionsWithGasClaim(uint256,uint256)': FunctionFragment;
    'liquidateTokenPosition(uint256,uint256,uint32,uint16)': FunctionFragment;
    'liquidateTokenPositionWithGasClaim(uint256,uint256,uint32,uint16,uint256)': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'multicallWithSingleMarginCheck(uint256,(uint8,bytes)[])': FunctionFragment;
    'nativeOracle()': FunctionFragment;
    'numAccounts()': FunctionFragment;
    'paused()': FunctionFragment;
    'pools(address)': FunctionFragment;
    'protocolInfo()': FunctionFragment;
    'rageTradeFactoryAddress()': FunctionFragment;
    'registerPool(address,(address,address,(uint16,uint16,uint32,bool,bool,address)))': FunctionFragment;
    'removeLimitOrder(uint256,uint32,int24,int24)': FunctionFragment;
    'removeLimitOrderWithGasClaim(uint256,uint32,int24,int24,uint256)': FunctionFragment;
    'removeMargin(uint256,uint32,uint256)': FunctionFragment;
    'setPaused(bool)': FunctionFragment;
    'setPlatformParameters((uint16,uint16,uint16),uint256,uint256,uint256)': FunctionFragment;
    'supportedDeposits(address)': FunctionFragment;
    'supportedVTokens(address)': FunctionFragment;
    'swapToken(uint256,uint32,(int256,uint160,bool,bool))': FunctionFragment;
    'teamMultisig()': FunctionFragment;
    'transferGovernance(address)': FunctionFragment;
    'transferTeamMultisig(address)': FunctionFragment;
    'updateProfit(uint256,int256)': FunctionFragment;
    'updateRageTradePoolSettings(address,(uint16,uint16,uint32,bool,bool,address))': FunctionFragment;
    'updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8))': FunctionFragment;
    'updateSupportedDeposits(address,bool)': FunctionFragment;
    'updateSupportedVTokens(address,bool)': FunctionFragment;
    'vTokens(uint32)': FunctionFragment;
    'withdrawProtocolFee(address[])': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: '__ClearingHouse_init',
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'addCollateralSupport',
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'addMargin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'cTokens',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccount',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccountAndAddMargin',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'extsload', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountNetProfit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountView',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTwapSqrtPricesForSetDuration',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'governance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'insuranceFund',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isVTokenAddressAvailable',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositions',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositionsWithGasClaim',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPosition',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPositionWithGasClaim',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'multicall',
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'multicallWithSingleMarginCheck',
    values: [BigNumberish, IClearingHouse.MulticallOperationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'nativeOracle',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'numAccounts',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pools', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'protocolInfo',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rageTradeFactoryAddress',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [string, IClearingHouse.RageTradePoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrder',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrderWithGasClaim',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeMargin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'setPaused', values: [boolean]): string;
  encodeFunctionData(
    functionFragment: 'setPlatformParameters',
    values: [
      Account.LiquidationParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'supportedDeposits',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'supportedVTokens',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapToken',
    values: [BigNumberish, BigNumberish, IClearingHouse.SwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'teamMultisig',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferGovernance',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTeamMultisig',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProfit',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRageTradePoolSettings',
    values: [string, IClearingHouse.RageTradePoolSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRangeOrder',
    values: [
      BigNumberish,
      BigNumberish,
      IClearingHouse.LiquidityChangeParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateSupportedDeposits',
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateSupportedVTokens',
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'vTokens',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawProtocolFee',
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: '__ClearingHouse_init',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addCollateralSupport',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'addMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'createAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createAccountAndAddMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'extsload', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountNetProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountView',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTwapSqrtPricesForSetDuration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'insuranceFund',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isVTokenAddressAvailable',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositionsWithGasClaim',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPositionWithGasClaim',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'multicallWithSingleMarginCheck',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nativeOracle',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'numAccounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pools', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'protocolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rageTradeFactoryAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrderWithGasClaim',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setPlatformParameters',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportedDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportedVTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'teamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferGovernance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferTeamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRageTradePoolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRangeOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateSupportedDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateSupportedVTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'vTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawProtocolFee',
    data: BytesLike
  ): Result;

  events: {
    'GovernanceTransferred(address,address)': EventFragment;
    'NewCollateralSupported(address)': EventFragment;
    'NewVTokenSupported(address)': EventFragment;
    'RageTradePoolSettingsUpdated(address,tuple)': EventFragment;
    'TeamMultisigTransferred(address,address)': EventFragment;
    'AccountCreated(address,uint256)': EventFragment;
    'DepositMargin(uint256,address,uint256)': EventFragment;
    'FundingPayment(uint256,address,int24,int24,int256)': EventFragment;
    'LiquidateRanges(uint256,address,int256,int256,int256)': EventFragment;
    'LiquidateTokenPosition(uint256,uint256,address,uint16,uint256,uint256,int256)': EventFragment;
    'LiquidityChange(uint256,address,int24,int24,int128,uint8,int256,int256)': EventFragment;
    'LiquidityFee(uint256,address,int24,int24,int256)': EventFragment;
    'LiquidityTokenPositionChange(uint256,address,int24,int24,int256)': EventFragment;
    'ProtocolFeeWithdrawm(address,uint256)': EventFragment;
    'TokenPositionChange(uint256,address,int256,int256)': EventFragment;
    'UpdateProfit(uint256,int256)': EventFragment;
    'WithdrawMargin(uint256,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'GovernanceTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCollateralSupported'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewVTokenSupported'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'RageTradePoolSettingsUpdated'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TeamMultisigTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AccountCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositMargin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundingPayment'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidateRanges'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidateTokenPosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityFee'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'LiquidityTokenPositionChange'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeWithdrawm'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenPositionChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateProfit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawMargin'): EventFragment;
}

export type GovernanceTransferredEvent = TypedEvent<
  [string, string],
  { previousGovernance: string; newGovernance: string }
>;

export type GovernanceTransferredEventFilter = TypedEventFilter<GovernanceTransferredEvent>;

export type NewCollateralSupportedEvent = TypedEvent<
  [string],
  { rTokenAddress: string }
>;

export type NewCollateralSupportedEventFilter = TypedEventFilter<NewCollateralSupportedEvent>;

export type NewVTokenSupportedEvent = TypedEvent<[string], { vToken: string }>;

export type NewVTokenSupportedEventFilter = TypedEventFilter<NewVTokenSupportedEvent>;

export type RageTradePoolSettingsUpdatedEvent = TypedEvent<
  [string, IClearingHouse.RageTradePoolSettingsStructOutput],
  { vToken: string; settings: IClearingHouse.RageTradePoolSettingsStructOutput }
>;

export type RageTradePoolSettingsUpdatedEventFilter = TypedEventFilter<RageTradePoolSettingsUpdatedEvent>;

export type TeamMultisigTransferredEvent = TypedEvent<
  [string, string],
  { previousTeamMultisig: string; newTeamMultisig: string }
>;

export type TeamMultisigTransferredEventFilter = TypedEventFilter<TeamMultisigTransferredEvent>;

export type AccountCreatedEvent = TypedEvent<
  [string, BigNumber],
  { ownerAddress: string; accountNo: BigNumber }
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export type DepositMarginEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { accountNo: BigNumber; cTokenAddress: string; amount: BigNumber }
>;

export type DepositMarginEventFilter = TypedEventFilter<DepositMarginEvent>;

export type FundingPaymentEvent = TypedEvent<
  [BigNumber, string, number, number, BigNumber],
  {
    accountNo: BigNumber;
    vToken: string;
    tickLower: number;
    tickUpper: number;
    amount: BigNumber;
  }
>;

export type FundingPaymentEventFilter = TypedEventFilter<FundingPaymentEvent>;

export type LiquidateRangesEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    accountNo: BigNumber;
    keeperAddress: string;
    liquidationFee: BigNumber;
    keeperFee: BigNumber;
    insuranceFundFee: BigNumber;
  }
>;

export type LiquidateRangesEventFilter = TypedEventFilter<LiquidateRangesEvent>;

export type LiquidateTokenPositionEvent = TypedEvent<
  [BigNumber, BigNumber, string, number, BigNumber, BigNumber, BigNumber],
  {
    accountNo: BigNumber;
    liquidatorAccountNo: BigNumber;
    vToken: string;
    liquidationBps: number;
    liquidationPriceX128: BigNumber;
    liquidatorPriceX128: BigNumber;
    insuranceFundFee: BigNumber;
  }
>;

export type LiquidateTokenPositionEventFilter = TypedEventFilter<LiquidateTokenPositionEvent>;

export type LiquidityChangeEvent = TypedEvent<
  [BigNumber, string, number, number, BigNumber, number, BigNumber, BigNumber],
  {
    accountNo: BigNumber;
    vToken: string;
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
    limitOrderType: number;
    tokenAmountOut: BigNumber;
    baseAmountOut: BigNumber;
  }
>;

export type LiquidityChangeEventFilter = TypedEventFilter<LiquidityChangeEvent>;

export type LiquidityFeeEvent = TypedEvent<
  [BigNumber, string, number, number, BigNumber],
  {
    accountNo: BigNumber;
    vToken: string;
    tickLower: number;
    tickUpper: number;
    amount: BigNumber;
  }
>;

export type LiquidityFeeEventFilter = TypedEventFilter<LiquidityFeeEvent>;

export type LiquidityTokenPositionChangeEvent = TypedEvent<
  [BigNumber, string, number, number, BigNumber],
  {
    accountNo: BigNumber;
    vToken: string;
    tickLower: number;
    tickUpper: number;
    tokenAmountOut: BigNumber;
  }
>;

export type LiquidityTokenPositionChangeEventFilter = TypedEventFilter<LiquidityTokenPositionChangeEvent>;

export type ProtocolFeeWithdrawmEvent = TypedEvent<
  [string, BigNumber],
  { wrapperAddress: string; feeAmount: BigNumber }
>;

export type ProtocolFeeWithdrawmEventFilter = TypedEventFilter<ProtocolFeeWithdrawmEvent>;

export type TokenPositionChangeEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    accountNo: BigNumber;
    vToken: string;
    tokenAmountOut: BigNumber;
    baseAmountOut: BigNumber;
  }
>;

export type TokenPositionChangeEventFilter = TypedEventFilter<TokenPositionChangeEvent>;

export type UpdateProfitEvent = TypedEvent<
  [BigNumber, BigNumber],
  { accountNo: BigNumber; amount: BigNumber }
>;

export type UpdateProfitEventFilter = TypedEventFilter<UpdateProfitEvent>;

export type WithdrawMarginEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { accountNo: BigNumber; cTokenAddress: string; amount: BigNumber }
>;

export type WithdrawMarginEventFilter = TypedEventFilter<WithdrawMarginEvent>;

export interface ClearingHouse extends BaseContract {
  contractName: 'ClearingHouse';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClearingHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __ClearingHouse_init(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCollateralSupport(
      cToken: string,
      oracle: string,
      twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMargin(
      accountNo: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cTokens(
      cTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CTokenLib.CTokenStructOutput]>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccountAndAddMargin(
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { val: string }>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getAccountMarketValueAndRequiredMargin(
      accountNo: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accountNetProfit: BigNumber }>;

    getAccountView(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        IClearingHouse.DepositTokenViewStructOutput[],
        IClearingHouse.VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vBaseBalance: BigNumber;
        tokenDeposits: IClearingHouse.DepositTokenViewStructOutput[];
        tokenPositions: IClearingHouse.VTokenPositionViewStructOutput[];
      }
    >;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<[string]>;

    insuranceFund(overrides?: CallOverrides): Promise<[string]>;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidateLiquidityPositions(
      accountNo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateLiquidityPositionsWithGasClaim(
      accountNo: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateTokenPosition(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateTokenPositionWithGasClaim(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicallWithSingleMarginCheck(
      accountNo: BigNumberish,
      operations: IClearingHouse.MulticallOperationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nativeOracle(overrides?: CallOverrides): Promise<[string]>;

    numAccounts(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pools(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<[IClearingHouse.RageTradePoolStructOutput]>;

    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        Account.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        liquidationParams: Account.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    registerPool(
      full: string,
      rageTradePool: IClearingHouse.RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLimitOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLimitOrderWithGasClaim(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMargin(
      accountNo: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformParameters(
      _liquidationParams: Account.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedDeposits(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportedVTokens(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapToken(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      swapParams: IClearingHouse.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<[string]>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProfit(
      accountNo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRageTradePoolSettings(
      vToken: string,
      newSettings: IClearingHouse.RageTradePoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRangeOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidityChangeParams: IClearingHouse.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSupportedDeposits(
      tokenAddress: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSupportedVTokens(
      vToken: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vTokens(
      vTokenAddressTruncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __ClearingHouse_init(
    _rageTradeFactoryAddress: string,
    _defaultCollateralToken: string,
    _defaultCollateralTokenOracle: string,
    _insuranceFund: string,
    _vBase: string,
    _nativeOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCollateralSupport(
    cToken: string,
    oracle: string,
    twapDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMargin(
    accountNo: BigNumberish,
    cTokenTruncatedAddress: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cTokens(
    cTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CTokenLib.CTokenStructOutput>;

  createAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccountAndAddMargin(
    vTokenTruncatedAddress: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'extsload(bytes32)'(
    slot: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  'extsload(bytes32[])'(
    slots: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAccountMarketValueAndRequiredMargin(
    accountNo: BigNumberish,
    isInitialMargin: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      accountMarketValue: BigNumber;
      requiredMargin: BigNumber;
    }
  >;

  getAccountNetProfit(
    accountNo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountView(
    accountNo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      IClearingHouse.DepositTokenViewStructOutput[],
      IClearingHouse.VTokenPositionViewStructOutput[]
    ] & {
      owner: string;
      vBaseBalance: BigNumber;
      tokenDeposits: IClearingHouse.DepositTokenViewStructOutput[];
      tokenPositions: IClearingHouse.VTokenPositionViewStructOutput[];
    }
  >;

  getTwapSqrtPricesForSetDuration(
    vToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      realPriceX128: BigNumber;
      virtualPriceX128: BigNumber;
    }
  >;

  governance(overrides?: CallOverrides): Promise<string>;

  insuranceFund(overrides?: CallOverrides): Promise<string>;

  isVTokenAddressAvailable(
    truncated: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidateLiquidityPositions(
    accountNo: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateLiquidityPositionsWithGasClaim(
    accountNo: BigNumberish,
    gasComputationUnitsClaim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateTokenPosition(
    liquidatorAccountNo: BigNumberish,
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    liquidationBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateTokenPositionWithGasClaim(
    liquidatorAccountNo: BigNumberish,
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    liquidationBps: BigNumberish,
    gasComputationUnitsClaim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicallWithSingleMarginCheck(
    accountNo: BigNumberish,
    operations: IClearingHouse.MulticallOperationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nativeOracle(overrides?: CallOverrides): Promise<string>;

  numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pools(
    vToken: string,
    overrides?: CallOverrides
  ): Promise<IClearingHouse.RageTradePoolStructOutput>;

  protocolInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      Account.LiquidationParamsStructOutput,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      vBase: string;
      liquidationParams: Account.LiquidationParamsStructOutput;
      minRequiredMargin: BigNumber;
      removeLimitOrderFee: BigNumber;
      minimumOrderNotional: BigNumber;
    }
  >;

  rageTradeFactoryAddress(overrides?: CallOverrides): Promise<string>;

  registerPool(
    full: string,
    rageTradePool: IClearingHouse.RageTradePoolStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLimitOrder(
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLimitOrderWithGasClaim(
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    gasComputationUnitsClaim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMargin(
    accountNo: BigNumberish,
    cTokenTruncatedAddress: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformParameters(
    _liquidationParams: Account.LiquidationParamsStruct,
    _removeLimitOrderFee: BigNumberish,
    _minimumOrderNotional: BigNumberish,
    _minRequiredMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedDeposits(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportedVTokens(vToken: string, overrides?: CallOverrides): Promise<boolean>;

  swapToken(
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    swapParams: IClearingHouse.SwapParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  teamMultisig(overrides?: CallOverrides): Promise<string>;

  transferGovernance(
    newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTeamMultisig(
    newTeamMultisig: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProfit(
    accountNo: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRageTradePoolSettings(
    vToken: string,
    newSettings: IClearingHouse.RageTradePoolSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRangeOrder(
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    liquidityChangeParams: IClearingHouse.LiquidityChangeParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSupportedDeposits(
    tokenAddress: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSupportedVTokens(
    vToken: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vTokens(
    vTokenAddressTruncated: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawProtocolFee(
    wrapperAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __ClearingHouse_init(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addCollateralSupport(
      cToken: string,
      oracle: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addMargin(
      accountNo: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cTokens(
      cTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CTokenLib.CTokenStructOutput>;

    createAccount(overrides?: CallOverrides): Promise<BigNumber>;

    createAccountAndAddMargin(
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAccountMarketValueAndRequiredMargin(
      accountNo: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountView(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        IClearingHouse.DepositTokenViewStructOutput[],
        IClearingHouse.VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vBaseBalance: BigNumber;
        tokenDeposits: IClearingHouse.DepositTokenViewStructOutput[];
        tokenPositions: IClearingHouse.VTokenPositionViewStructOutput[];
      }
    >;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<string>;

    insuranceFund(overrides?: CallOverrides): Promise<string>;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidateLiquidityPositions(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateLiquidityPositionsWithGasClaim(
      accountNo: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateTokenPosition(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouse.BalanceAdjustmentsStructOutput>;

    liquidateTokenPositionWithGasClaim(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouse.BalanceAdjustmentsStructOutput>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    multicallWithSingleMarginCheck(
      accountNo: BigNumberish,
      operations: IClearingHouse.MulticallOperationStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    nativeOracle(overrides?: CallOverrides): Promise<string>;

    numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pools(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<IClearingHouse.RageTradePoolStructOutput>;

    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        Account.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        liquidationParams: Account.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<string>;

    registerPool(
      full: string,
      rageTradePool: IClearingHouse.RageTradePoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLimitOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLimitOrderWithGasClaim(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMargin(
      accountNo: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(_pause: boolean, overrides?: CallOverrides): Promise<void>;

    setPlatformParameters(
      _liquidationParams: Account.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedDeposits(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportedVTokens(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapToken(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      swapParams: IClearingHouse.SwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vBaseAmountOut: BigNumber;
      }
    >;

    teamMultisig(overrides?: CallOverrides): Promise<string>;

    transferGovernance(
      newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProfit(
      accountNo: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRageTradePoolSettings(
      vToken: string,
      newSettings: IClearingHouse.RageTradePoolSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRangeOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidityChangeParams: IClearingHouse.LiquidityChangeParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vBaseAmountOut: BigNumber;
      }
    >;

    updateSupportedDeposits(
      tokenAddress: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSupportedVTokens(
      vToken: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    vTokens(
      vTokenAddressTruncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'GovernanceTransferred(address,address)'(
      previousGovernance?: string | null,
      newGovernance?: string | null
    ): GovernanceTransferredEventFilter;
    GovernanceTransferred(
      previousGovernance?: string | null,
      newGovernance?: string | null
    ): GovernanceTransferredEventFilter;

    'NewCollateralSupported(address)'(
      rTokenAddress?: null
    ): NewCollateralSupportedEventFilter;
    NewCollateralSupported(
      rTokenAddress?: null
    ): NewCollateralSupportedEventFilter;

    'NewVTokenSupported(address)'(vToken?: null): NewVTokenSupportedEventFilter;
    NewVTokenSupported(vToken?: null): NewVTokenSupportedEventFilter;

    'RageTradePoolSettingsUpdated(address,tuple)'(
      vToken?: null,
      settings?: null
    ): RageTradePoolSettingsUpdatedEventFilter;
    RageTradePoolSettingsUpdated(
      vToken?: null,
      settings?: null
    ): RageTradePoolSettingsUpdatedEventFilter;

    'TeamMultisigTransferred(address,address)'(
      previousTeamMultisig?: string | null,
      newTeamMultisig?: string | null
    ): TeamMultisigTransferredEventFilter;
    TeamMultisigTransferred(
      previousTeamMultisig?: string | null,
      newTeamMultisig?: string | null
    ): TeamMultisigTransferredEventFilter;

    'AccountCreated(address,uint256)'(
      ownerAddress?: string | null,
      accountNo?: null
    ): AccountCreatedEventFilter;
    AccountCreated(
      ownerAddress?: string | null,
      accountNo?: null
    ): AccountCreatedEventFilter;

    'DepositMargin(uint256,address,uint256)'(
      accountNo?: BigNumberish | null,
      cTokenAddress?: string | null,
      amount?: null
    ): DepositMarginEventFilter;
    DepositMargin(
      accountNo?: BigNumberish | null,
      cTokenAddress?: string | null,
      amount?: null
    ): DepositMarginEventFilter;

    'FundingPayment(uint256,address,int24,int24,int256)'(
      accountNo?: BigNumberish | null,
      vToken?: string | null,
      tickLower?: null,
      tickUpper?: null,
      amount?: null
    ): FundingPaymentEventFilter;
    FundingPayment(
      accountNo?: BigNumberish | null,
      vToken?: string | null,
      tickLower?: null,
      tickUpper?: null,
      amount?: null
    ): FundingPaymentEventFilter;

    'LiquidateRanges(uint256,address,int256,int256,int256)'(
      accountNo?: BigNumberish | null,
      keeperAddress?: string | null,
      liquidationFee?: null,
      keeperFee?: null,
      insuranceFundFee?: null
    ): LiquidateRangesEventFilter;
    LiquidateRanges(
      accountNo?: BigNumberish | null,
      keeperAddress?: string | null,
      liquidationFee?: null,
      keeperFee?: null,
      insuranceFundFee?: null
    ): LiquidateRangesEventFilter;

    'LiquidateTokenPosition(uint256,uint256,address,uint16,uint256,uint256,int256)'(
      accountNo?: BigNumberish | null,
      liquidatorAccountNo?: BigNumberish | null,
      vToken?: string | null,
      liquidationBps?: null,
      liquidationPriceX128?: null,
      liquidatorPriceX128?: null,
      insuranceFundFee?: null
    ): LiquidateTokenPositionEventFilter;
    LiquidateTokenPosition(
      accountNo?: BigNumberish | null,
      liquidatorAccountNo?: BigNumberish | null,
      vToken?: string | null,
      liquidationBps?: null,
      liquidationPriceX128?: null,
      liquidatorPriceX128?: null,
      insuranceFundFee?: null
    ): LiquidateTokenPositionEventFilter;

    'LiquidityChange(uint256,address,int24,int24,int128,uint8,int256,int256)'(
      accountNo?: BigNumberish | null,
      vToken?: string | null,
      tickLower?: null,
      tickUpper?: null,
      liquidityDelta?: null,
      limitOrderType?: null,
      tokenAmountOut?: null,
      baseAmountOut?: null
    ): LiquidityChangeEventFilter;
    LiquidityChange(
      accountNo?: BigNumberish | null,
      vToken?: string | null,
      tickLower?: null,
      tickUpper?: null,
      liquidityDelta?: null,
      limitOrderType?: null,
      tokenAmountOut?: null,
      baseAmountOut?: null
    ): LiquidityChangeEventFilter;

    'LiquidityFee(uint256,address,int24,int24,int256)'(
      accountNo?: BigNumberish | null,
      vToken?: string | null,
      tickLower?: null,
      tickUpper?: null,
      amount?: null
    ): LiquidityFeeEventFilter;
    LiquidityFee(
      accountNo?: BigNumberish | null,
      vToken?: string | null,
      tickLower?: null,
      tickUpper?: null,
      amount?: null
    ): LiquidityFeeEventFilter;

    'LiquidityTokenPositionChange(uint256,address,int24,int24,int256)'(
      accountNo?: BigNumberish | null,
      vToken?: string | null,
      tickLower?: null,
      tickUpper?: null,
      tokenAmountOut?: null
    ): LiquidityTokenPositionChangeEventFilter;
    LiquidityTokenPositionChange(
      accountNo?: BigNumberish | null,
      vToken?: string | null,
      tickLower?: null,
      tickUpper?: null,
      tokenAmountOut?: null
    ): LiquidityTokenPositionChangeEventFilter;

    'ProtocolFeeWithdrawm(address,uint256)'(
      wrapperAddress?: string | null,
      feeAmount?: null
    ): ProtocolFeeWithdrawmEventFilter;
    ProtocolFeeWithdrawm(
      wrapperAddress?: string | null,
      feeAmount?: null
    ): ProtocolFeeWithdrawmEventFilter;

    'TokenPositionChange(uint256,address,int256,int256)'(
      accountNo?: BigNumberish | null,
      vToken?: string | null,
      tokenAmountOut?: null,
      baseAmountOut?: null
    ): TokenPositionChangeEventFilter;
    TokenPositionChange(
      accountNo?: BigNumberish | null,
      vToken?: string | null,
      tokenAmountOut?: null,
      baseAmountOut?: null
    ): TokenPositionChangeEventFilter;

    'UpdateProfit(uint256,int256)'(
      accountNo?: BigNumberish | null,
      amount?: null
    ): UpdateProfitEventFilter;
    UpdateProfit(
      accountNo?: BigNumberish | null,
      amount?: null
    ): UpdateProfitEventFilter;

    'WithdrawMargin(uint256,address,uint256)'(
      accountNo?: BigNumberish | null,
      cTokenAddress?: string | null,
      amount?: null
    ): WithdrawMarginEventFilter;
    WithdrawMargin(
      accountNo?: BigNumberish | null,
      cTokenAddress?: string | null,
      amount?: null
    ): WithdrawMarginEventFilter;
  };

  estimateGas: {
    __ClearingHouse_init(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCollateralSupport(
      cToken: string,
      oracle: string,
      twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMargin(
      accountNo: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cTokens(
      cTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccountAndAddMargin(
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMarketValueAndRequiredMargin(
      accountNo: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetProfit(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountView(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateLiquidityPositions(
      accountNo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateLiquidityPositionsWithGasClaim(
      accountNo: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateTokenPosition(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateTokenPositionWithGasClaim(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicallWithSingleMarginCheck(
      accountNo: BigNumberish,
      operations: IClearingHouse.MulticallOperationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nativeOracle(overrides?: CallOverrides): Promise<BigNumber>;

    numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pools(vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    protocolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    registerPool(
      full: string,
      rageTradePool: IClearingHouse.RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLimitOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLimitOrderWithGasClaim(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMargin(
      accountNo: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaused(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformParameters(
      _liquidationParams: Account.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedDeposits(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedVTokens(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapToken(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      swapParams: IClearingHouse.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    teamMultisig(overrides?: CallOverrides): Promise<BigNumber>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProfit(
      accountNo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRageTradePoolSettings(
      vToken: string,
      newSettings: IClearingHouse.RageTradePoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRangeOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidityChangeParams: IClearingHouse.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSupportedDeposits(
      tokenAddress: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSupportedVTokens(
      vToken: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vTokens(
      vTokenAddressTruncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __ClearingHouse_init(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCollateralSupport(
      cToken: string,
      oracle: string,
      twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMargin(
      accountNo: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cTokens(
      cTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccountAndAddMargin(
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountMarketValueAndRequiredMargin(
      accountNo: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNetProfit(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountView(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPositions(
      accountNo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPositionsWithGasClaim(
      accountNo: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTokenPosition(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTokenPositionWithGasClaim(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicallWithSingleMarginCheck(
      accountNo: BigNumberish,
      operations: IClearingHouse.MulticallOperationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nativeOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numAccounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rageTradeFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPool(
      full: string,
      rageTradePool: IClearingHouse.RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLimitOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLimitOrderWithGasClaim(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMargin(
      accountNo: BigNumberish,
      cTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformParameters(
      _liquidationParams: Account.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedDeposits(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedVTokens(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapToken(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      swapParams: IClearingHouse.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProfit(
      accountNo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRageTradePoolSettings(
      vToken: string,
      newSettings: IClearingHouse.RageTradePoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRangeOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidityChangeParams: IClearingHouse.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSupportedDeposits(
      tokenAddress: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSupportedVTokens(
      vToken: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vTokens(
      vTokenAddressTruncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
