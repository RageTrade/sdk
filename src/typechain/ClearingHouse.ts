/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export declare namespace IClearingHouseStructures {
  export type CollateralSettingsStruct = {
    oracle: string;
    twapDuration: BigNumberish;
    isAllowedForDeposit: boolean;
  };

  export type CollateralSettingsStructOutput = [string, number, boolean] & {
    oracle: string;
    twapDuration: number;
    isAllowedForDeposit: boolean;
  };

  export type PoolSettingsStruct = {
    initialMarginRatioBps: BigNumberish;
    maintainanceMarginRatioBps: BigNumberish;
    maxVirtualPriceDeviationRatioBps: BigNumberish;
    twapDuration: BigNumberish;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type PoolSettingsStructOutput = [
    number,
    number,
    number,
    number,
    boolean,
    boolean,
    string
  ] & {
    initialMarginRatioBps: number;
    maintainanceMarginRatioBps: number;
    maxVirtualPriceDeviationRatioBps: number;
    twapDuration: number;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type LiquidationParamsStruct = {
    rangeLiquidationFeeFraction: BigNumberish;
    tokenLiquidationFeeFraction: BigNumberish;
    closeFactorMMThresholdBps: BigNumberish;
    partialLiquidationCloseFactorBps: BigNumberish;
    insuranceFundFeeShareBps: BigNumberish;
    liquidationSlippageSqrtToleranceBps: BigNumberish;
    maxRangeLiquidationFees: BigNumberish;
    minNotionalLiquidatable: BigNumberish;
  };

  export type LiquidationParamsStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    rangeLiquidationFeeFraction: number;
    tokenLiquidationFeeFraction: number;
    closeFactorMMThresholdBps: number;
    partialLiquidationCloseFactorBps: number;
    insuranceFundFeeShareBps: number;
    liquidationSlippageSqrtToleranceBps: number;
    maxRangeLiquidationFees: BigNumber;
    minNotionalLiquidatable: BigNumber;
  };

  export type CollateralDepositViewStruct = {
    collateral: string;
    balance: BigNumberish;
  };

  export type CollateralDepositViewStructOutput = [string, BigNumber] & {
    collateral: string;
    balance: BigNumber;
  };

  export type LiquidityPositionViewStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidity: BigNumberish;
    vTokenAmountIn: BigNumberish;
    sumALastX128: BigNumberish;
    sumBInsideLastX128: BigNumberish;
    sumFpInsideLastX128: BigNumberish;
    sumFeeInsideLastX128: BigNumberish;
    limitOrderType: BigNumberish;
  };

  export type LiquidityPositionViewStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    vTokenAmountIn: BigNumber;
    sumALastX128: BigNumber;
    sumBInsideLastX128: BigNumber;
    sumFpInsideLastX128: BigNumber;
    sumFeeInsideLastX128: BigNumber;
    limitOrderType: number;
  };

  export type VTokenPositionViewStruct = {
    poolId: BigNumberish;
    balance: BigNumberish;
    netTraderPosition: BigNumberish;
    sumALastX128: BigNumberish;
    liquidityPositions: IClearingHouseStructures.LiquidityPositionViewStruct[];
  };

  export type VTokenPositionViewStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    IClearingHouseStructures.LiquidityPositionViewStructOutput[]
  ] & {
    poolId: number;
    balance: BigNumber;
    netTraderPosition: BigNumber;
    sumALastX128: BigNumber;
    liquidityPositions: IClearingHouseStructures.LiquidityPositionViewStructOutput[];
  };

  export type CollateralStruct = {
    token: string;
    settings: IClearingHouseStructures.CollateralSettingsStruct;
  };

  export type CollateralStructOutput = [
    string,
    IClearingHouseStructures.CollateralSettingsStructOutput
  ] & {
    token: string;
    settings: IClearingHouseStructures.CollateralSettingsStructOutput;
  };

  export type PoolStruct = {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStruct;
  };

  export type PoolStructOutput = [
    string,
    string,
    string,
    IClearingHouseStructures.PoolSettingsStructOutput
  ] & {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  };

  export type MulticallOperationStruct = {
    operationType: BigNumberish;
    data: BytesLike;
  };

  export type MulticallOperationStructOutput = [number, string] & {
    operationType: number;
    data: string;
  };

  export type SwapParamsStruct = {
    amount: BigNumberish;
    sqrtPriceLimit: BigNumberish;
    isNotional: boolean;
    isPartialAllowed: boolean;
  };

  export type SwapParamsStructOutput = [
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    amount: BigNumber;
    sqrtPriceLimit: BigNumber;
    isNotional: boolean;
    isPartialAllowed: boolean;
  };

  export type LiquidityChangeParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
    sqrtPriceCurrent: BigNumberish;
    slippageToleranceBps: BigNumberish;
    closeTokenPosition: boolean;
    limitOrderType: BigNumberish;
  };

  export type LiquidityChangeParamsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    number,
    boolean,
    number
  ] & {
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
    sqrtPriceCurrent: BigNumber;
    slippageToleranceBps: number;
    closeTokenPosition: boolean;
    limitOrderType: number;
  };
}

export declare namespace FundingPayment {
  export type InfoStruct = {
    sumAX128: BigNumberish;
    sumBX128: BigNumberish;
    sumFpX128: BigNumberish;
    timestampLast: BigNumberish;
  };

  export type InfoStructOutput = [BigNumber, BigNumber, BigNumber, number] & {
    sumAX128: BigNumber;
    sumBX128: BigNumber;
    sumFpX128: BigNumber;
    timestampLast: number;
  };
}

export interface ClearingHouseInterface extends utils.Interface {
  functions: {
    '__initialize_ClearingHouse(address,address,address,address,address)': FunctionFragment;
    'createAccount()': FunctionFragment;
    'createAccountAndAddMargin(uint32,uint256)': FunctionFragment;
    'extsload(bytes32)': FunctionFragment;
    'extsload(bytes32[])': FunctionFragment;
    'getAccountInfo(uint256)': FunctionFragment;
    'getAccountMarketValueAndRequiredMargin(uint256,bool)': FunctionFragment;
    'getAccountNetProfit(uint256)': FunctionFragment;
    'getAccountNetTokenPosition(uint256,uint32)': FunctionFragment;
    'getCollateralInfo(uint32)': FunctionFragment;
    'getPoolInfo(uint32)': FunctionFragment;
    'getProtocolInfo()': FunctionFragment;
    'getTwapPrices(uint32)': FunctionFragment;
    'governance()': FunctionFragment;
    'insuranceFund()': FunctionFragment;
    'isPoolIdAvailable(uint32)': FunctionFragment;
    'liquidateLiquidityPositions(uint256)': FunctionFragment;
    'liquidateTokenPosition(uint256,uint32)': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'multicallWithSingleMarginCheck(uint256,(uint8,bytes)[])': FunctionFragment;
    'numAccounts()': FunctionFragment;
    'pause(uint32[])': FunctionFragment;
    'paused()': FunctionFragment;
    'rageTradeFactoryAddress()': FunctionFragment;
    'registerPool((address,address,address,(uint16,uint16,uint16,uint32,bool,bool,address)))': FunctionFragment;
    'removeLimitOrder(uint256,uint32,int24,int24)': FunctionFragment;
    'swapToken(uint256,uint32,(int256,uint160,bool,bool))': FunctionFragment;
    'teamMultisig()': FunctionFragment;
    'transferGovernance(address)': FunctionFragment;
    'transferTeamMultisig(address)': FunctionFragment;
    'unpause(uint32[])': FunctionFragment;
    'updateCollateralSettings(address,(address,uint32,bool))': FunctionFragment;
    'updateMargin(uint256,uint32,int256)': FunctionFragment;
    'updatePoolSettings(uint32,(uint16,uint16,uint16,uint32,bool,bool,address))': FunctionFragment;
    'updateProfit(uint256,int256)': FunctionFragment;
    'updateProtocolSettings((uint16,uint16,uint16,uint16,uint16,uint16,uint64,uint64),uint256,uint256,uint256)': FunctionFragment;
    'updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8))': FunctionFragment;
    'withdrawProtocolFee(address[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '__initialize_ClearingHouse'
      | 'createAccount'
      | 'createAccountAndAddMargin'
      | 'extsload(bytes32)'
      | 'extsload(bytes32[])'
      | 'getAccountInfo'
      | 'getAccountMarketValueAndRequiredMargin'
      | 'getAccountNetProfit'
      | 'getAccountNetTokenPosition'
      | 'getCollateralInfo'
      | 'getPoolInfo'
      | 'getProtocolInfo'
      | 'getTwapPrices'
      | 'governance'
      | 'insuranceFund'
      | 'isPoolIdAvailable'
      | 'liquidateLiquidityPositions'
      | 'liquidateTokenPosition'
      | 'multicall'
      | 'multicallWithSingleMarginCheck'
      | 'numAccounts'
      | 'pause'
      | 'paused'
      | 'rageTradeFactoryAddress'
      | 'registerPool'
      | 'removeLimitOrder'
      | 'swapToken'
      | 'teamMultisig'
      | 'transferGovernance'
      | 'transferTeamMultisig'
      | 'unpause'
      | 'updateCollateralSettings'
      | 'updateMargin'
      | 'updatePoolSettings'
      | 'updateProfit'
      | 'updateProtocolSettings'
      | 'updateRangeOrder'
      | 'withdrawProtocolFee'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: '__initialize_ClearingHouse',
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccount',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccountAndAddMargin',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'extsload(bytes32)',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'extsload(bytes32[])',
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountNetProfit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountNetTokenPosition',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCollateralInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getProtocolInfo',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getTwapPrices',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'governance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'insuranceFund',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isPoolIdAvailable',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositions',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPosition',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'multicall',
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'multicallWithSingleMarginCheck',
    values: [BigNumberish, IClearingHouseStructures.MulticallOperationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'numAccounts',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'pause',
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rageTradeFactoryAddress',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [IClearingHouseStructures.PoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrder',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapToken',
    values: [
      BigNumberish,
      BigNumberish,
      IClearingHouseStructures.SwapParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'teamMultisig',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferGovernance',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTeamMultisig',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'unpause',
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateCollateralSettings',
    values: [string, IClearingHouseStructures.CollateralSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateMargin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePoolSettings',
    values: [BigNumberish, IClearingHouseStructures.PoolSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProfit',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProtocolSettings',
    values: [
      IClearingHouseStructures.LiquidationParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRangeOrder',
    values: [
      BigNumberish,
      BigNumberish,
      IClearingHouseStructures.LiquidityChangeParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawProtocolFee',
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: '__initialize_ClearingHouse',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createAccountAndAddMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'extsload(bytes32)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'extsload(bytes32[])',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountNetProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountNetTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCollateralInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPoolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProtocolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTwapPrices',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'insuranceFund',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isPoolIdAvailable',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'multicallWithSingleMarginCheck',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'numAccounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rageTradeFactoryAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'teamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferGovernance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferTeamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateCollateralSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updatePoolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProtocolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRangeOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawProtocolFee',
    data: BytesLike
  ): Result;

  events: {
    'AccountCreated(address,uint256)': EventFragment;
    'CollateralSettingsUpdated(address,tuple)': EventFragment;
    'GovernanceTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'PausedUpdated(bool)': EventFragment;
    'PoolSettingsUpdated(uint32,tuple)': EventFragment;
    'ProtocolSettingsUpdated(tuple,uint256,uint256,uint256)': EventFragment;
    'TeamMultisigTransferred(address,address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'LiquidityChanged(uint256,uint32,int24,int24,int128,uint8,int256,int256)': EventFragment;
    'LiquidityPositionEarningsRealized(uint256,uint32,int24,int24,int256)': EventFragment;
    'LiquidityPositionFundingPaymentRealized(uint256,uint32,int24,int24,int256,int256,int256,int256,uint256)': EventFragment;
    'LiquidityPositionsLiquidated(uint256,address,int256,int256,int256,int256)': EventFragment;
    'MarginUpdated(uint256,uint32,int256)': EventFragment;
    'ProfitUpdated(uint256,int256)': EventFragment;
    'ProtocolFeesWithdrawn(address,uint256)': EventFragment;
    'TokenPositionChanged(uint256,uint32,int256,int256,uint160,uint160)': EventFragment;
    'TokenPositionChangedDueToLiquidityChanged(uint256,uint32,int24,int24,int256)': EventFragment;
    'TokenPositionFundingPaymentRealized(uint256,uint32,int256,int256)': EventFragment;
    'TokenPositionLiquidated(uint256,uint256,uint32,int256,int256,int256)': EventFragment;
    'FundingPaymentStateUpdated(tuple,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccountCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralSettingsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PausedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolSettingsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolSettingsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TeamMultisigTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityChanged'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'LiquidityPositionEarningsRealized'
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'LiquidityPositionFundingPaymentRealized'
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'LiquidityPositionsLiquidated'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarginUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProfitUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeesWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenPositionChanged'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'TokenPositionChangedDueToLiquidityChanged'
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'TokenPositionFundingPaymentRealized'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenPositionLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundingPaymentStateUpdated'): EventFragment;
}

export interface AccountCreatedEventObject {
  ownerAddress: string;
  accountId: BigNumber;
}
export type AccountCreatedEvent = TypedEvent<
  [string, BigNumber],
  AccountCreatedEventObject
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export interface CollateralSettingsUpdatedEventObject {
  cToken: string;
  cTokenInfo: IClearingHouseStructures.CollateralSettingsStructOutput;
}
export type CollateralSettingsUpdatedEvent = TypedEvent<
  [string, IClearingHouseStructures.CollateralSettingsStructOutput],
  CollateralSettingsUpdatedEventObject
>;

export type CollateralSettingsUpdatedEventFilter =
  TypedEventFilter<CollateralSettingsUpdatedEvent>;

export interface GovernanceTransferredEventObject {
  previousGovernance: string;
  newGovernance: string;
}
export type GovernanceTransferredEvent = TypedEvent<
  [string, string],
  GovernanceTransferredEventObject
>;

export type GovernanceTransferredEventFilter =
  TypedEventFilter<GovernanceTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PausedUpdatedEventObject {
  paused: boolean;
}
export type PausedUpdatedEvent = TypedEvent<
  [boolean],
  PausedUpdatedEventObject
>;

export type PausedUpdatedEventFilter = TypedEventFilter<PausedUpdatedEvent>;

export interface PoolSettingsUpdatedEventObject {
  poolId: number;
  settings: IClearingHouseStructures.PoolSettingsStructOutput;
}
export type PoolSettingsUpdatedEvent = TypedEvent<
  [number, IClearingHouseStructures.PoolSettingsStructOutput],
  PoolSettingsUpdatedEventObject
>;

export type PoolSettingsUpdatedEventFilter =
  TypedEventFilter<PoolSettingsUpdatedEvent>;

export interface ProtocolSettingsUpdatedEventObject {
  liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
  removeLimitOrderFee: BigNumber;
  minimumOrderNotional: BigNumber;
  minRequiredMargin: BigNumber;
}
export type ProtocolSettingsUpdatedEvent = TypedEvent<
  [
    IClearingHouseStructures.LiquidationParamsStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ProtocolSettingsUpdatedEventObject
>;

export type ProtocolSettingsUpdatedEventFilter =
  TypedEventFilter<ProtocolSettingsUpdatedEvent>;

export interface TeamMultisigTransferredEventObject {
  previousTeamMultisig: string;
  newTeamMultisig: string;
}
export type TeamMultisigTransferredEvent = TypedEvent<
  [string, string],
  TeamMultisigTransferredEventObject
>;

export type TeamMultisigTransferredEventFilter =
  TypedEventFilter<TeamMultisigTransferredEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface LiquidityChangedEventObject {
  accountId: BigNumber;
  poolId: number;
  tickLower: number;
  tickUpper: number;
  liquidityDelta: BigNumber;
  limitOrderType: number;
  vTokenAmountOut: BigNumber;
  vQuoteAmountOut: BigNumber;
}
export type LiquidityChangedEvent = TypedEvent<
  [BigNumber, number, number, number, BigNumber, number, BigNumber, BigNumber],
  LiquidityChangedEventObject
>;

export type LiquidityChangedEventFilter =
  TypedEventFilter<LiquidityChangedEvent>;

export interface LiquidityPositionEarningsRealizedEventObject {
  accountId: BigNumber;
  poolId: number;
  tickLower: number;
  tickUpper: number;
  amount: BigNumber;
}
export type LiquidityPositionEarningsRealizedEvent = TypedEvent<
  [BigNumber, number, number, number, BigNumber],
  LiquidityPositionEarningsRealizedEventObject
>;

export type LiquidityPositionEarningsRealizedEventFilter =
  TypedEventFilter<LiquidityPositionEarningsRealizedEvent>;

export interface LiquidityPositionFundingPaymentRealizedEventObject {
  accountId: BigNumber;
  poolId: number;
  tickLower: number;
  tickUpper: number;
  amount: BigNumber;
  sumALastX128: BigNumber;
  sumBInsideLastX128: BigNumber;
  sumFpInsideLastX128: BigNumber;
  sumFeeInsideLastX128: BigNumber;
}
export type LiquidityPositionFundingPaymentRealizedEvent = TypedEvent<
  [
    BigNumber,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  LiquidityPositionFundingPaymentRealizedEventObject
>;

export type LiquidityPositionFundingPaymentRealizedEventFilter =
  TypedEventFilter<LiquidityPositionFundingPaymentRealizedEvent>;

export interface LiquidityPositionsLiquidatedEventObject {
  accountId: BigNumber;
  keeperAddress: string;
  liquidationFee: BigNumber;
  keeperFee: BigNumber;
  insuranceFundFee: BigNumber;
  accountMarketValueFinal: BigNumber;
}
export type LiquidityPositionsLiquidatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidityPositionsLiquidatedEventObject
>;

export type LiquidityPositionsLiquidatedEventFilter =
  TypedEventFilter<LiquidityPositionsLiquidatedEvent>;

export interface MarginUpdatedEventObject {
  accountId: BigNumber;
  collateralId: number;
  amount: BigNumber;
}
export type MarginUpdatedEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  MarginUpdatedEventObject
>;

export type MarginUpdatedEventFilter = TypedEventFilter<MarginUpdatedEvent>;

export interface ProfitUpdatedEventObject {
  accountId: BigNumber;
  amount: BigNumber;
}
export type ProfitUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProfitUpdatedEventObject
>;

export type ProfitUpdatedEventFilter = TypedEventFilter<ProfitUpdatedEvent>;

export interface ProtocolFeesWithdrawnEventObject {
  wrapperAddress: string;
  feeAmount: BigNumber;
}
export type ProtocolFeesWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  ProtocolFeesWithdrawnEventObject
>;

export type ProtocolFeesWithdrawnEventFilter =
  TypedEventFilter<ProtocolFeesWithdrawnEvent>;

export interface TokenPositionChangedEventObject {
  accountId: BigNumber;
  poolId: number;
  vTokenAmountOut: BigNumber;
  vQuoteAmountOut: BigNumber;
  sqrtPriceX96Start: BigNumber;
  sqrtPriceX96End: BigNumber;
}
export type TokenPositionChangedEvent = TypedEvent<
  [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber],
  TokenPositionChangedEventObject
>;

export type TokenPositionChangedEventFilter =
  TypedEventFilter<TokenPositionChangedEvent>;

export interface TokenPositionChangedDueToLiquidityChangedEventObject {
  accountId: BigNumber;
  poolId: number;
  tickLower: number;
  tickUpper: number;
  vTokenAmountOut: BigNumber;
}
export type TokenPositionChangedDueToLiquidityChangedEvent = TypedEvent<
  [BigNumber, number, number, number, BigNumber],
  TokenPositionChangedDueToLiquidityChangedEventObject
>;

export type TokenPositionChangedDueToLiquidityChangedEventFilter =
  TypedEventFilter<TokenPositionChangedDueToLiquidityChangedEvent>;

export interface TokenPositionFundingPaymentRealizedEventObject {
  accountId: BigNumber;
  poolId: number;
  amount: BigNumber;
  sumALastX128: BigNumber;
}
export type TokenPositionFundingPaymentRealizedEvent = TypedEvent<
  [BigNumber, number, BigNumber, BigNumber],
  TokenPositionFundingPaymentRealizedEventObject
>;

export type TokenPositionFundingPaymentRealizedEventFilter =
  TypedEventFilter<TokenPositionFundingPaymentRealizedEvent>;

export interface TokenPositionLiquidatedEventObject {
  accountId: BigNumber;
  liquidatorAccountId: BigNumber;
  poolId: number;
  keeperFee: BigNumber;
  insuranceFundFee: BigNumber;
  accountMarketValueFinal: BigNumber;
}
export type TokenPositionLiquidatedEvent = TypedEvent<
  [BigNumber, BigNumber, number, BigNumber, BigNumber, BigNumber],
  TokenPositionLiquidatedEventObject
>;

export type TokenPositionLiquidatedEventFilter =
  TypedEventFilter<TokenPositionLiquidatedEvent>;

export interface FundingPaymentStateUpdatedEventObject {
  fundingPayment: FundingPayment.InfoStructOutput;
  realPriceX128: BigNumber;
  virtualPriceX128: BigNumber;
}
export type FundingPaymentStateUpdatedEvent = TypedEvent<
  [FundingPayment.InfoStructOutput, BigNumber, BigNumber],
  FundingPaymentStateUpdatedEventObject
>;

export type FundingPaymentStateUpdatedEventFilter =
  TypedEventFilter<FundingPaymentStateUpdatedEvent>;

export interface ClearingHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClearingHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __initialize_ClearingHouse(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vQuote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccountAndAddMargin(
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { val: string }>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        IClearingHouseStructures.CollateralDepositViewStructOutput[],
        IClearingHouseStructures.VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vQuoteBalance: BigNumber;
        collateralDeposits: IClearingHouseStructures.CollateralDepositViewStructOutput[];
        tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
      }
    >;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        marketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accountNetProfit: BigNumber }>;

    getAccountNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netPosition: BigNumber }>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IClearingHouseStructures.CollateralStructOutput]>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IClearingHouseStructures.PoolStructOutput]>;

    getProtocolInfo(overrides?: CallOverrides): Promise<
      [
        string,
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        settlementToken: string;
        vQuote: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    getTwapPrices(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<[string]>;

    insuranceFund(overrides?: CallOverrides): Promise<[string]>;

    isPoolIdAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateTokenPosition(
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicallWithSingleMarginCheck(
      accountId: BigNumberish,
      operations: IClearingHouseStructures.MulticallOperationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numAccounts(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      allPoolIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<[string]>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      allPoolIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMargin(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolSettings(
      _liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __initialize_ClearingHouse(
    _rageTradeFactoryAddress: string,
    _defaultCollateralToken: string,
    _defaultCollateralTokenOracle: string,
    _insuranceFund: string,
    _vQuote: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccountAndAddMargin(
    collateralId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'extsload(bytes32)'(
    slot: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  'extsload(bytes32[])'(
    slots: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAccountInfo(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      IClearingHouseStructures.CollateralDepositViewStructOutput[],
      IClearingHouseStructures.VTokenPositionViewStructOutput[]
    ] & {
      owner: string;
      vQuoteBalance: BigNumber;
      collateralDeposits: IClearingHouseStructures.CollateralDepositViewStructOutput[];
      tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
    }
  >;

  getAccountMarketValueAndRequiredMargin(
    accountId: BigNumberish,
    isInitialMargin: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      marketValue: BigNumber;
      requiredMargin: BigNumber;
    }
  >;

  getAccountNetProfit(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountNetTokenPosition(
    accountId: BigNumberish,
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralInfo(
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IClearingHouseStructures.CollateralStructOutput>;

  getPoolInfo(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IClearingHouseStructures.PoolStructOutput>;

  getProtocolInfo(overrides?: CallOverrides): Promise<
    [
      string,
      string,
      IClearingHouseStructures.LiquidationParamsStructOutput,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      settlementToken: string;
      vQuote: string;
      liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
      minRequiredMargin: BigNumber;
      removeLimitOrderFee: BigNumber;
      minimumOrderNotional: BigNumber;
    }
  >;

  getTwapPrices(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      realPriceX128: BigNumber;
      virtualPriceX128: BigNumber;
    }
  >;

  governance(overrides?: CallOverrides): Promise<string>;

  insuranceFund(overrides?: CallOverrides): Promise<string>;

  isPoolIdAvailable(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidateLiquidityPositions(
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateTokenPosition(
    targetAccountId: BigNumberish,
    poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicallWithSingleMarginCheck(
    accountId: BigNumberish,
    operations: IClearingHouseStructures.MulticallOperationStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    allPoolIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  rageTradeFactoryAddress(overrides?: CallOverrides): Promise<string>;

  registerPool(
    poolInfo: IClearingHouseStructures.PoolStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLimitOrder(
    accountId: BigNumberish,
    poolId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToken(
    accountId: BigNumberish,
    poolId: BigNumberish,
    swapParams: IClearingHouseStructures.SwapParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  teamMultisig(overrides?: CallOverrides): Promise<string>;

  transferGovernance(
    newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTeamMultisig(
    newTeamMultisig: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    allPoolIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollateralSettings(
    cToken: string,
    collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMargin(
    accountId: BigNumberish,
    collateralId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolSettings(
    poolId: BigNumberish,
    newSettings: IClearingHouseStructures.PoolSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProfit(
    accountId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolSettings(
    _liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
    _removeLimitOrderFee: BigNumberish,
    _minimumOrderNotional: BigNumberish,
    _minRequiredMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRangeOrder(
    accountId: BigNumberish,
    poolId: BigNumberish,
    liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFee(
    wrapperAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __initialize_ClearingHouse(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vQuote: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createAccount(overrides?: CallOverrides): Promise<BigNumber>;

    createAccountAndAddMargin(
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        IClearingHouseStructures.CollateralDepositViewStructOutput[],
        IClearingHouseStructures.VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vQuoteBalance: BigNumber;
        collateralDeposits: IClearingHouseStructures.CollateralDepositViewStructOutput[];
        tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
      }
    >;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        marketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.CollateralStructOutput>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.PoolStructOutput>;

    getProtocolInfo(overrides?: CallOverrides): Promise<
      [
        string,
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        settlementToken: string;
        vQuote: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    getTwapPrices(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<string>;

    insuranceFund(overrides?: CallOverrides): Promise<string>;

    isPoolIdAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateTokenPosition(
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    multicallWithSingleMarginCheck(
      accountId: BigNumberish,
      operations: IClearingHouseStructures.MulticallOperationStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    pause(allPoolIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<string>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vQuoteAmountOut: BigNumber;
      }
    >;

    teamMultisig(overrides?: CallOverrides): Promise<string>;

    transferGovernance(
      newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(
      allPoolIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMargin(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProtocolSettings(
      _liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vQuoteAmountOut: BigNumber;
      }
    >;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AccountCreated(address,uint256)'(
      ownerAddress?: string | null,
      accountId?: null
    ): AccountCreatedEventFilter;
    AccountCreated(
      ownerAddress?: string | null,
      accountId?: null
    ): AccountCreatedEventFilter;

    'CollateralSettingsUpdated(address,tuple)'(
      cToken?: null,
      cTokenInfo?: null
    ): CollateralSettingsUpdatedEventFilter;
    CollateralSettingsUpdated(
      cToken?: null,
      cTokenInfo?: null
    ): CollateralSettingsUpdatedEventFilter;

    'GovernanceTransferred(address,address)'(
      previousGovernance?: string | null,
      newGovernance?: string | null
    ): GovernanceTransferredEventFilter;
    GovernanceTransferred(
      previousGovernance?: string | null,
      newGovernance?: string | null
    ): GovernanceTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'PausedUpdated(bool)'(paused?: null): PausedUpdatedEventFilter;
    PausedUpdated(paused?: null): PausedUpdatedEventFilter;

    'PoolSettingsUpdated(uint32,tuple)'(
      poolId?: null,
      settings?: null
    ): PoolSettingsUpdatedEventFilter;
    PoolSettingsUpdated(
      poolId?: null,
      settings?: null
    ): PoolSettingsUpdatedEventFilter;

    'ProtocolSettingsUpdated(tuple,uint256,uint256,uint256)'(
      liquidationParams?: null,
      removeLimitOrderFee?: null,
      minimumOrderNotional?: null,
      minRequiredMargin?: null
    ): ProtocolSettingsUpdatedEventFilter;
    ProtocolSettingsUpdated(
      liquidationParams?: null,
      removeLimitOrderFee?: null,
      minimumOrderNotional?: null,
      minRequiredMargin?: null
    ): ProtocolSettingsUpdatedEventFilter;

    'TeamMultisigTransferred(address,address)'(
      previousTeamMultisig?: string | null,
      newTeamMultisig?: string | null
    ): TeamMultisigTransferredEventFilter;
    TeamMultisigTransferred(
      previousTeamMultisig?: string | null,
      newTeamMultisig?: string | null
    ): TeamMultisigTransferredEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'LiquidityChanged(uint256,uint32,int24,int24,int128,uint8,int256,int256)'(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      tickLower?: null,
      tickUpper?: null,
      liquidityDelta?: null,
      limitOrderType?: null,
      vTokenAmountOut?: null,
      vQuoteAmountOut?: null
    ): LiquidityChangedEventFilter;
    LiquidityChanged(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      tickLower?: null,
      tickUpper?: null,
      liquidityDelta?: null,
      limitOrderType?: null,
      vTokenAmountOut?: null,
      vQuoteAmountOut?: null
    ): LiquidityChangedEventFilter;

    'LiquidityPositionEarningsRealized(uint256,uint32,int24,int24,int256)'(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      tickLower?: null,
      tickUpper?: null,
      amount?: null
    ): LiquidityPositionEarningsRealizedEventFilter;
    LiquidityPositionEarningsRealized(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      tickLower?: null,
      tickUpper?: null,
      amount?: null
    ): LiquidityPositionEarningsRealizedEventFilter;

    'LiquidityPositionFundingPaymentRealized(uint256,uint32,int24,int24,int256,int256,int256,int256,uint256)'(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      tickLower?: null,
      tickUpper?: null,
      amount?: null,
      sumALastX128?: null,
      sumBInsideLastX128?: null,
      sumFpInsideLastX128?: null,
      sumFeeInsideLastX128?: null
    ): LiquidityPositionFundingPaymentRealizedEventFilter;
    LiquidityPositionFundingPaymentRealized(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      tickLower?: null,
      tickUpper?: null,
      amount?: null,
      sumALastX128?: null,
      sumBInsideLastX128?: null,
      sumFpInsideLastX128?: null,
      sumFeeInsideLastX128?: null
    ): LiquidityPositionFundingPaymentRealizedEventFilter;

    'LiquidityPositionsLiquidated(uint256,address,int256,int256,int256,int256)'(
      accountId?: BigNumberish | null,
      keeperAddress?: string | null,
      liquidationFee?: null,
      keeperFee?: null,
      insuranceFundFee?: null,
      accountMarketValueFinal?: null
    ): LiquidityPositionsLiquidatedEventFilter;
    LiquidityPositionsLiquidated(
      accountId?: BigNumberish | null,
      keeperAddress?: string | null,
      liquidationFee?: null,
      keeperFee?: null,
      insuranceFundFee?: null,
      accountMarketValueFinal?: null
    ): LiquidityPositionsLiquidatedEventFilter;

    'MarginUpdated(uint256,uint32,int256)'(
      accountId?: BigNumberish | null,
      collateralId?: BigNumberish | null,
      amount?: null
    ): MarginUpdatedEventFilter;
    MarginUpdated(
      accountId?: BigNumberish | null,
      collateralId?: BigNumberish | null,
      amount?: null
    ): MarginUpdatedEventFilter;

    'ProfitUpdated(uint256,int256)'(
      accountId?: BigNumberish | null,
      amount?: null
    ): ProfitUpdatedEventFilter;
    ProfitUpdated(
      accountId?: BigNumberish | null,
      amount?: null
    ): ProfitUpdatedEventFilter;

    'ProtocolFeesWithdrawn(address,uint256)'(
      wrapperAddress?: string | null,
      feeAmount?: null
    ): ProtocolFeesWithdrawnEventFilter;
    ProtocolFeesWithdrawn(
      wrapperAddress?: string | null,
      feeAmount?: null
    ): ProtocolFeesWithdrawnEventFilter;

    'TokenPositionChanged(uint256,uint32,int256,int256,uint160,uint160)'(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      vTokenAmountOut?: null,
      vQuoteAmountOut?: null,
      sqrtPriceX96Start?: null,
      sqrtPriceX96End?: null
    ): TokenPositionChangedEventFilter;
    TokenPositionChanged(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      vTokenAmountOut?: null,
      vQuoteAmountOut?: null,
      sqrtPriceX96Start?: null,
      sqrtPriceX96End?: null
    ): TokenPositionChangedEventFilter;

    'TokenPositionChangedDueToLiquidityChanged(uint256,uint32,int24,int24,int256)'(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      tickLower?: null,
      tickUpper?: null,
      vTokenAmountOut?: null
    ): TokenPositionChangedDueToLiquidityChangedEventFilter;
    TokenPositionChangedDueToLiquidityChanged(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      tickLower?: null,
      tickUpper?: null,
      vTokenAmountOut?: null
    ): TokenPositionChangedDueToLiquidityChangedEventFilter;

    'TokenPositionFundingPaymentRealized(uint256,uint32,int256,int256)'(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      amount?: null,
      sumALastX128?: null
    ): TokenPositionFundingPaymentRealizedEventFilter;
    TokenPositionFundingPaymentRealized(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      amount?: null,
      sumALastX128?: null
    ): TokenPositionFundingPaymentRealizedEventFilter;

    'TokenPositionLiquidated(uint256,uint256,uint32,int256,int256,int256)'(
      accountId?: BigNumberish | null,
      liquidatorAccountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      keeperFee?: null,
      insuranceFundFee?: null,
      accountMarketValueFinal?: null
    ): TokenPositionLiquidatedEventFilter;
    TokenPositionLiquidated(
      accountId?: BigNumberish | null,
      liquidatorAccountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      keeperFee?: null,
      insuranceFundFee?: null,
      accountMarketValueFinal?: null
    ): TokenPositionLiquidatedEventFilter;

    'FundingPaymentStateUpdated(tuple,uint256,uint256)'(
      fundingPayment?: null,
      realPriceX128?: null,
      virtualPriceX128?: null
    ): FundingPaymentStateUpdatedEventFilter;
    FundingPaymentStateUpdated(
      fundingPayment?: null,
      realPriceX128?: null,
      virtualPriceX128?: null
    ): FundingPaymentStateUpdatedEventFilter;
  };

  estimateGas: {
    __initialize_ClearingHouse(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vQuote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccountAndAddMargin(
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getTwapPrices(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    isPoolIdAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateTokenPosition(
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicallWithSingleMarginCheck(
      accountId: BigNumberish,
      operations: IClearingHouseStructures.MulticallOperationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      allPoolIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    teamMultisig(overrides?: CallOverrides): Promise<BigNumber>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      allPoolIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMargin(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProtocolSettings(
      _liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __initialize_ClearingHouse(
      _rageTradeFactoryAddress: string,
      _defaultCollateralToken: string,
      _defaultCollateralTokenOracle: string,
      _insuranceFund: string,
      _vQuote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccountAndAddMargin(
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTwapPrices(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPoolIdAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTokenPosition(
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicallWithSingleMarginCheck(
      accountId: BigNumberish,
      operations: IClearingHouseStructures.MulticallOperationStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numAccounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      allPoolIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rageTradeFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      allPoolIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMargin(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolSettings(
      _liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
