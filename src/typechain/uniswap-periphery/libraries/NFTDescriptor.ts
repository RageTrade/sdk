/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../common';

export declare namespace NFTDescriptor {
  export type ConstructTokenURIParamsStruct = {
    tokenId: BigNumberish;
    quoteTokenAddress: AddressLike;
    baseTokenAddress: AddressLike;
    quoteTokenSymbol: string;
    baseTokenSymbol: string;
    quoteTokenDecimals: BigNumberish;
    baseTokenDecimals: BigNumberish;
    flipRatio: boolean;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    tickCurrent: BigNumberish;
    tickSpacing: BigNumberish;
    fee: BigNumberish;
    poolAddress: AddressLike;
  };

  export type ConstructTokenURIParamsStructOutput = [
    tokenId: bigint,
    quoteTokenAddress: string,
    baseTokenAddress: string,
    quoteTokenSymbol: string,
    baseTokenSymbol: string,
    quoteTokenDecimals: bigint,
    baseTokenDecimals: bigint,
    flipRatio: boolean,
    tickLower: bigint,
    tickUpper: bigint,
    tickCurrent: bigint,
    tickSpacing: bigint,
    fee: bigint,
    poolAddress: string
  ] & {
    tokenId: bigint;
    quoteTokenAddress: string;
    baseTokenAddress: string;
    quoteTokenSymbol: string;
    baseTokenSymbol: string;
    quoteTokenDecimals: bigint;
    baseTokenDecimals: bigint;
    flipRatio: boolean;
    tickLower: bigint;
    tickUpper: bigint;
    tickCurrent: bigint;
    tickSpacing: bigint;
    fee: bigint;
    poolAddress: string;
  };
}

export interface NFTDescriptorInterface extends Interface {
  getFunction(nameOrSignature: 'constructTokenURI'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'constructTokenURI',
    values: [NFTDescriptor.ConstructTokenURIParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: 'constructTokenURI',
    data: BytesLike
  ): Result;
}

export interface NFTDescriptor extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: NFTDescriptorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  constructTokenURI: TypedContractMethod<
    [params: NFTDescriptor.ConstructTokenURIParamsStruct],
    [string],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: 'constructTokenURI'
  ): TypedContractMethod<
    [params: NFTDescriptor.ConstructTokenURIParamsStruct],
    [string],
    'view'
  >;

  filters: {};
}
