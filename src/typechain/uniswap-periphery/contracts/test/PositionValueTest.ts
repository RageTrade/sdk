/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common';

export interface PositionValueTestInterface extends utils.Interface {
  functions: {
    'fees(address,uint256)': FunctionFragment;
    'feesGas(address,uint256)': FunctionFragment;
    'principal(address,uint256,uint160)': FunctionFragment;
    'principalGas(address,uint256,uint160)': FunctionFragment;
    'total(address,uint256,uint160)': FunctionFragment;
    'totalGas(address,uint256,uint160)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'fees'
      | 'feesGas'
      | 'principal'
      | 'principalGas'
      | 'total'
      | 'totalGas'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'fees',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'feesGas',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'principal',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'principalGas',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'total',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalGas',
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'fees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feesGas', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'principal', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'principalGas',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'total', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalGas', data: BytesLike): Result;

  events: {};
}

export interface PositionValueTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionValueTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fees(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    feesGas(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    principal(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    principalGas(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    total(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    totalGas(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  fees(
    nft: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >;

  feesGas(
    nft: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  principal(
    nft: string,
    tokenId: BigNumberish,
    sqrtRatioX96: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >;

  principalGas(
    nft: string,
    tokenId: BigNumberish,
    sqrtRatioX96: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  total(
    nft: string,
    tokenId: BigNumberish,
    sqrtRatioX96: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >;

  totalGas(
    nft: string,
    tokenId: BigNumberish,
    sqrtRatioX96: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    fees(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    feesGas(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    principal(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    principalGas(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    total(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    totalGas(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    fees(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feesGas(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    principal(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    principalGas(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    total(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalGas(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fees(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feesGas(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    principal(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    principalGas(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    total(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalGas(
      nft: string,
      tokenId: BigNumberish,
      sqrtRatioX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
