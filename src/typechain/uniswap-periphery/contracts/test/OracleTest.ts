/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common';

export declare namespace OracleLibrary {
  export type WeightedTickDataStruct = {
    tick: BigNumberish;
    weight: BigNumberish;
  };

  export type WeightedTickDataStructOutput = [number, BigNumber] & {
    tick: number;
    weight: BigNumber;
  };
}

export interface OracleTestInterface extends utils.Interface {
  functions: {
    'consult(address,uint32)': FunctionFragment;
    'getBlockStartingTickAndLiquidity(address)': FunctionFragment;
    'getGasCostOfConsult(address,uint32)': FunctionFragment;
    'getGasCostOfGetQuoteAtTick(int24,uint128,address,address)': FunctionFragment;
    'getOldestObservationSecondsAgo(address)': FunctionFragment;
    'getQuoteAtTick(int24,uint128,address,address)': FunctionFragment;
    'getWeightedArithmeticMeanTick((int24,uint128)[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'consult'
      | 'getBlockStartingTickAndLiquidity'
      | 'getGasCostOfConsult'
      | 'getGasCostOfGetQuoteAtTick'
      | 'getOldestObservationSecondsAgo'
      | 'getQuoteAtTick'
      | 'getWeightedArithmeticMeanTick'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'consult',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getBlockStartingTickAndLiquidity',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getGasCostOfConsult',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getGasCostOfGetQuoteAtTick',
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getOldestObservationSecondsAgo',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getQuoteAtTick',
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getWeightedArithmeticMeanTick',
    values: [OracleLibrary.WeightedTickDataStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: 'consult', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getBlockStartingTickAndLiquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getGasCostOfConsult',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getGasCostOfGetQuoteAtTick',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOldestObservationSecondsAgo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getQuoteAtTick',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getWeightedArithmeticMeanTick',
    data: BytesLike
  ): Result;

  events: {};
}

export interface OracleTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    consult(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & {
        arithmeticMeanTick: number;
        harmonicMeanLiquidity: BigNumber;
      }
    >;

    getBlockStartingTickAndLiquidity(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    getGasCostOfConsult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGasCostOfGetQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOldestObservationSecondsAgo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { secondsAgo: number; currentTimestamp: number }
    >;

    getQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteAmount: BigNumber }>;

    getWeightedArithmeticMeanTick(
      observations: OracleLibrary.WeightedTickDataStruct[],
      overrides?: CallOverrides
    ): Promise<[number] & { arithmeticMeanWeightedTick: number }>;
  };

  consult(
    pool: string,
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber] & {
      arithmeticMeanTick: number;
      harmonicMeanLiquidity: BigNumber;
    }
  >;

  getBlockStartingTickAndLiquidity(
    pool: string,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber]>;

  getGasCostOfConsult(
    pool: string,
    period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGasCostOfGetQuoteAtTick(
    tick: BigNumberish,
    baseAmount: BigNumberish,
    baseToken: string,
    quoteToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOldestObservationSecondsAgo(
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number] & { secondsAgo: number; currentTimestamp: number }
  >;

  getQuoteAtTick(
    tick: BigNumberish,
    baseAmount: BigNumberish,
    baseToken: string,
    quoteToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWeightedArithmeticMeanTick(
    observations: OracleLibrary.WeightedTickDataStruct[],
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    consult(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & {
        arithmeticMeanTick: number;
        harmonicMeanLiquidity: BigNumber;
      }
    >;

    getBlockStartingTickAndLiquidity(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber]>;

    getGasCostOfConsult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfGetQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOldestObservationSecondsAgo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { secondsAgo: number; currentTimestamp: number }
    >;

    getQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeightedArithmeticMeanTick(
      observations: OracleLibrary.WeightedTickDataStruct[],
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    consult(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockStartingTickAndLiquidity(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfConsult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfGetQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOldestObservationSecondsAgo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeightedArithmeticMeanTick(
      observations: OracleLibrary.WeightedTickDataStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    consult(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockStartingTickAndLiquidity(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfConsult(
      pool: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfGetQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOldestObservationSecondsAgo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteAtTick(
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: string,
      quoteToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeightedArithmeticMeanTick(
      observations: OracleLibrary.WeightedTickDataStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
