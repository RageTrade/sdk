/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export interface SignedFullMathTestInterface extends ethers.utils.Interface {
  functions: {
    'mulDiv(uint256,uint256,uint256)': FunctionFragment;
    'mulDivRoundingDown(int256,uint256,uint256)': FunctionFragment;
    'mulDivRoundingUp(uint256,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'mulDiv',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'mulDivRoundingDown',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'mulDivRoundingUp',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'mulDiv', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'mulDivRoundingDown',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mulDivRoundingUp',
    data: BytesLike
  ): Result;

  events: {};
}

export interface SignedFullMathTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignedFullMathTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'mulDiv(uint256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    'mulDiv(int256,int256,int256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    'mulDiv(int256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    'mulDivRoundingDown(int256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    'mulDivRoundingDown(int256,int256,int256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    mulDivRoundingUp(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;
  };

  'mulDiv(uint256,uint256,uint256)'(
    a: BigNumberish,
    b: BigNumberish,
    denominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'mulDiv(int256,int256,int256)'(
    a: BigNumberish,
    b: BigNumberish,
    denominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'mulDiv(int256,uint256,uint256)'(
    a: BigNumberish,
    b: BigNumberish,
    denominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'mulDivRoundingDown(int256,uint256,uint256)'(
    a: BigNumberish,
    b: BigNumberish,
    denominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'mulDivRoundingDown(int256,int256,int256)'(
    a: BigNumberish,
    b: BigNumberish,
    denominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mulDivRoundingUp(
    a: BigNumberish,
    b: BigNumberish,
    denominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    'mulDiv(uint256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'mulDiv(int256,int256,int256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'mulDiv(int256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'mulDivRoundingDown(int256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'mulDivRoundingDown(int256,int256,int256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulDivRoundingUp(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    'mulDiv(uint256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'mulDiv(int256,int256,int256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'mulDiv(int256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'mulDivRoundingDown(int256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'mulDivRoundingDown(int256,int256,int256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulDivRoundingUp(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    'mulDiv(uint256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'mulDiv(int256,int256,int256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'mulDiv(int256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'mulDivRoundingDown(int256,uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'mulDivRoundingDown(int256,int256,int256)'(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulDivRoundingUp(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
