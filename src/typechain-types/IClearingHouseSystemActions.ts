/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export type PoolSettingsStruct = {
  initialMarginRatio: BigNumberish;
  maintainanceMarginRatio: BigNumberish;
  twapDuration: BigNumberish;
  supported: boolean;
  isCrossMargined: boolean;
  oracle: string;
};

export type PoolSettingsStructOutput = [
  number,
  number,
  number,
  boolean,
  boolean,
  string
] & {
  initialMarginRatio: number;
  maintainanceMarginRatio: number;
  twapDuration: number;
  supported: boolean;
  isCrossMargined: boolean;
  oracle: string;
};

export type PoolStruct = {
  vToken: string;
  vPool: string;
  vPoolWrapper: string;
  settings: PoolSettingsStruct;
};

export type PoolStructOutput = [
  string,
  string,
  string,
  PoolSettingsStructOutput
] & {
  vToken: string;
  vPool: string;
  vPoolWrapper: string;
  settings: PoolSettingsStructOutput;
};

export interface IClearingHouseSystemActionsInterface
  extends ethers.utils.Interface {
  functions: {
    '__initialize_ClearingHouse(address,address,address,address,address,address)': FunctionFragment;
    'registerPool((address,address,address,(uint16,uint16,uint32,bool,bool,address)))': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: '__initialize_ClearingHouse',
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [PoolStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: '__initialize_ClearingHouse',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IClearingHouseSystemActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClearingHouseSystemActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __initialize_ClearingHouse(
      rageTradeFactoryAddress: string,
      defaultCollateralToken: string,
      defaultCollateralTokenOracle: string,
      insuranceFund: string,
      vBase: string,
      nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerPool(
      poolInfo: PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __initialize_ClearingHouse(
    rageTradeFactoryAddress: string,
    defaultCollateralToken: string,
    defaultCollateralTokenOracle: string,
    insuranceFund: string,
    vBase: string,
    nativeOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerPool(
    poolInfo: PoolStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __initialize_ClearingHouse(
      rageTradeFactoryAddress: string,
      defaultCollateralToken: string,
      defaultCollateralTokenOracle: string,
      insuranceFund: string,
      vBase: string,
      nativeOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPool(
      poolInfo: PoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    __initialize_ClearingHouse(
      rageTradeFactoryAddress: string,
      defaultCollateralToken: string,
      defaultCollateralTokenOracle: string,
      insuranceFund: string,
      vBase: string,
      nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerPool(
      poolInfo: PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __initialize_ClearingHouse(
      rageTradeFactoryAddress: string,
      defaultCollateralToken: string,
      defaultCollateralTokenOracle: string,
      insuranceFund: string,
      vBase: string,
      nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerPool(
      poolInfo: PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
