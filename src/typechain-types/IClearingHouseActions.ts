/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace IClearingHouseStructures {
  export type BalanceAdjustmentsStruct = {
    vQuoteIncrease: BigNumberish;
    vTokenIncrease: BigNumberish;
    traderPositionIncrease: BigNumberish;
  };

  export type BalanceAdjustmentsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    vQuoteIncrease: BigNumber;
    vTokenIncrease: BigNumber;
    traderPositionIncrease: BigNumber;
  };

  export type SwapParamsStruct = {
    amount: BigNumberish;
    sqrtPriceLimit: BigNumberish;
    isNotional: boolean;
    isPartialAllowed: boolean;
  };

  export type SwapParamsStructOutput = [
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    amount: BigNumber;
    sqrtPriceLimit: BigNumber;
    isNotional: boolean;
    isPartialAllowed: boolean;
  };

  export type LiquidityChangeParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
    sqrtPriceCurrent: BigNumberish;
    slippageToleranceBps: BigNumberish;
    closeTokenPosition: boolean;
    limitOrderType: BigNumberish;
  };

  export type LiquidityChangeParamsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    number,
    boolean,
    number
  ] & {
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
    sqrtPriceCurrent: BigNumber;
    slippageToleranceBps: number;
    closeTokenPosition: boolean;
    limitOrderType: number;
  };
}

export interface IClearingHouseActionsInterface extends utils.Interface {
  contractName: 'IClearingHouseActions';
  functions: {
    'addMargin(uint256,uint32,uint256)': FunctionFragment;
    'createAccount()': FunctionFragment;
    'createAccountAndAddMargin(uint32,uint256)': FunctionFragment;
    'liquidateLiquidityPositions(uint256)': FunctionFragment;
    'liquidateLiquidityPositionsWithGasClaim(uint256,uint256)': FunctionFragment;
    'liquidateTokenPosition(uint256,uint256,uint32,uint16)': FunctionFragment;
    'liquidateTokenPositionWithGasClaim(uint256,uint256,uint32,uint16,uint256)': FunctionFragment;
    'removeLimitOrder(uint256,uint32,int24,int24)': FunctionFragment;
    'removeLimitOrderWithGasClaim(uint256,uint32,int24,int24,uint256)': FunctionFragment;
    'removeMargin(uint256,uint32,uint256)': FunctionFragment;
    'swapToken(uint256,uint32,(int256,uint160,bool,bool))': FunctionFragment;
    'updateProfit(uint256,int256)': FunctionFragment;
    'updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8))': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'addMargin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccount',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccountAndAddMargin',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositions',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositionsWithGasClaim',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPosition',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPositionWithGasClaim',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrder',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrderWithGasClaim',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeMargin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapToken',
    values: [
      BigNumberish,
      BigNumberish,
      IClearingHouseStructures.SwapParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProfit',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRangeOrder',
    values: [
      BigNumberish,
      BigNumberish,
      IClearingHouseStructures.LiquidityChangeParamsStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'addMargin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'createAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createAccountAndAddMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositionsWithGasClaim',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPositionWithGasClaim',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrderWithGasClaim',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRangeOrder',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IClearingHouseActions extends BaseContract {
  contractName: 'IClearingHouseActions';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClearingHouseActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMargin(
      accountId: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccountAndAddMargin(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateLiquidityPositionsWithGasClaim(
      accountId: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateTokenPosition(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateTokenPositionWithGasClaim(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLimitOrderWithGasClaim(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMargin(
      accountId: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMargin(
    accountId: BigNumberish,
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccountAndAddMargin(
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateLiquidityPositions(
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateLiquidityPositionsWithGasClaim(
    accountId: BigNumberish,
    gasComputationUnitsClaim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateTokenPosition(
    liquidatorAccountId: BigNumberish,
    targetAccountId: BigNumberish,
    poolId: BigNumberish,
    liquidationBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateTokenPositionWithGasClaim(
    liquidatorAccountId: BigNumberish,
    targetAccountId: BigNumberish,
    poolId: BigNumberish,
    liquidationBps: BigNumberish,
    gasComputationUnitsClaim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLimitOrder(
    accountId: BigNumberish,
    poolId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLimitOrderWithGasClaim(
    accountId: BigNumberish,
    poolId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    gasComputationUnitsClaim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMargin(
    accountId: BigNumberish,
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToken(
    accountId: BigNumberish,
    poolId: BigNumberish,
    swapParams: IClearingHouseStructures.SwapParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProfit(
    accountId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRangeOrder(
    accountId: BigNumberish,
    poolId: BigNumberish,
    liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMargin(
      accountId: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAccount(overrides?: CallOverrides): Promise<BigNumber>;

    createAccountAndAddMargin(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateLiquidityPositionsWithGasClaim(
      accountId: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateTokenPosition(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.BalanceAdjustmentsStructOutput>;

    liquidateTokenPositionWithGasClaim(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.BalanceAdjustmentsStructOutput>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLimitOrderWithGasClaim(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMargin(
      accountId: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vQuoteAmountOut: BigNumber;
      }
    >;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vQuoteAmountOut: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    addMargin(
      accountId: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccountAndAddMargin(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateLiquidityPositionsWithGasClaim(
      accountId: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateTokenPosition(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateTokenPositionWithGasClaim(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLimitOrderWithGasClaim(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMargin(
      accountId: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMargin(
      accountId: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccountAndAddMargin(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPositionsWithGasClaim(
      accountId: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTokenPosition(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTokenPositionWithGasClaim(
      liquidatorAccountId: BigNumberish,
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      liquidationBps: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLimitOrderWithGasClaim(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      gasComputationUnitsClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMargin(
      accountId: BigNumberish,
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
