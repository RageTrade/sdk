/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface ChainlinkOracleInterface extends utils.Interface {
  contractName: 'ChainlinkOracle';
  functions: {
    'aggregator()': FunctionFragment;
    'getTwapPriceX128(uint32)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'aggregator',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getTwapPriceX128',
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'aggregator', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getTwapPriceX128',
    data: BytesLike
  ): Result;

  events: {};
}

export interface ChainlinkOracle extends BaseContract {
  contractName: 'ChainlinkOracle';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainlinkOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregator(overrides?: CallOverrides): Promise<[string]>;

    getTwapPriceX128(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceX128: BigNumber }>;
  };

  aggregator(overrides?: CallOverrides): Promise<string>;

  getTwapPriceX128(
    twapDuration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    aggregator(overrides?: CallOverrides): Promise<string>;

    getTwapPriceX128(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    aggregator(overrides?: CallOverrides): Promise<BigNumber>;

    getTwapPriceX128(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTwapPriceX128(
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
