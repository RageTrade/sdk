/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export interface AddressHelperInterface extends ethers.utils.Interface {
  functions: {
    'eq(IERC20,IERC20)': FunctionFragment;
    'isZero(address)': FunctionFragment;
    'truncate(IERC20)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'eq', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'isZero', values: [string]): string;
  encodeFunctionData(functionFragment: 'truncate', values: [string]): string;

  decodeFunctionResult(functionFragment: 'eq', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isZero', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'truncate', data: BytesLike): Result;

  events: {};
}

export interface AddressHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AddressHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'eq(IERC20,IERC20)'(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    'eq(address,address)'(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    'isZero(address)'(a: string, overrides?: CallOverrides): Promise<[boolean]>;

    'isZero(IERC20)'(a: string, overrides?: CallOverrides): Promise<[boolean]>;

    'truncate(IERC20)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[number] & { truncated: number }>;

    'truncate(address)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[number] & { truncated: number }>;
  };

  'eq(IERC20,IERC20)'(
    a: string,
    b: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  'eq(address,address)'(
    a: string,
    b: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  'isZero(address)'(a: string, overrides?: CallOverrides): Promise<boolean>;

  'isZero(IERC20)'(a: string, overrides?: CallOverrides): Promise<boolean>;

  'truncate(IERC20)'(addr: string, overrides?: CallOverrides): Promise<number>;

  'truncate(address)'(addr: string, overrides?: CallOverrides): Promise<number>;

  callStatic: {
    'eq(IERC20,IERC20)'(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'eq(address,address)'(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'isZero(address)'(a: string, overrides?: CallOverrides): Promise<boolean>;

    'isZero(IERC20)'(a: string, overrides?: CallOverrides): Promise<boolean>;

    'truncate(IERC20)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<number>;

    'truncate(address)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    'eq(IERC20,IERC20)'(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'eq(address,address)'(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'isZero(address)'(a: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isZero(IERC20)'(a: string, overrides?: CallOverrides): Promise<BigNumber>;

    'truncate(IERC20)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'truncate(address)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    'eq(IERC20,IERC20)'(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'eq(address,address)'(
      a: string,
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'isZero(address)'(
      a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'isZero(IERC20)'(
      a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'truncate(IERC20)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'truncate(address)'(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
