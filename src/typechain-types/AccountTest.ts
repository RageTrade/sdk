/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace IClearingHouseStructures {
  export type LiquidityChangeParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
    sqrtPriceCurrent: BigNumberish;
    slippageToleranceBps: BigNumberish;
    closeTokenPosition: boolean;
    limitOrderType: BigNumberish;
  };

  export type LiquidityChangeParamsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    number,
    boolean,
    number
  ] & {
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
    sqrtPriceCurrent: BigNumber;
    slippageToleranceBps: number;
    closeTokenPosition: boolean;
    limitOrderType: number;
  };

  export type LiquidationParamsStruct = {
    rangeLiquidationFeeFraction: BigNumberish;
    tokenLiquidationFeeFraction: BigNumberish;
    closeFactorMMThresholdBps: BigNumberish;
    partialLiquidationCloseFactorBps: BigNumberish;
    insuranceFundFeeShareBps: BigNumberish;
    liquidationSlippageSqrtToleranceBps: BigNumberish;
    maxRangeLiquidationFees: BigNumberish;
    minNotionalLiquidatable: BigNumberish;
  };

  export type LiquidationParamsStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    rangeLiquidationFeeFraction: number;
    tokenLiquidationFeeFraction: number;
    closeFactorMMThresholdBps: number;
    partialLiquidationCloseFactorBps: number;
    insuranceFundFeeShareBps: number;
    liquidationSlippageSqrtToleranceBps: number;
    maxRangeLiquidationFees: BigNumber;
    minNotionalLiquidatable: BigNumber;
  };

  export type PoolSettingsStruct = {
    initialMarginRatioBps: BigNumberish;
    maintainanceMarginRatioBps: BigNumberish;
    maxVirtualPriceDeviationRatioBps: BigNumberish;
    twapDuration: BigNumberish;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type PoolSettingsStructOutput = [
    number,
    number,
    number,
    number,
    boolean,
    boolean,
    string
  ] & {
    initialMarginRatioBps: number;
    maintainanceMarginRatioBps: number;
    maxVirtualPriceDeviationRatioBps: number;
    twapDuration: number;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type PoolStruct = {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStruct;
  };

  export type PoolStructOutput = [
    string,
    string,
    string,
    IClearingHouseStructures.PoolSettingsStructOutput
  ] & {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  };
}

export interface AccountTestInterface extends utils.Interface {
  contractName: 'AccountTest';
  functions: {
    'addMargin(uint256,address,uint256)': FunctionFragment;
    'cleanDeposits(uint256)': FunctionFragment;
    'cleanPositions(uint256)': FunctionFragment;
    'createAccount()': FunctionFragment;
    'fixFee()': FunctionFragment;
    'getAccountDepositBalance(uint256,address)': FunctionFragment;
    'getAccountLiquidityPositionDetails(uint256,address,uint8)': FunctionFragment;
    'getAccountLiquidityPositionNum(uint256,address)': FunctionFragment;
    'getAccountProfit(uint256)': FunctionFragment;
    'getAccountQuoteBalance(uint256)': FunctionFragment;
    'getAccountTokenDetails(uint256,address)': FunctionFragment;
    'getAccountValueAndRequiredMargin(uint256,bool)': FunctionFragment;
    'initCollateral(address,address,uint32)': FunctionFragment;
    'initToken(address)': FunctionFragment;
    'liquidateLiquidityPositions(uint256)': FunctionFragment;
    'liquidateTokenPosition(uint256,address)': FunctionFragment;
    'liquidityChange(uint256,address,(int24,int24,int128,uint160,uint16,bool,uint8))': FunctionFragment;
    'numAccounts()': FunctionFragment;
    'protocol()': FunctionFragment;
    'registerPool((address,address,address,(uint16,uint16,uint16,uint32,bool,bool,address)))': FunctionFragment;
    'removeLimitOrder(uint256,address,int24,int24,uint256)': FunctionFragment;
    'removeMargin(uint256,address,uint256)': FunctionFragment;
    'setAccountStorage((uint16,uint16,uint16,uint16,uint16,uint16,uint64,uint64),uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'setVQuoteAddress(address)': FunctionFragment;
    'swapTokenAmount(uint256,address,int256)': FunctionFragment;
    'swapTokenNotional(uint256,address,int256)': FunctionFragment;
    'updateProfit(uint256,int256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'addMargin',
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'cleanDeposits',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'cleanPositions',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccount',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'fixFee', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAccountDepositBalance',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountLiquidityPositionDetails',
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountLiquidityPositionNum',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountProfit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountQuoteBalance',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountTokenDetails',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountValueAndRequiredMargin',
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'initCollateral',
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'initToken', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositions',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPosition',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidityChange',
    values: [
      BigNumberish,
      string,
      IClearingHouseStructures.LiquidityChangeParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'numAccounts',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'protocol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [IClearingHouseStructures.PoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrder',
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeMargin',
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setAccountStorage',
    values: [
      IClearingHouseStructures.LiquidationParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setVQuoteAddress',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokenAmount',
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokenNotional',
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProfit',
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'addMargin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'cleanDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cleanPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'fixFee', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountDepositBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountLiquidityPositionDetails',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountLiquidityPositionNum',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountQuoteBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountTokenDetails',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountValueAndRequiredMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initCollateral',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidityChange',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'numAccounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'protocol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAccountStorage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setVQuoteAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapTokenAmount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapTokenNotional',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProfit',
    data: BytesLike
  ): Result;

  events: {};
}

export interface AccountTest extends BaseContract {
  contractName: 'AccountTest';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccountTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMargin(
      accountId: BigNumberish,
      realTokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cleanDeposits(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cleanPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fixFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountDepositBalance(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountLiquidityPositionDetails(
      accountId: BigNumberish,
      vToken: string,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tickLower: number;
        tickUpper: number;
        limitOrderType: number;
        liquidity: BigNumber;
        vTokenAmountIn: BigNumber;
        sumALastX128: BigNumber;
        sumBInsideLastX128: BigNumber;
        sumFpInsideLastX128: BigNumber;
        sumFeeInsideLastX128: BigNumber;
      }
    >;

    getAccountLiquidityPositionNum(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<[number] & { num: number }>;

    getAccountProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { profit: BigNumber }>;

    getAccountQuoteBalance(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getAccountTokenDetails(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        netTraderPosition: BigNumber;
        sumALast: BigNumber;
      }
    >;

    getAccountValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    initCollateral(
      cToken: string,
      oracle: string,
      twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initToken(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateTokenPosition(
      accountId: BigNumberish,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityChange(
      accountId: BigNumberish,
      vToken: string,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numAccounts(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocol(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        settlementToken: string;
        vQuote: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLimitOrder(
      accountId: BigNumberish,
      vToken: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      removeLimitOrderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMargin(
      accountId: BigNumberish,
      realTokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAccountStorage(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      minRequiredMargin: BigNumberish,
      removeLimitOrderFee: BigNumberish,
      minimumOrderNotional: BigNumberish,
      fixFee_: BigNumberish,
      settlementToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVQuoteAddress(
      _vQuote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokenAmount(
      accountId: BigNumberish,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokenNotional(
      accountId: BigNumberish,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMargin(
    accountId: BigNumberish,
    realTokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cleanDeposits(
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cleanPositions(
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fixFee(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountDepositBalance(
    accountId: BigNumberish,
    vToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountLiquidityPositionDetails(
    accountId: BigNumberish,
    vToken: string,
    num: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      tickLower: number;
      tickUpper: number;
      limitOrderType: number;
      liquidity: BigNumber;
      vTokenAmountIn: BigNumber;
      sumALastX128: BigNumber;
      sumBInsideLastX128: BigNumber;
      sumFpInsideLastX128: BigNumber;
      sumFeeInsideLastX128: BigNumber;
    }
  >;

  getAccountLiquidityPositionNum(
    accountId: BigNumberish,
    vToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getAccountProfit(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountQuoteBalance(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountTokenDetails(
    accountId: BigNumberish,
    vToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      netTraderPosition: BigNumber;
      sumALast: BigNumber;
    }
  >;

  getAccountValueAndRequiredMargin(
    accountId: BigNumberish,
    isInitialMargin: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      accountMarketValue: BigNumber;
      requiredMargin: BigNumber;
    }
  >;

  initCollateral(
    cToken: string,
    oracle: string,
    twapDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initToken(
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateLiquidityPositions(
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateTokenPosition(
    accountId: BigNumberish,
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityChange(
    accountId: BigNumberish,
    vToken: string,
    liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

  protocol(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      IClearingHouseStructures.LiquidationParamsStructOutput,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      settlementToken: string;
      vQuote: string;
      liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
      minRequiredMargin: BigNumber;
      removeLimitOrderFee: BigNumber;
      minimumOrderNotional: BigNumber;
    }
  >;

  registerPool(
    poolInfo: IClearingHouseStructures.PoolStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLimitOrder(
    accountId: BigNumberish,
    vToken: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    removeLimitOrderFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMargin(
    accountId: BigNumberish,
    realTokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAccountStorage(
    liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
    minRequiredMargin: BigNumberish,
    removeLimitOrderFee: BigNumberish,
    minimumOrderNotional: BigNumberish,
    fixFee_: BigNumberish,
    settlementToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVQuoteAddress(
    _vQuote: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokenAmount(
    accountId: BigNumberish,
    vToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokenNotional(
    accountId: BigNumberish,
    vToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProfit(
    accountId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMargin(
      accountId: BigNumberish,
      realTokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cleanDeposits(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cleanPositions(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAccount(overrides?: CallOverrides): Promise<void>;

    fixFee(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDepositBalance(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountLiquidityPositionDetails(
      accountId: BigNumberish,
      vToken: string,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tickLower: number;
        tickUpper: number;
        limitOrderType: number;
        liquidity: BigNumber;
        vTokenAmountIn: BigNumber;
        sumALastX128: BigNumber;
        sumBInsideLastX128: BigNumber;
        sumFpInsideLastX128: BigNumber;
        sumFeeInsideLastX128: BigNumber;
      }
    >;

    getAccountLiquidityPositionNum(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getAccountProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountQuoteBalance(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountTokenDetails(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        netTraderPosition: BigNumber;
        sumALast: BigNumber;
      }
    >;

    getAccountValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    initCollateral(
      cToken: string,
      oracle: string,
      twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initToken(vToken: string, overrides?: CallOverrides): Promise<void>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        keeperFee: BigNumber;
        insuranceFundFee: BigNumber;
      }
    >;

    liquidateTokenPosition(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityChange(
      accountId: BigNumberish,
      vToken: string,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    protocol(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        settlementToken: string;
        vQuote: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLimitOrder(
      accountId: BigNumberish,
      vToken: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      removeLimitOrderFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMargin(
      accountId: BigNumberish,
      realTokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountStorage(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      minRequiredMargin: BigNumberish,
      removeLimitOrderFee: BigNumberish,
      minimumOrderNotional: BigNumberish,
      fixFee_: BigNumberish,
      settlementToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVQuoteAddress(_vQuote: string, overrides?: CallOverrides): Promise<void>;

    swapTokenAmount(
      accountId: BigNumberish,
      vToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokenNotional(
      accountId: BigNumberish,
      vToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addMargin(
      accountId: BigNumberish,
      realTokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cleanDeposits(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cleanPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fixFee(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDepositBalance(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountLiquidityPositionDetails(
      accountId: BigNumberish,
      vToken: string,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountLiquidityPositionNum(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountQuoteBalance(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountTokenDetails(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initCollateral(
      cToken: string,
      oracle: string,
      twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initToken(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateTokenPosition(
      accountId: BigNumberish,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityChange(
      accountId: BigNumberish,
      vToken: string,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    protocol(overrides?: CallOverrides): Promise<BigNumber>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLimitOrder(
      accountId: BigNumberish,
      vToken: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      removeLimitOrderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMargin(
      accountId: BigNumberish,
      realTokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAccountStorage(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      minRequiredMargin: BigNumberish,
      removeLimitOrderFee: BigNumberish,
      minimumOrderNotional: BigNumberish,
      fixFee_: BigNumberish,
      settlementToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVQuoteAddress(
      _vQuote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokenAmount(
      accountId: BigNumberish,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokenNotional(
      accountId: BigNumberish,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMargin(
      accountId: BigNumberish,
      realTokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cleanDeposits(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cleanPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fixFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountDepositBalance(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountLiquidityPositionDetails(
      accountId: BigNumberish,
      vToken: string,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountLiquidityPositionNum(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountQuoteBalance(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountTokenDetails(
      accountId: BigNumberish,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initCollateral(
      cToken: string,
      oracle: string,
      twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initToken(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTokenPosition(
      accountId: BigNumberish,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityChange(
      accountId: BigNumberish,
      vToken: string,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numAccounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLimitOrder(
      accountId: BigNumberish,
      vToken: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      removeLimitOrderFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMargin(
      accountId: BigNumberish,
      realTokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAccountStorage(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      minRequiredMargin: BigNumberish,
      removeLimitOrderFee: BigNumberish,
      minimumOrderNotional: BigNumberish,
      fixFee_: BigNumberish,
      settlementToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVQuoteAddress(
      _vQuote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokenAmount(
      accountId: BigNumberish,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokenNotional(
      accountId: BigNumberish,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
