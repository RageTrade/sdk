/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export type InitializeVPoolWrapperParamsStruct = {
  clearingHouse: string;
  vToken: string;
  vBase: string;
  vPool: string;
  liquidityFeePips: BigNumberish;
  protocolFeePips: BigNumberish;
  UNISWAP_V3_DEFAULT_FEE_TIER: BigNumberish;
};

export type InitializeVPoolWrapperParamsStructOutput = [
  string,
  string,
  string,
  string,
  number,
  number,
  number
] & {
  clearingHouse: string;
  vToken: string;
  vBase: string;
  vPool: string;
  liquidityFeePips: number;
  protocolFeePips: number;
  UNISWAP_V3_DEFAULT_FEE_TIER: number;
};

export type WrapperValuesInsideStruct = {
  sumAX128: BigNumberish;
  sumBInsideX128: BigNumberish;
  sumFpInsideX128: BigNumberish;
  sumFeeInsideX128: BigNumberish;
};

export type WrapperValuesInsideStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  sumAX128: BigNumber;
  sumBInsideX128: BigNumber;
  sumFpInsideX128: BigNumber;
  sumFeeInsideX128: BigNumber;
};

export interface VPoolWrapperMockInterface extends ethers.utils.Interface {
  functions: {
    '__VPoolWrapper_init((address,address,address,address,uint24,uint24,uint24))': FunctionFragment;
    'collectAccruedProtocolFee()': FunctionFragment;
    'getExtrapolatedSumAX128()': FunctionFragment;
    'getExtrapolatedValuesInside(int24,int24)': FunctionFragment;
    'getSumAX128()': FunctionFragment;
    'getValuesInside(int24,int24)': FunctionFragment;
    'liquidityChange(int24,int24,int128)': FunctionFragment;
    'liquidityFeePips()': FunctionFragment;
    'protocolFeePips()': FunctionFragment;
    'setLiquidityRates(int24,int24,uint256,uint256)': FunctionFragment;
    'setVPool(address)': FunctionFragment;
    'setValuesInside(int24,int24,int256,int256,int256,uint256)': FunctionFragment;
    'swapToken(int256,uint160,bool)': FunctionFragment;
    'swapTokenAmount(int256)': FunctionFragment;
    'swapTokenNotional(int256)': FunctionFragment;
    'uniswapFeePips()': FunctionFragment;
    'updateGlobalFundingState()': FunctionFragment;
    'vPool()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: '__VPoolWrapper_init',
    values: [InitializeVPoolWrapperParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'collectAccruedProtocolFee',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getExtrapolatedSumAX128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getExtrapolatedValuesInside',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSumAX128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getValuesInside',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidityChange',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidityFeePips',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolFeePips',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setLiquidityRates',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'setVPool', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setValuesInside',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapToken',
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokenAmount',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokenNotional',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'uniswapFeePips',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'updateGlobalFundingState',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'vPool', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: '__VPoolWrapper_init',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'collectAccruedProtocolFee',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getExtrapolatedSumAX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getExtrapolatedValuesInside',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSumAX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getValuesInside',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidityChange',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidityFeePips',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolFeePips',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setLiquidityRates',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setVPool', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setValuesInside',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'swapTokenAmount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapTokenNotional',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'uniswapFeePips',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateGlobalFundingState',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'vPool', data: BytesLike): Result;

  events: {
    'Swap(int256,int256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
}

export type SwapEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    vTokenIn: BigNumber;
    vBaseIn: BigNumber;
    liquidityFees: BigNumber;
    protocolFees: BigNumber;
  }
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface VPoolWrapperMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VPoolWrapperMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __VPoolWrapper_init(
      params: InitializeVPoolWrapperParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectAccruedProtocolFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accruedProtocolFeeLast: BigNumber }>;

    getExtrapolatedSumAX128(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExtrapolatedValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [WrapperValuesInsideStructOutput] & {
        wrapperValuesInside: WrapperValuesInsideStructOutput;
      }
    >;

    getSumAX128(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [WrapperValuesInsideStructOutput] & {
        wrapperValuesInside: WrapperValuesInsideStructOutput;
      }
    >;

    liquidityChange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityFeePips(overrides?: CallOverrides): Promise<[number]>;

    protocolFeePips(overrides?: CallOverrides): Promise<[number]>;

    setLiquidityRates(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      vBasePerLiquidity: BigNumberish,
      vTokenPerLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVPool(
      vPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      sumAX128: BigNumberish,
      sumBInsideX128: BigNumberish,
      sumFpInsideX128: BigNumberish,
      sumFeeInsideX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToken(
      amount: BigNumberish,
      arg1: BigNumberish,
      isNotional: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmount: BigNumber;
        vBaseAmount: BigNumber;
      }
    >;

    swapTokenAmount(
      vTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapTokenNotional(
      vTokenNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uniswapFeePips(overrides?: CallOverrides): Promise<[number]>;

    updateGlobalFundingState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vPool(overrides?: CallOverrides): Promise<[string]>;
  };

  __VPoolWrapper_init(
    params: InitializeVPoolWrapperParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectAccruedProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  getExtrapolatedSumAX128(overrides?: CallOverrides): Promise<BigNumber>;

  getExtrapolatedValuesInside(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<WrapperValuesInsideStructOutput>;

  getSumAX128(overrides?: CallOverrides): Promise<BigNumber>;

  getValuesInside(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<WrapperValuesInsideStructOutput>;

  liquidityChange(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityFeePips(overrides?: CallOverrides): Promise<number>;

  protocolFeePips(overrides?: CallOverrides): Promise<number>;

  setLiquidityRates(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    vBasePerLiquidity: BigNumberish,
    vTokenPerLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVPool(
    vPoolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValuesInside(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    sumAX128: BigNumberish,
    sumBInsideX128: BigNumberish,
    sumFpInsideX128: BigNumberish,
    sumFeeInsideX128: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToken(
    amount: BigNumberish,
    arg1: BigNumberish,
    isNotional: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { vTokenAmount: BigNumber; vBaseAmount: BigNumber }
  >;

  swapTokenAmount(
    vTokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapTokenNotional(
    vTokenNotional: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uniswapFeePips(overrides?: CallOverrides): Promise<number>;

  updateGlobalFundingState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vPool(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __VPoolWrapper_init(
      params: InitializeVPoolWrapperParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    collectAccruedProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    getExtrapolatedSumAX128(overrides?: CallOverrides): Promise<BigNumber>;

    getExtrapolatedValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<WrapperValuesInsideStructOutput>;

    getSumAX128(overrides?: CallOverrides): Promise<BigNumber>;

    getValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<WrapperValuesInsideStructOutput>;

    liquidityChange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, WrapperValuesInsideStructOutput] & {
        vBaseAmount: BigNumber;
        vTokenAmount: BigNumber;
        wrapperValuesInside: WrapperValuesInsideStructOutput;
      }
    >;

    liquidityFeePips(overrides?: CallOverrides): Promise<number>;

    protocolFeePips(overrides?: CallOverrides): Promise<number>;

    setLiquidityRates(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      vBasePerLiquidity: BigNumberish,
      vTokenPerLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVPool(vPoolAddress: string, overrides?: CallOverrides): Promise<void>;

    setValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      sumAX128: BigNumberish,
      sumBInsideX128: BigNumberish,
      sumFpInsideX128: BigNumberish,
      sumFeeInsideX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToken(
      amount: BigNumberish,
      arg1: BigNumberish,
      isNotional: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmount: BigNumber;
        vBaseAmount: BigNumber;
      }
    >;

    swapTokenAmount(
      vTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokenNotional(
      vTokenNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapFeePips(overrides?: CallOverrides): Promise<number>;

    updateGlobalFundingState(overrides?: CallOverrides): Promise<void>;

    vPool(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Swap(int256,int256,uint256,uint256)'(
      vTokenIn?: null,
      vBaseIn?: null,
      liquidityFees?: null,
      protocolFees?: null
    ): SwapEventFilter;
    Swap(
      vTokenIn?: null,
      vBaseIn?: null,
      liquidityFees?: null,
      protocolFees?: null
    ): SwapEventFilter;
  };

  estimateGas: {
    __VPoolWrapper_init(
      params: InitializeVPoolWrapperParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectAccruedProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    getExtrapolatedSumAX128(overrides?: CallOverrides): Promise<BigNumber>;

    getExtrapolatedValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSumAX128(overrides?: CallOverrides): Promise<BigNumber>;

    getValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityChange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityFeePips(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeePips(overrides?: CallOverrides): Promise<BigNumber>;

    setLiquidityRates(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      vBasePerLiquidity: BigNumberish,
      vTokenPerLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVPool(
      vPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      sumAX128: BigNumberish,
      sumBInsideX128: BigNumberish,
      sumFpInsideX128: BigNumberish,
      sumFeeInsideX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToken(
      amount: BigNumberish,
      arg1: BigNumberish,
      isNotional: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokenAmount(
      vTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokenNotional(
      vTokenNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapFeePips(overrides?: CallOverrides): Promise<BigNumber>;

    updateGlobalFundingState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vPool(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __VPoolWrapper_init(
      params: InitializeVPoolWrapperParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectAccruedProtocolFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExtrapolatedSumAX128(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExtrapolatedValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSumAX128(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityChange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityFeePips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeePips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLiquidityRates(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      vBasePerLiquidity: BigNumberish,
      vTokenPerLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVPool(
      vPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValuesInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      sumAX128: BigNumberish,
      sumBInsideX128: BigNumberish,
      sumFpInsideX128: BigNumberish,
      sumFeeInsideX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToken(
      amount: BigNumberish,
      arg1: BigNumberish,
      isNotional: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapTokenAmount(
      vTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapTokenNotional(
      vTokenNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapFeePips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateGlobalFundingState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
