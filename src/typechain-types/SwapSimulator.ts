/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export type SwapValuesStruct = {
  amountSpecified: BigNumberish;
  vTokenIn: BigNumberish;
  vBaseIn: BigNumberish;
  liquidityFees: BigNumberish;
  protocolFees: BigNumberish;
};

export type SwapValuesStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  amountSpecified: BigNumber;
  vTokenIn: BigNumber;
  vBaseIn: BigNumber;
  liquidityFees: BigNumber;
  protocolFees: BigNumber;
};

export type SwapCacheStruct = {
  sqrtPriceX96Start: BigNumberish;
  tickStart: BigNumberish;
  feeProtocol: BigNumberish;
  liquidityStart: BigNumberish;
  tickSpacing: BigNumberish;
  fee: BigNumberish;
};

export type SwapCacheStructOutput = [
  BigNumber,
  number,
  number,
  BigNumber,
  number,
  number
] & {
  sqrtPriceX96Start: BigNumber;
  tickStart: number;
  feeProtocol: number;
  liquidityStart: BigNumber;
  tickSpacing: number;
  fee: number;
};

export type SwapStateStruct = {
  amountSpecifiedRemaining: BigNumberish;
  amountCalculated: BigNumberish;
  sqrtPriceX96: BigNumberish;
  tick: BigNumberish;
  feeGrowthGlobalIncreaseX128: BigNumberish;
  protocolFee: BigNumberish;
  liquidity: BigNumberish;
};

export type SwapStateStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  amountSpecifiedRemaining: BigNumber;
  amountCalculated: BigNumber;
  sqrtPriceX96: BigNumber;
  tick: number;
  feeGrowthGlobalIncreaseX128: BigNumber;
  protocolFee: BigNumber;
  liquidity: BigNumber;
};

export type StepComputationsStruct = {
  sqrtPriceStartX96: BigNumberish;
  tickNext: BigNumberish;
  initialized: boolean;
  sqrtPriceNextX96: BigNumberish;
  amountIn: BigNumberish;
  amountOut: BigNumberish;
  feeAmount: BigNumberish;
};

export type StepComputationsStructOutput = [
  BigNumber,
  number,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  sqrtPriceStartX96: BigNumber;
  tickNext: number;
  initialized: boolean;
  sqrtPriceNextX96: BigNumber;
  amountIn: BigNumber;
  amountOut: BigNumber;
  feeAmount: BigNumber;
};

export type SwapStepStruct = {
  state: SwapStateStruct;
  step: StepComputationsStruct;
};

export type SwapStepStructOutput = [
  SwapStateStructOutput,
  StepComputationsStructOutput
] & { state: SwapStateStructOutput; step: StepComputationsStructOutput };

export interface SwapSimulatorInterface extends ethers.utils.Interface {
  functions: {
    'simulateSwap(address,uint32,int256,uint160,bool)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'simulateSwap',
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: 'simulateSwap',
    data: BytesLike
  ): Result;

  events: {};
}

export interface SwapSimulator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapSimulatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    simulateSwap(
      clearingHouse: string,
      poolId: BigNumberish,
      amount: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      isNotional: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  simulateSwap(
    clearingHouse: string,
    poolId: BigNumberish,
    amount: BigNumberish,
    sqrtPriceLimitX96: BigNumberish,
    isNotional: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    simulateSwap(
      clearingHouse: string,
      poolId: BigNumberish,
      amount: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      isNotional: boolean,
      overrides?: CallOverrides
    ): Promise<
      [
        SwapValuesStructOutput,
        BigNumber,
        SwapCacheStructOutput,
        SwapStepStructOutput[]
      ] & {
        swapValues: SwapValuesStructOutput;
        sqrtPriceX96End: BigNumber;
        cache: SwapCacheStructOutput;
        steps: SwapStepStructOutput[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    simulateSwap(
      clearingHouse: string,
      poolId: BigNumberish,
      amount: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      isNotional: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    simulateSwap(
      clearingHouse: string,
      poolId: BigNumberish,
      amount: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      isNotional: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
