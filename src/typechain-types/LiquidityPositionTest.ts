/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export type LiquidationParamsStruct = {
  liquidationFeeFraction: BigNumberish;
  tokenLiquidationPriceDeltaBps: BigNumberish;
  insuranceFundFeeShareBps: BigNumberish;
};

export type LiquidationParamsStructOutput = [number, number, number] & {
  liquidationFeeFraction: number;
  tokenLiquidationPriceDeltaBps: number;
  insuranceFundFeeShareBps: number;
};

export type RageTradePoolSettingsStruct = {
  initialMarginRatio: BigNumberish;
  maintainanceMarginRatio: BigNumberish;
  twapDuration: BigNumberish;
  supported: boolean;
  isCrossMargined: boolean;
  oracle: string;
};

export type RageTradePoolSettingsStructOutput = [
  number,
  number,
  number,
  boolean,
  boolean,
  string
] & {
  initialMarginRatio: number;
  maintainanceMarginRatio: number;
  twapDuration: number;
  supported: boolean;
  isCrossMargined: boolean;
  oracle: string;
};

export type RageTradePoolStruct = {
  vPool: string;
  vPoolWrapper: string;
  settings: RageTradePoolSettingsStruct;
};

export type RageTradePoolStructOutput = [
  string,
  string,
  RageTradePoolSettingsStructOutput
] & {
  vPool: string;
  vPoolWrapper: string;
  settings: RageTradePoolSettingsStructOutput;
};

export interface LiquidityPositionTestInterface extends ethers.utils.Interface {
  functions: {
    'balanceAdjustments()': FunctionFragment;
    'baseValue(uint160)': FunctionFragment;
    'fixFee()': FunctionFragment;
    'initialize(int24,int24)': FunctionFragment;
    'liquidityChange(int128)': FunctionFragment;
    'lp()': FunctionFragment;
    'maxNetPosition()': FunctionFragment;
    'netPosition()': FunctionFragment;
    'protocol()': FunctionFragment;
    'registerPool(address,(address,address,(uint16,uint16,uint32,bool,bool,address)))': FunctionFragment;
    'setAccountStorage((uint16,uint16,uint16),uint256,uint256,uint256,uint256)': FunctionFragment;
    'setVBaseAddress(address)': FunctionFragment;
    'updateCheckpoints()': FunctionFragment;
    'wrapper()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'balanceAdjustments',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'baseValue',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'fixFee', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidityChange',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'lp', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'maxNetPosition',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'netPosition',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'protocol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [string, RageTradePoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'setAccountStorage',
    values: [
      LiquidationParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setVBaseAddress',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateCheckpoints',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'wrapper', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'balanceAdjustments',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'baseValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fixFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'liquidityChange',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'lp', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxNetPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'netPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'protocol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAccountStorage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setVBaseAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateCheckpoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'wrapper', data: BytesLike): Result;

  events: {};
}

export interface LiquidityPositionTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityPositionTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceAdjustments(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        vBaseIncrease: BigNumber;
        vTokenIncrease: BigNumber;
        traderPositionIncrease: BigNumber;
      }
    >;

    baseValue(
      sqrtPriceCurrent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fixFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityChange(
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lp(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        limitOrderType: number;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        vTokenAmountIn: BigNumber;
        sumALastX128: BigNumber;
        sumBInsideLastX128: BigNumber;
        sumFpInsideLastX128: BigNumber;
        sumFeeInsideLastX128: BigNumber;
      }
    >;

    maxNetPosition(overrides?: CallOverrides): Promise<[BigNumber]>;

    netPosition(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocol(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        rBase: string;
        liquidationParams: LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAccountStorage(
      _liquidationParams: LiquidationParamsStruct,
      _minRequiredMargin: BigNumberish,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _fixFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVBaseAddress(
      _vBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCheckpoints(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapper(overrides?: CallOverrides): Promise<[string]>;
  };

  balanceAdjustments(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      vBaseIncrease: BigNumber;
      vTokenIncrease: BigNumber;
      traderPositionIncrease: BigNumber;
    }
  >;

  baseValue(
    sqrtPriceCurrent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fixFee(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityChange(
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lp(
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      limitOrderType: number;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
      vTokenAmountIn: BigNumber;
      sumALastX128: BigNumber;
      sumBInsideLastX128: BigNumber;
      sumFpInsideLastX128: BigNumber;
      sumFeeInsideLastX128: BigNumber;
    }
  >;

  maxNetPosition(overrides?: CallOverrides): Promise<BigNumber>;

  netPosition(overrides?: CallOverrides): Promise<BigNumber>;

  protocol(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      LiquidationParamsStructOutput,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      vBase: string;
      rBase: string;
      liquidationParams: LiquidationParamsStructOutput;
      minRequiredMargin: BigNumber;
      removeLimitOrderFee: BigNumber;
      minimumOrderNotional: BigNumber;
    }
  >;

  registerPool(
    full: string,
    rageTradePool: RageTradePoolStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAccountStorage(
    _liquidationParams: LiquidationParamsStruct,
    _minRequiredMargin: BigNumberish,
    _removeLimitOrderFee: BigNumberish,
    _minimumOrderNotional: BigNumberish,
    _fixFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVBaseAddress(
    _vBase: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCheckpoints(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapper(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balanceAdjustments(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        vBaseIncrease: BigNumber;
        vTokenIncrease: BigNumber;
        traderPositionIncrease: BigNumber;
      }
    >;

    baseValue(
      sqrtPriceCurrent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixFee(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityChange(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lp(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        limitOrderType: number;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        vTokenAmountIn: BigNumber;
        sumALastX128: BigNumber;
        sumBInsideLastX128: BigNumber;
        sumFpInsideLastX128: BigNumber;
        sumFeeInsideLastX128: BigNumber;
      }
    >;

    maxNetPosition(overrides?: CallOverrides): Promise<BigNumber>;

    netPosition(overrides?: CallOverrides): Promise<BigNumber>;

    protocol(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        rBase: string;
        liquidationParams: LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountStorage(
      _liquidationParams: LiquidationParamsStruct,
      _minRequiredMargin: BigNumberish,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _fixFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVBaseAddress(_vBase: string, overrides?: CallOverrides): Promise<void>;

    updateCheckpoints(overrides?: CallOverrides): Promise<void>;

    wrapper(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    balanceAdjustments(overrides?: CallOverrides): Promise<BigNumber>;

    baseValue(
      sqrtPriceCurrent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixFee(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityChange(
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lp(overrides?: CallOverrides): Promise<BigNumber>;

    maxNetPosition(overrides?: CallOverrides): Promise<BigNumber>;

    netPosition(overrides?: CallOverrides): Promise<BigNumber>;

    protocol(overrides?: CallOverrides): Promise<BigNumber>;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAccountStorage(
      _liquidationParams: LiquidationParamsStruct,
      _minRequiredMargin: BigNumberish,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _fixFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVBaseAddress(
      _vBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCheckpoints(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapper(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceAdjustments(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseValue(
      sqrtPriceCurrent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityChange(
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxNetPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    netPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAccountStorage(
      _liquidationParams: LiquidationParamsStruct,
      _minRequiredMargin: BigNumberish,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _fixFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVBaseAddress(
      _vBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCheckpoints(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
