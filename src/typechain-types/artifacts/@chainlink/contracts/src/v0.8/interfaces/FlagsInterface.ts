/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../../../../../common';

export interface FlagsInterfaceInterface extends utils.Interface {
  functions: {
    'getFlag(address)': FunctionFragment;
    'getFlags(address[])': FunctionFragment;
    'lowerFlags(address[])': FunctionFragment;
    'raiseFlag(address)': FunctionFragment;
    'raiseFlags(address[])': FunctionFragment;
    'setRaisingAccessController(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getFlag'
      | 'getFlags'
      | 'lowerFlags'
      | 'raiseFlag'
      | 'raiseFlags'
      | 'setRaisingAccessController'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getFlag', values: [string]): string;
  encodeFunctionData(functionFragment: 'getFlags', values: [string[]]): string;
  encodeFunctionData(
    functionFragment: 'lowerFlags',
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: 'raiseFlag', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'raiseFlags',
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'setRaisingAccessController',
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: 'getFlag', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFlags', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lowerFlags', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'raiseFlag', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'raiseFlags', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setRaisingAccessController',
    data: BytesLike
  ): Result;

  events: {};
}

export interface FlagsInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlagsInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFlag(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getFlags(arg0: string[], overrides?: CallOverrides): Promise<[boolean[]]>;

    lowerFlags(
      arg0: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    raiseFlag(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    raiseFlags(
      arg0: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRaisingAccessController(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getFlag(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getFlags(arg0: string[], overrides?: CallOverrides): Promise<boolean[]>;

  lowerFlags(
    arg0: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  raiseFlag(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  raiseFlags(
    arg0: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRaisingAccessController(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getFlag(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getFlags(arg0: string[], overrides?: CallOverrides): Promise<boolean[]>;

    lowerFlags(arg0: string[], overrides?: CallOverrides): Promise<void>;

    raiseFlag(arg0: string, overrides?: CallOverrides): Promise<void>;

    raiseFlags(arg0: string[], overrides?: CallOverrides): Promise<void>;

    setRaisingAccessController(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getFlag(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getFlags(arg0: string[], overrides?: CallOverrides): Promise<BigNumber>;

    lowerFlags(
      arg0: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    raiseFlag(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    raiseFlags(
      arg0: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRaisingAccessController(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFlag(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlags(
      arg0: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lowerFlags(
      arg0: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    raiseFlag(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    raiseFlags(
      arg0: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRaisingAccessController(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
