/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export type LiquidationParamsStruct = {
  liquidationFeeFraction: BigNumberish;
  tokenLiquidationPriceDeltaBps: BigNumberish;
  insuranceFundFeeShareBps: BigNumberish;
};

export type LiquidationParamsStructOutput = [number, number, number] & {
  liquidationFeeFraction: number;
  tokenLiquidationPriceDeltaBps: number;
  insuranceFundFeeShareBps: number;
};

export type RageTradePoolSettingsStruct = {
  initialMarginRatio: BigNumberish;
  maintainanceMarginRatio: BigNumberish;
  twapDuration: BigNumberish;
  whitelisted: boolean;
  oracle: string;
};

export type RageTradePoolSettingsStructOutput = [
  number,
  number,
  number,
  boolean,
  string
] & {
  initialMarginRatio: number;
  maintainanceMarginRatio: number;
  twapDuration: number;
  whitelisted: boolean;
  oracle: string;
};

export type RageTradePoolStruct = {
  vPool: string;
  vPoolWrapper: string;
  settings: RageTradePoolSettingsStruct;
};

export type RageTradePoolStructOutput = [
  string,
  string,
  RageTradePoolSettingsStructOutput
] & {
  vPool: string;
  vPoolWrapper: string;
  settings: RageTradePoolSettingsStructOutput;
};

export type BalanceAdjustmentsStruct = {
  vBaseIncrease: BigNumberish;
  vTokenIncrease: BigNumberish;
  traderPositionIncrease: BigNumberish;
};

export type BalanceAdjustmentsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber
] & {
  vBaseIncrease: BigNumber;
  vTokenIncrease: BigNumber;
  traderPositionIncrease: BigNumber;
};

export interface VTokenPositionSetTestInterface extends ethers.utils.Interface {
  functions: {
    'fixFee()': FunctionFragment;
    'getIsActive(address)': FunctionFragment;
    'getPositionDetails(address)': FunctionFragment;
    'init(address)': FunctionFragment;
    'liquidateLiquidityPositions(address)': FunctionFragment;
    'liquidityChange(address,int24,int24,int128)': FunctionFragment;
    'protocol()': FunctionFragment;
    'realizeFundingPaymentToAccount(address)': FunctionFragment;
    'registerPool(address,(address,address,(uint16,uint16,uint32,bool,address)))': FunctionFragment;
    'setAccountStorage((uint16,uint16,uint16),uint256,uint256,uint256,uint256)': FunctionFragment;
    'setVBaseAddress(address)': FunctionFragment;
    'swapTokenAmount(address,int256)': FunctionFragment;
    'swapTokenNotional(address,int256)': FunctionFragment;
    'update((int256,int256,int256),address)': FunctionFragment;
    'wrapper()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'fixFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getIsActive', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getPositionDetails',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'init', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositions',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidityChange',
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'protocol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'realizeFundingPaymentToAccount',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [string, RageTradePoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'setAccountStorage',
    values: [
      LiquidationParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setVBaseAddress',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokenAmount',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapTokenNotional',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'update',
    values: [BalanceAdjustmentsStruct, string]
  ): string;
  encodeFunctionData(functionFragment: 'wrapper', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'fixFee', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getIsActive',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPositionDetails',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidityChange',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'protocol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'realizeFundingPaymentToAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAccountStorage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setVBaseAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapTokenAmount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapTokenNotional',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'update', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wrapper', data: BytesLike): Result;

  events: {};
}

export interface VTokenPositionSetTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VTokenPositionSetTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fixFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIsActive(vToken: string, overrides?: CallOverrides): Promise<[boolean]>;

    getPositionDetails(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        sumACkhpt: BigNumber;
        netTraderPosition: BigNumber;
      }
    >;

    init(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateLiquidityPositions(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityChange(
      vToken: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocol(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        liquidationParams: LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    realizeFundingPaymentToAccount(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAccountStorage(
      _liquidationParams: LiquidationParamsStruct,
      _minRequiredMargin: BigNumberish,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _fixFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVBaseAddress(
      _vBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokenAmount(
      vToken: string,
      vTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokenNotional(
      vToken: string,
      vTokenNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      balanceAdjustments: BalanceAdjustmentsStruct,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapper(overrides?: CallOverrides): Promise<[string]>;
  };

  fixFee(overrides?: CallOverrides): Promise<BigNumber>;

  getIsActive(vToken: string, overrides?: CallOverrides): Promise<boolean>;

  getPositionDetails(
    vToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      sumACkhpt: BigNumber;
      netTraderPosition: BigNumber;
    }
  >;

  init(
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateLiquidityPositions(
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityChange(
    vToken: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocol(
    overrides?: CallOverrides
  ): Promise<
    [string, LiquidationParamsStructOutput, BigNumber, BigNumber, BigNumber] & {
      vBase: string;
      liquidationParams: LiquidationParamsStructOutput;
      minRequiredMargin: BigNumber;
      removeLimitOrderFee: BigNumber;
      minimumOrderNotional: BigNumber;
    }
  >;

  realizeFundingPaymentToAccount(
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerPool(
    full: string,
    rageTradePool: RageTradePoolStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAccountStorage(
    _liquidationParams: LiquidationParamsStruct,
    _minRequiredMargin: BigNumberish,
    _removeLimitOrderFee: BigNumberish,
    _minimumOrderNotional: BigNumberish,
    _fixFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVBaseAddress(
    _vBase: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokenAmount(
    vToken: string,
    vTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokenNotional(
    vToken: string,
    vTokenNotional: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    balanceAdjustments: BalanceAdjustmentsStruct,
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapper(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    fixFee(overrides?: CallOverrides): Promise<BigNumber>;

    getIsActive(vToken: string, overrides?: CallOverrides): Promise<boolean>;

    getPositionDetails(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        sumACkhpt: BigNumber;
        netTraderPosition: BigNumber;
      }
    >;

    init(vToken: string, overrides?: CallOverrides): Promise<void>;

    liquidateLiquidityPositions(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityChange(
      vToken: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    protocol(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        liquidationParams: LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    realizeFundingPaymentToAccount(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountStorage(
      _liquidationParams: LiquidationParamsStruct,
      _minRequiredMargin: BigNumberish,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _fixFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVBaseAddress(_vBase: string, overrides?: CallOverrides): Promise<void>;

    swapTokenAmount(
      vToken: string,
      vTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokenNotional(
      vToken: string,
      vTokenNotional: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      balanceAdjustments: BalanceAdjustmentsStruct,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapper(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    fixFee(overrides?: CallOverrides): Promise<BigNumber>;

    getIsActive(vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPositionDetails(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateLiquidityPositions(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityChange(
      vToken: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocol(overrides?: CallOverrides): Promise<BigNumber>;

    realizeFundingPaymentToAccount(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAccountStorage(
      _liquidationParams: LiquidationParamsStruct,
      _minRequiredMargin: BigNumberish,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _fixFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVBaseAddress(
      _vBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokenAmount(
      vToken: string,
      vTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokenNotional(
      vToken: string,
      vTokenNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      balanceAdjustments: BalanceAdjustmentsStruct,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapper(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fixFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIsActive(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionDetails(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPositions(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityChange(
      vToken: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    realizeFundingPaymentToAccount(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAccountStorage(
      _liquidationParams: LiquidationParamsStruct,
      _minRequiredMargin: BigNumberish,
      _removeLimitOrderFee: BigNumberish,
      _minimumOrderNotional: BigNumberish,
      _fixFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVBaseAddress(
      _vBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokenAmount(
      vToken: string,
      vTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokenNotional(
      vToken: string,
      vTokenNotional: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      balanceAdjustments: BalanceAdjustmentsStruct,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
