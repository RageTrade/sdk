/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export interface OracleMockInterface extends ethers.utils.Interface {
  functions: {
    'getTwapPriceX128(uint32)': FunctionFragment;
    'getTwapSqrtPriceX96(uint32)': FunctionFragment;
    'setPriceX128(uint256)': FunctionFragment;
    'setSqrtPriceX96(uint160)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'getTwapPriceX128',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTwapSqrtPriceX96',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setPriceX128',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setSqrtPriceX96',
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'getTwapPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTwapSqrtPriceX96',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setPriceX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSqrtPriceX96',
    data: BytesLike
  ): Result;

  events: {};
}

export interface OracleMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTwapPriceX128(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTwapSqrtPriceX96(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sqrtPriceX96: BigNumber }>;

    setPriceX128(
      _priceX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSqrtPriceX96(
      _sqrtPriceX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getTwapPriceX128(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTwapSqrtPriceX96(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setPriceX128(
    _priceX128: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSqrtPriceX96(
    _sqrtPriceX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getTwapPriceX128(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTwapSqrtPriceX96(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPriceX128(
      _priceX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSqrtPriceX96(
      _sqrtPriceX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getTwapPriceX128(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTwapSqrtPriceX96(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPriceX128(
      _priceX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSqrtPriceX96(
      _sqrtPriceX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTwapPriceX128(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTwapSqrtPriceX96(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPriceX128(
      _priceX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSqrtPriceX96(
      _sqrtPriceX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
