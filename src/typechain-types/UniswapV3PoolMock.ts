/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export interface UniswapV3PoolMockInterface extends ethers.utils.Interface {
  functions: {
    'feeGrowthGlobal0X128()': FunctionFragment;
    'feeGrowthGlobal1X128()': FunctionFragment;
    'setFeeGrowth(uint256,uint256)': FunctionFragment;
    'setTick(int24,uint128,int128,uint256,uint256,int56,uint160,uint32,bool)': FunctionFragment;
    'ticks(int24)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'feeGrowthGlobal0X128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'feeGrowthGlobal1X128',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeGrowth',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setTick',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: 'ticks', values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: 'feeGrowthGlobal0X128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeGrowthGlobal1X128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFeeGrowth',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setTick', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ticks', data: BytesLike): Result;

  events: {};
}

export interface UniswapV3PoolMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapV3PoolMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeeGrowth(
      _feeGrowthGlobal0X128: BigNumberish,
      _feeGrowthGlobal1X128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTick(
      tick: BigNumberish,
      liquidityGross: BigNumberish,
      liquidityNet: BigNumberish,
      feeGrowthOutside0X128: BigNumberish,
      feeGrowthOutside1X128: BigNumberish,
      tickCumulativeOutside: BigNumberish,
      secondsPerLiquidityOutsideX128: BigNumberish,
      secondsOutside: BigNumberish,
      initialized: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        feeGrowthOutside0X128: BigNumber;
        feeGrowthOutside1X128: BigNumber;
        tickCumulativeOutside: BigNumber;
        secondsPerLiquidityOutsideX128: BigNumber;
        secondsOutside: number;
        initialized: boolean;
      }
    >;
  };

  feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;

  feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;

  setFeeGrowth(
    _feeGrowthGlobal0X128: BigNumberish,
    _feeGrowthGlobal1X128: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTick(
    tick: BigNumberish,
    liquidityGross: BigNumberish,
    liquidityNet: BigNumberish,
    feeGrowthOutside0X128: BigNumberish,
    feeGrowthOutside1X128: BigNumberish,
    tickCumulativeOutside: BigNumberish,
    secondsPerLiquidityOutsideX128: BigNumberish,
    secondsOutside: BigNumberish,
    initialized: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ticks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
      feeGrowthOutside0X128: BigNumber;
      feeGrowthOutside1X128: BigNumber;
      tickCumulativeOutside: BigNumber;
      secondsPerLiquidityOutsideX128: BigNumber;
      secondsOutside: number;
      initialized: boolean;
    }
  >;

  callStatic: {
    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeGrowth(
      _feeGrowthGlobal0X128: BigNumberish,
      _feeGrowthGlobal1X128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTick(
      tick: BigNumberish,
      liquidityGross: BigNumberish,
      liquidityNet: BigNumberish,
      feeGrowthOutside0X128: BigNumberish,
      feeGrowthOutside1X128: BigNumberish,
      tickCumulativeOutside: BigNumberish,
      secondsPerLiquidityOutsideX128: BigNumberish,
      secondsOutside: BigNumberish,
      initialized: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        feeGrowthOutside0X128: BigNumber;
        feeGrowthOutside1X128: BigNumber;
        tickCumulativeOutside: BigNumber;
        secondsPerLiquidityOutsideX128: BigNumber;
        secondsOutside: number;
        initialized: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeGrowth(
      _feeGrowthGlobal0X128: BigNumberish,
      _feeGrowthGlobal1X128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTick(
      tick: BigNumberish,
      liquidityGross: BigNumberish,
      liquidityNet: BigNumberish,
      feeGrowthOutside0X128: BigNumberish,
      feeGrowthOutside1X128: BigNumberish,
      tickCumulativeOutside: BigNumberish,
      secondsPerLiquidityOutsideX128: BigNumberish,
      secondsOutside: BigNumberish,
      initialized: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ticks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    feeGrowthGlobal0X128(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeGrowthGlobal1X128(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeGrowth(
      _feeGrowthGlobal0X128: BigNumberish,
      _feeGrowthGlobal1X128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTick(
      tick: BigNumberish,
      liquidityGross: BigNumberish,
      liquidityNet: BigNumberish,
      feeGrowthOutside0X128: BigNumberish,
      feeGrowthOutside1X128: BigNumberish,
      tickCumulativeOutside: BigNumberish,
      secondsPerLiquidityOutsideX128: BigNumberish,
      secondsOutside: BigNumberish,
      initialized: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
