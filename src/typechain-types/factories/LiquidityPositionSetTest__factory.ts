/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  LiquidityPositionSetTest,
  LiquidityPositionSetTestInterface,
} from '../LiquidityPositionSetTest';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'AlreadyInitialized',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'IllegalElement',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'IllegalTicks',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'NoSpaceLeftToInsert',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'createEmptyPosition',
    outputs: [
      {
        components: [
          {
            internalType: 'enum IClearingHouse.LimitOrderType',
            name: 'limitOrderType',
            type: 'uint8',
          },
          {
            internalType: 'int24',
            name: 'tickLower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'tickUpper',
            type: 'int24',
          },
          {
            internalType: 'uint128',
            name: 'liquidity',
            type: 'uint128',
          },
          {
            internalType: 'int256',
            name: 'vTokenAmountIn',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumALastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBInsideLastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpInsideLastX128',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'sumFeeInsideLastX128',
            type: 'uint256',
          },
          {
            internalType: 'uint256[100]',
            name: '_emptySlots',
            type: 'uint256[100]',
          },
        ],
        internalType: 'struct LiquidityPosition.Info',
        name: 'info',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'isPositionActive',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'wrapper',
    outputs: [
      {
        internalType: 'contract VPoolWrapperMock',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50606680546001600160a01b0319166001600160a01b039290921691909117905561006c565b61087d806107cf83390190565b6107548061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063623b4c2e14610046578063810065f21461006e578063ac210cc71461008e575b600080fd5b6100596100543660046105a4565b6100b9565b60405190151581526020015b60405180910390f35b61008161007c3660046105a4565b6100cf565b6040516100659190610638565b6066546100a1906001600160a01b031681565b6040516001600160a01b039091168152602001610065565b60006100c68184846101cd565b90505b92915050565b6100d7610506565b6100e3600084846101e4565b6040805161014081019091528154909190829060ff16600281111561010a5761010a6105d7565b600281111561011b5761011b6105d7565b81528154610100808204600290810b60208501526401000000008304810b6040808601919091526701000000000000009093046001600160801b031660608501526001850154608085015284015460a0840152600384015460c0840152600484015460e08401526005840154908301528051610c808101918290526101209092019190600684019060649082845b8154815260200190600101908083116101a957505050505081525050905092915050565b60006101da84848461026a565b90505b9392505050565b60008160020b8360020b1315610220576040516307981ccd60e01b8152600284810b600483015283900b60248201526044015b60405180910390fd5b600061022d858585610281565b65ffffffffffff8116600090815260018701602052604090209250905061025382610297565b610262576102628285856102be565b509392505050565b60006101da84601885901b62ffffff851601610316565b601882901b62ffffff8216016101dd8482610331565b8054600090610100900460020b1515806100c957505054640100000000900460020b151590565b6102c783610297565b156102e45760405162dc149f60e41b815260040160405180910390fd5b825466ffffffffffff00191661010062ffffff9384160266ffffff000000001916176401000000009190921602179055565b60006103228383610489565b60ff1660ff1415905092915050565b65ffffffffffff811661035a5760405163fda0966560e01b815260006004820152602401610217565b600560005b6005811015610417578265ffffffffffff16848260058110610383576103836106e0565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff1614156103b55750505050565b8160051480156103fc575060008482600581106103d4576103d46106e0565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16145b15610405578091505b8061040f8161070c565b91505061035f565b50806005141561044457604051636d29aed360e01b815265ffffffffffff83166004820152602401610217565b81838260058110610457576104576106e0565b600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505050565b6000805b60058160ff1610156104fc578265ffffffffffff16848260ff16600581106104b7576104b76106e0565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff1614156104ea5790506100c9565b806104f481610727565b91505061048d565b5060ff9392505050565b6040805161014081019091528060008152602001600060020b8152602001600060020b815260200160006001600160801b03168152602001600081526020016000815260200160008152602001600081526020016000815260200161056961056e565b905290565b60405180610c8001604052806064906020820280368337509192915050565b8035600281900b811461059f57600080fd5b919050565b600080604083850312156105b757600080fd5b6105c08361058d565b91506105ce6020840161058d565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6003811061060b57634e487b7160e01b600052602160045260246000fd5b9052565b8060005b6064811015610632578151845260209384019390910190600101610613565b50505050565b6000610da08201905061064c8284516105ed565b6020830151610660602084018260020b9052565b506040830151610675604084018260020b9052565b50606083015161069060608401826001600160801b03169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401516106d88285018261060f565b505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610720576107206106f6565b5060010190565b600060ff821660ff81141561073e5761073e6106f6565b6001019291505056fea164736f6c634300080a000a608060405234801561001057600080fd5b5061085d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637aba8e6811610097578063bb152c5311610066578063bb152c5314610209578063d440c42014610231578063d74dcaca14610253578063ea6e4e521461028c57600080fd5b80637aba8e68146101e557806397c71faf146101f6578063a3a1e7e9146101db578063a3c35e2c1461012057600080fd5b80634c2ebc58116100d35780634c2ebc58146101425780635e622abc146101a95780636719578c146101b05780637779815c146101db57600080fd5b80630d8f6f46146100fa5780632a99a7921461012057806333f9096314610140575b600080fd5b61010d610108366004610499565b6102bc565b6040519081526020015b60405180910390f35b61013361012e3660046104c9565b6102d1565b60405161011791906104fc565b005b610140610150366004610527565b60408051608081018252948552602080860194855285820193845260608601928352600297880b600090815280825282812097890b81529690529094209251835590516001830155519281019290925551600390910155565b600061010d565b6002546101c3906001600160a01b031681565b6040516001600160a01b039091168152602001610117565b600560821b61010d565b6101406101f336600461057c565b50565b61010d610204366004610499565b61034e565b61021c6102173660046105a9565b61035c565b60408051928352602083019190915201610117565b61024461023f3660046105f0565b6103a7565b60405161011793929190610632565b610140610261366004610676565b600293840b60009081526001602081815260408084209690970b835294909452939093209081550155565b61014061029a3660046106b8565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006102cb82610f9f196106f2565b92915050565b6102fc6040518060800160405280600081526020016000815260200160008152602001600081525090565b50600291820b60009081526020818152604080832093850b8352928152908290208251608081018452815481526001820154928101929092529283015491810191909152600390910154606082015290565b60006102cb610fa083610777565b600080821561038557610fa0610371866107b3565b61037b9190610777565b915084905061039f565b61038e856107b3565b915061039c85610fa06106f2565b90505b935093915050565b6000806103d56040518060800160405280600081526020016000815260200160008152602001600081525090565b600084600f0b13156104015783600f0b600360008282546103f691906107d0565b9091555061041c9050565b83600f0b600360008282546104169190610811565b90915550505b600286810b60009081526001602090815260408083209389900b8352929052205461044c90600f86900b906106f2565b600287810b6000908152600160208181526040808420948b900b8452939052919020015490935061048290600f86900b906106f2565b915061048e86866102d1565b905093509350939050565b6000602082840312156104ab57600080fd5b5035919050565b8035600281900b81146104c457600080fd5b919050565b600080604083850312156104dc57600080fd5b6104e5836104b2565b91506104f3602084016104b2565b90509250929050565b81518152602080830151908201526040808301519082015260608083015190820152608081016102cb565b60008060008060008060c0878903121561054057600080fd5b610549876104b2565b9550610557602088016104b2565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600060e0828403121561058e57600080fd5b50919050565b6001600160a01b03811681146101f357600080fd5b6000806000606084860312156105be57600080fd5b8335925060208401356105d081610594565b9150604084013580151581146105e557600080fd5b809150509250925092565b60008060006060848603121561060557600080fd5b61060e846104b2565b925061061c602085016104b2565b9150604084013580600f0b81146105e557600080fd5b8381526020810183905260c0810161066e6040830184805182526020810151602083015260408101516040830152606081015160608301525050565b949350505050565b6000806000806080858703121561068c57600080fd5b610695856104b2565b93506106a3602086016104b2565b93969395505050506040820135916060013590565b6000602082840312156106ca57600080fd5b81356106d581610594565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160ff1b0381841382841380821686840486111615610718576107186106dc565b600160ff1b6000871282811687830589121615610737576107376106dc565b60008712925087820587128484161615610753576107536106dc565b87850587128184161615610769576107696106dc565b505050929093029392505050565b60008261079457634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156107ae576107ae6106dc565b500590565b6000600160ff1b8214156107c9576107c96106dc565b5060000390565b600080821280156001600160ff1b03849003851316156107f2576107f26106dc565b600160ff1b839003841281161561080b5761080b6106dc565b50500190565b60008083128015600160ff1b85018412161561082f5761082f6106dc565b6001600160ff1b038401831381161561084a5761084a6106dc565b5050039056fea164736f6c634300080a000a';

type LiquidityPositionSetTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityPositionSetTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityPositionSetTest__factory extends ContractFactory {
  constructor(...args: LiquidityPositionSetTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityPositionSetTest> {
    return super.deploy(overrides || {}) as Promise<LiquidityPositionSetTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LiquidityPositionSetTest {
    return super.attach(address) as LiquidityPositionSetTest;
  }
  connect(signer: Signer): LiquidityPositionSetTest__factory {
    return super.connect(signer) as LiquidityPositionSetTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityPositionSetTestInterface {
    return new utils.Interface(_abi) as LiquidityPositionSetTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityPositionSetTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LiquidityPositionSetTest;
  }
}
