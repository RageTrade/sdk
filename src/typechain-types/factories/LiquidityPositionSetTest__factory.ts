/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  LiquidityPositionSetTest,
  LiquidityPositionSetTestInterface,
} from '../LiquidityPositionSetTest';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'LPS_IllegalTicks',
    type: 'error',
  },
  {
    inputs: [],
    name: 'LP_AlreadyInitialized',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'U48L5_IllegalElement',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'U48L5_NoSpaceLeftToInsert',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'createEmptyPosition',
    outputs: [
      {
        components: [
          {
            internalType: 'enum IClearingHouseEnums.LimitOrderType',
            name: 'limitOrderType',
            type: 'uint8',
          },
          {
            internalType: 'int24',
            name: 'tickLower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'tickUpper',
            type: 'int24',
          },
          {
            internalType: 'uint128',
            name: 'liquidity',
            type: 'uint128',
          },
          {
            internalType: 'int256',
            name: 'vTokenAmountIn',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumALastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBInsideLastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpInsideLastX128',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'sumFeeInsideLastX128',
            type: 'uint256',
          },
          {
            internalType: 'uint256[100]',
            name: '_emptySlots',
            type: 'uint256[100]',
          },
        ],
        internalType: 'struct LiquidityPosition.Info',
        name: 'info',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'isPositionActive',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'wrapper',
    outputs: [
      {
        internalType: 'contract VPoolWrapperMock',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50606680546001600160a01b0319166001600160a01b039290921691909117905561006c565b6109b7806107d883390190565b61075d8061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063623b4c2e14610046578063810065f21461006e578063ac210cc71461008e575b600080fd5b610059610054366004610584565b6100b9565b60405190151581526020015b60405180910390f35b61008161007c366004610584565b6100cf565b6040516100659190610618565b6066546100a1906001600160a01b031681565b6040516001600160a01b039091168152602001610065565b60006100c68184846101cd565b90505b92915050565b6100d76104e6565b6100e3600084846101ef565b6040805161014081019091528154909190829060ff16600281111561010a5761010a6105b7565b600281111561011b5761011b6105b7565b81528154610100808204600290810b60208501526401000000008304810b6040808601919091526701000000000000009093046001600160801b031660608501526001850154608085015284015460a0840152600384015460c0840152600484015460e08401526005840154908301528051610c808101918290526101209092019190600684019060649082845b8154815260200190600101908083116101a957505050505081525050905092915050565b60006101e78462ffffff8416601886901b60050b0161027f565b949350505050565b60008160020b8360020b131561022b57604051630345045960e51b8152600284810b600483015283900b60248201526044015b60405180910390fd5b62ffffff8216601884901b60050b016102448582610299565b65ffffffffffff8116600090815260018601602052604090209150610268826103e9565b61027757610277828585610410565b509392505050565b6000600561028d8484610469565b60ff1614159392505050565b65ffffffffffff81166102c25760405163c712b5e960e01b815260006004820152602401610222565b600560005b6005811015610377578265ffffffffffff168482600581106102eb576102eb6106c0565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16141561031d5750505050565b6000848260058110610331576103316106c0565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16141561036557809150610377565b8061036f816106ec565b9150506102c7565b5060058114156103a457604051635503aeb560e01b815265ffffffffffff83166004820152602401610222565b818382600581106103b7576103b76106c0565b600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505050565b8054600090610100900460020b1515806100c957505054640100000000900460020b151590565b610419836103e9565b156104375760405163a0bb33f960e01b815260040160405180910390fd5b825466ffffffffffff00191661010062ffffff9384160266ffffff000000001916176401000000009190921602179055565b6000805b600560ff821610156104dc578265ffffffffffff16848260ff1660058110610497576104976106c0565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff1614156104ca5790506100c9565b806104d481610707565b91505061046d565b5060059392505050565b6040805161014081019091528060008152602001600060020b8152602001600060020b815260200160006001600160801b03168152602001600081526020016000815260200160008152602001600081526020016000815260200161054961054e565b905290565b60405180610c8001604052806064906020820280368337509192915050565b8035600281900b811461057f57600080fd5b919050565b6000806040838503121561059757600080fd5b6105a08361056d565b91506105ae6020840161056d565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b600381106105eb57634e487b7160e01b600052602160045260246000fd5b9052565b8060005b60648110156106125781518452602093840193909101906001016105f3565b50505050565b6000610da08201905061062c8284516105cd565b6020830151610640602084018260020b9052565b506040830151610655604084018260020b9052565b50606083015161067060608401826001600160801b03169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401516106b8828501826105ef565b505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610700576107006106d6565b5060010190565b600060ff821660ff81141561071e5761071e6106d6565b6001019291505056fea26469706673582212205f844d8163705b32135abab50c1454c8f5d0f15b59d2bc7af88b2e0df36d5be564736f6c634300080c0033608060405234801561001057600080fd5b50610997806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80637779815c116100ad578063a3c35e2c11610071578063a3c35e2c146101b9578063d74dcaca146102ba578063dee4c1a6146102f3578063ea6e4e5214610304578063fca6fbf21461033457600080fd5b80637779815c1461027457806386c8e9a71461027e57806397c71faf14610294578063a34123a7146102a7578063a3a1e7e91461027457600080fd5b80632a99a792116100f45780632a99a792146101b957806333f90963146101d95780634c2ebc58146101db5780635e622abc146102425780636719578c1461024957600080fd5b806302dc9951146101265780630d8f6f461461014e578063195cd92c1461016f5780631dce5fcf14610197575b600080fd5b6001546101359062ffffff1681565b60405162ffffff90911681526020015b60405180910390f35b61016161015c3660046105d6565b61034d565b604051908152602001610145565b61018261017d366004610604565b610362565b60408051928352602083019190915201610145565b6101aa6101a5366004610662565b6103b4565b604051610145939291906106aa565b6101cc6101c73660046106ee565b610485565b6040516101459190610721565b005b6101d96101e936600461074c565b60408051608081018252948552602080860194855285820193845260608601928352600297880b600090815280825282812097890b81529690529094209251835590516001830155519281019290925551600390910155565b6000610161565b60035461025c906001600160a01b031681565b6040516001600160a01b039091168152602001610145565b600560821b610161565b600154610135906301000000900462ffffff1681565b6101616102a23660046105d6565b610502565b6101aa6102b5366004610662565b610510565b6101d96102c83660046107a1565b600293840b6000908152602085815260408083209590960b8252939093529290912090815560010155565b6101d96103013660046107e3565b50565b6101d96103123660046107fb565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600154610135906601000000000000900462ffffff1681565b600061035c82610f9f19610835565b92915050565b60008080841385151514156103905783915061037d826108ba565b61038990610fa0610835565b90506103ac565b610fa061039c856108ba565b6103a691906108d7565b91508390505b935093915050565b6000806103e26040518060800160405280600081526020016000815260200160008152602001600081525090565b836001600160801b0316600460008282546103fd9190610913565b9091555050600286810b6000908152602082815260408083209389900b83529290522060010154610438906001600160801b0386169061092b565b600287810b600090815260208281526040808320938a900b8352929052205490935061046e906001600160801b0386169061092b565b915061047a8686610485565b905093509350939050565b6104b06040518060800160405280600081526020016000815260200160008152602001600081525090565b50600291820b60009081526020818152604080832093850b8352928152908290208251608081018452815481526001820154928101929092529283015491810191909152600390910154606082015290565b600061035c610fa0836108d7565b60008061053e6040518060800160405280600081526020016000815260200160008152602001600081525090565b836001600160801b031660046000828254610559919061094a565b9091555050600286810b6000908152602082815260408083209389900b83529290522054610591906001600160801b0386169061092b565b600287810b600090815260208281526040808320938a900b835292905220600101549092506105ca906001600160801b0386169061092b565b925061047a8686610485565b6000602082840312156105e857600080fd5b5035919050565b6001600160a01b038116811461030157600080fd5b60008060006060848603121561061957600080fd5b8335801515811461062957600080fd5b9250602084013591506040840135610640816105ef565b809150509250925092565b8035600281900b811461065d57600080fd5b919050565b60008060006060848603121561067757600080fd5b6106808461064b565b925061068e6020850161064b565b915060408401356001600160801b038116811461064057600080fd5b8381526020810183905260c081016106e66040830184805182526020810151602083015260408101516040830152606081015160608301525050565b949350505050565b6000806040838503121561070157600080fd5b61070a8361064b565b91506107186020840161064b565b90509250929050565b815181526020808301519082015260408083015190820152606080830151908201526080810161035c565b60008060008060008060c0878903121561076557600080fd5b61076e8761064b565b955061077c6020880161064b565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600080608085870312156107b757600080fd5b6107c08561064b565b93506107ce6020860161064b565b93969395505050506040820135916060013590565b600060c082840312156107f557600080fd5b50919050565b60006020828403121561080d57600080fd5b8135610818816105ef565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160ff1b038184138284138082168684048611161561085b5761085b61081f565b600160ff1b600087128281168783058912161561087a5761087a61081f565b600087129250878205871284841616156108965761089661081f565b878505871281841616156108ac576108ac61081f565b505050929093029392505050565b6000600160ff1b8214156108d0576108d061081f565b5060000390565b6000826108f457634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561090e5761090e61081f565b500590565b600082198211156109265761092661081f565b500190565b60008160001904831182151516156109455761094561081f565b500290565b60008282101561095c5761095c61081f565b50039056fea26469706673582212208df0ed3240a429573f6125f28a8d86e61804c215c58c7aa08415d07a3da4f64264736f6c634300080c0033';

type LiquidityPositionSetTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityPositionSetTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityPositionSetTest__factory extends ContractFactory {
  constructor(...args: LiquidityPositionSetTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'LiquidityPositionSetTest';
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityPositionSetTest> {
    return super.deploy(overrides || {}) as Promise<LiquidityPositionSetTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LiquidityPositionSetTest {
    return super.attach(address) as LiquidityPositionSetTest;
  }
  connect(signer: Signer): LiquidityPositionSetTest__factory {
    return super.connect(signer) as LiquidityPositionSetTest__factory;
  }
  static readonly contractName: 'LiquidityPositionSetTest';
  public readonly contractName: 'LiquidityPositionSetTest';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityPositionSetTestInterface {
    return new utils.Interface(_abi) as LiquidityPositionSetTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityPositionSetTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LiquidityPositionSetTest;
  }
}
