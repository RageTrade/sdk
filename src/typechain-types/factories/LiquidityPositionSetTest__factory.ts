/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  LiquidityPositionSetTest,
  LiquidityPositionSetTestInterface,
} from '../LiquidityPositionSetTest';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'AlreadyInitialized',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'IllegalElement',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'IllegalTicks',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'NoSpaceLeftToInsert',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'createEmptyPosition',
    outputs: [
      {
        components: [
          {
            internalType: 'enum IClearingHouseEnums.LimitOrderType',
            name: 'limitOrderType',
            type: 'uint8',
          },
          {
            internalType: 'int24',
            name: 'tickLower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'tickUpper',
            type: 'int24',
          },
          {
            internalType: 'uint128',
            name: 'liquidity',
            type: 'uint128',
          },
          {
            internalType: 'int256',
            name: 'vTokenAmountIn',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumALastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBInsideLastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpInsideLastX128',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'sumFeeInsideLastX128',
            type: 'uint256',
          },
          {
            internalType: 'uint256[100]',
            name: '_emptySlots',
            type: 'uint256[100]',
          },
        ],
        internalType: 'struct LiquidityPosition.Info',
        name: 'info',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'isPositionActive',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'wrapper',
    outputs: [
      {
        internalType: 'contract VPoolWrapperMock',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50606680546001600160a01b0319166001600160a01b039290921691909117905561006c565b610987806107cf83390190565b6107548061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063623b4c2e14610046578063810065f21461006e578063ac210cc71461008e575b600080fd5b6100596100543660046105a4565b6100b9565b60405190151581526020015b60405180910390f35b61008161007c3660046105a4565b6100cf565b6040516100659190610638565b6066546100a1906001600160a01b031681565b6040516001600160a01b039091168152602001610065565b60006100c68184846101cd565b90505b92915050565b6100d7610506565b6100e3600084846101e4565b6040805161014081019091528154909190829060ff16600281111561010a5761010a6105d7565b600281111561011b5761011b6105d7565b81528154610100808204600290810b60208501526401000000008304810b6040808601919091526701000000000000009093046001600160801b031660608501526001850154608085015284015460a0840152600384015460c0840152600484015460e08401526005840154908301528051610c808101918290526101209092019190600684019060649082845b8154815260200190600101908083116101a957505050505081525050905092915050565b60006101da84848461026a565b90505b9392505050565b60008160020b8360020b1315610220576040516307981ccd60e01b8152600284810b600483015283900b60248201526044015b60405180910390fd5b600061022d858585610281565b65ffffffffffff8116600090815260018701602052604090209250905061025382610297565b610262576102628285856102be565b509392505050565b60006101da84601885901b62ffffff851601610316565b601882901b62ffffff8216016101dd8482610331565b8054600090610100900460020b1515806100c957505054640100000000900460020b151590565b6102c783610297565b156102e45760405162dc149f60e41b815260040160405180910390fd5b825466ffffffffffff00191661010062ffffff9384160266ffffff000000001916176401000000009190921602179055565b60006103228383610489565b60ff1660ff1415905092915050565b65ffffffffffff811661035a5760405163fda0966560e01b815260006004820152602401610217565b600560005b6005811015610417578265ffffffffffff16848260058110610383576103836106e0565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff1614156103b55750505050565b8160051480156103fc575060008482600581106103d4576103d46106e0565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16145b15610405578091505b8061040f8161070c565b91505061035f565b50806005141561044457604051636d29aed360e01b815265ffffffffffff83166004820152602401610217565b81838260058110610457576104576106e0565b600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505050565b6000805b60058160ff1610156104fc578265ffffffffffff16848260ff16600581106104b7576104b76106e0565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff1614156104ea5790506100c9565b806104f481610727565b91505061048d565b5060ff9392505050565b6040805161014081019091528060008152602001600060020b8152602001600060020b815260200160006001600160801b03168152602001600081526020016000815260200160008152602001600081526020016000815260200161056961056e565b905290565b60405180610c8001604052806064906020820280368337509192915050565b8035600281900b811461059f57600080fd5b919050565b600080604083850312156105b757600080fd5b6105c08361058d565b91506105ce6020840161058d565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6003811061060b57634e487b7160e01b600052602160045260246000fd5b9052565b8060005b6064811015610632578151845260209384019390910190600101610613565b50505050565b6000610da08201905061064c8284516105ed565b6020830151610660602084018260020b9052565b506040830151610675604084018260020b9052565b50606083015161069060608401826001600160801b03169052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401516106d88285018261060f565b505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610720576107206106f6565b5060010190565b600060ff821660ff81141561073e5761073e6106f6565b6001019291505056fea164736f6c634300080c000a608060405234801561001057600080fd5b50610967806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806386c8e9a7116100ad578063bb152c5311610071578063bb152c5314610292578063d74dcaca146102ba578063d9fe08d4146102f3578063ea6e4e5214610304578063fca6fbf21461033457600080fd5b806386c8e9a71461025657806397c71faf1461026c578063a34123a71461027f578063a3a1e7e91461024c578063a3c35e2c1461019157600080fd5b806333f90963116100f457806333f90963146101b15780634c2ebc58146101b35780635e622abc1461021a5780636719578c146102215780637779815c1461024c57600080fd5b806302dc9951146101265780630d8f6f461461014e5780631dce5fcf1461016f5780632a99a79214610191575b600080fd5b6001546101359062ffffff1681565b60405162ffffff90911681526020015b60405180910390f35b61016161015c3660046105cf565b61034d565b604051908152602001610145565b61018261017d3660046105ff565b610362565b60405161014593929190610652565b6101a461019f366004610696565b610433565b60405161014591906106c9565b005b6101b16101c13660046106f4565b60408051608081018252948552602080860194855285820193845260608601928352600297880b600090815280825282812097890b81529690529094209251835590516001830155519281019290925551600390910155565b6000610161565b600354610234906001600160a01b031681565b6040516001600160a01b039091168152602001610145565b600560821b610161565b600154610135906301000000900462ffffff1681565b61016161027a3660046105cf565b6104b0565b61018261028d3660046105ff565b6104be565b6102a56102a036600461075e565b610584565b60408051928352602083019190915201610145565b6101b16102c836600461079a565b600293840b6000908152602085815260408083209590960b8252939093529290912090815560010155565b6101b16103013660046107dc565b50565b6101b16103123660046107f4565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600154610135906601000000000000900462ffffff1681565b600061035c82610f9f1961082e565b92915050565b6000806103906040518060800160405280600081526020016000815260200160008152602001600081525090565b836001600160801b0316600460008282546103ab91906108b3565b9091555050600286810b6000908152602082815260408083209389900b835292905220600101546103e6906001600160801b038616906108cb565b600287810b600090815260208281526040808320938a900b8352929052205490935061041c906001600160801b038616906108cb565b91506104288686610433565b905093509350939050565b61045e6040518060800160405280600081526020016000815260200160008152602001600081525090565b50600291820b60009081526020818152604080832093850b8352928152908290208251608081018452815481526001820154928101929092529283015491810191909152600390910154606082015290565b600061035c610fa0836108ea565b6000806104ec6040518060800160405280600081526020016000815260200160008152602001600081525090565b836001600160801b0316600460008282546105079190610926565b9091555050600286810b6000908152602082815260408083209389900b8352929052205461053f906001600160801b038616906108cb565b600287810b600090815260208281526040808320938a900b83529290522060010154909250610578906001600160801b038616906108cb565b92506104288686610433565b60008082156105ad57610fa06105998661093d565b6105a391906108ea565b91508490506105c7565b6105b68561093d565b91506105c485610fa061082e565b90505b935093915050565b6000602082840312156105e157600080fd5b5035919050565b8035600281900b81146105fa57600080fd5b919050565b60008060006060848603121561061457600080fd5b61061d846105e8565b925061062b602085016105e8565b915060408401356001600160801b038116811461064757600080fd5b809150509250925092565b8381526020810183905260c0810161068e6040830184805182526020810151602083015260408101516040830152606081015160608301525050565b949350505050565b600080604083850312156106a957600080fd5b6106b2836105e8565b91506106c0602084016105e8565b90509250929050565b815181526020808301519082015260408083015190820152606080830151908201526080810161035c565b60008060008060008060c0878903121561070d57600080fd5b610716876105e8565b9550610724602088016105e8565b95989597505050506040840135936060810135936080820135935060a0909101359150565b6001600160a01b038116811461030157600080fd5b60008060006060848603121561077357600080fd5b83359250602084013561078581610749565b91506040840135801515811461064757600080fd5b600080600080608085870312156107b057600080fd5b6107b9856105e8565b93506107c7602086016105e8565b93969395505050506040820135916060013590565b600060e082840312156107ee57600080fd5b50919050565b60006020828403121561080657600080fd5b813561081181610749565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160ff1b038184138284138082168684048611161561085457610854610818565b600160ff1b600087128281168783058912161561087357610873610818565b6000871292508782058712848416161561088f5761088f610818565b878505871281841616156108a5576108a5610818565b505050929093029392505050565b600082198211156108c6576108c6610818565b500190565b60008160001904831182151516156108e5576108e5610818565b500290565b60008261090757634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561092157610921610818565b500590565b60008282101561093857610938610818565b500390565b6000600160ff1b82141561095357610953610818565b506000039056fea164736f6c634300080c000a';

type LiquidityPositionSetTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityPositionSetTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityPositionSetTest__factory extends ContractFactory {
  constructor(...args: LiquidityPositionSetTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityPositionSetTest> {
    return super.deploy(overrides || {}) as Promise<LiquidityPositionSetTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LiquidityPositionSetTest {
    return super.attach(address) as LiquidityPositionSetTest;
  }
  connect(signer: Signer): LiquidityPositionSetTest__factory {
    return super.connect(signer) as LiquidityPositionSetTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityPositionSetTestInterface {
    return new utils.Interface(_abi) as LiquidityPositionSetTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityPositionSetTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LiquidityPositionSetTest;
  }
}
