/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  FundingPaymentTest,
  FundingPaymentTestInterface,
} from '../FundingPaymentTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumA',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'extrapolatedSumAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumALatestX128',
        type: 'int256',
      },
    ],
    name: 'extrapolatedSumFpX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fpGlobal',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'nextAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'vTokenAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'liquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'update',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506107c7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80636c544335116100505780636c544335146100a55780637cfee5a8146100eb578063951d34f01461010057600080fd5b8063115635da1461006c5780631d14114f14610092575b600080fd5b61007f61007a366004610529565b610113565b6040519081526020015b60405180910390f35b61007f6100a0366004610577565b61012c565b6000546001546002546003546100c39392919065ffffffffffff1684565b6040805194855260208501939093529183015265ffffffffffff166060820152608001610089565b6100fe6100f93660046105b9565b610143565b005b61007f61010e3660046105e8565b610159565b60006101228686868686610167565b9695505050505050565b600061013a8585858561017f565b95945050505050565b610152600086868686866101ae565b5050505050565b600061013a858585856102bf565b60006101758585858561017f565b6101229087610649565b600061013a61018e8686610688565b65ffffffffffff16620151806101a785878282826106af565b91906102e4565b60038601546000906101ca9065ffffffffffff1685858561017f565b60018801549091506101e2908290600160801b610330565b8760020160008282546101f59190610649565b909155505086548190889060009061020e908490610649565b90915550610223905086600160801b8761037e565b8760010160008282546102369190610649565b909155505060038701805465ffffffffffff861665ffffffffffff199091168117909155604080518954815260018a0154602082015260028a01548183015260608101929092526080820185905260a08201849052517faa55fabd6f264910ebc37d1f213e504b0952aeed471eac51bb24a792cf40ce789181900360c00190a150505050505050565b60006102da6102ce86846106af565b8590600160801b61037e565b61013a9084610649565b600061031261030d600086126102fa5785610306565b610306866000196106ee565b85856103db565b61048d565b905060008412156103295761032681610775565b90505b9392505050565b600061033d84848461037e565b905060008112801561036d575061036d610356856104a3565b61035f856104a3565b610368856104a3565b6104b4565b156103295761032660001982610649565b6000600181808061038f88856104cd565b9450925061039d87856104cd565b945091506103ab86856104cd565b945090506103bd61030d8484846103db565b9450836103d0576103cd85610775565b94505b505050509392505050565b6000808060001985870985870292508281108382030391505080600003610414576000841161040957600080fd5b508290049050610329565b80841161042057600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000600160ff1b821061049f57600080fd5b5090565b60006104ae826104f7565b92915050565b60008183850980156104c557600191505b509392505050565b60008060008412156104ec579115916104e584610775565b91506104f0565b8391505b5092909150565b600080821361049f5761050982610775565b6104ae565b803565ffffffffffff8116811461052457600080fd5b919050565b600080600080600060a0868803121561054157600080fd5b853594506105516020870161050e565b935061055f6040870161050e565b94979396509394606081013594506080013592915050565b6000806000806080858703121561058d57600080fd5b6105968561050e565b93506105a46020860161050e565b93969395505050506040820135916060013590565b600080600080600060a086880312156105d157600080fd5b853594506020860135935061055f6040870161050e565b600080600080608085870312156105fe57600080fd5b5050823594602084013594506040840135936060013592509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000808212826001600160ff1b030384138115161561066a5761066a61061a565b82600160ff1b0384128116156106825761068261061a565b50500190565b600065ffffffffffff838116908316818110156106a7576106a761061a565b039392505050565b600080831283600160ff1b018312811516156106cd576106cd61061a565b836001600160ff1b030183138116156106e8576106e861061a565b50500390565b60006001600160ff1b036000841360008413858304851182821616156107165761071661061a565b600160ff1b60008712868205881281841616156107355761073561061a565b600087129250878205871284841616156107515761075161061a565b878505871281841616156107675761076761061a565b505050929093029392505050565b6000600160ff1b820361078a5761078a61061a565b506000039056fea2646970667358221220ca26b75cebcb38585b23aa860e66d054421c5c0cc01ac204ed2b5fd1c68eb35e64736f6c634300080d0033';

type FundingPaymentTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingPaymentTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundingPaymentTest__factory extends ContractFactory {
  constructor(...args: FundingPaymentTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'FundingPaymentTest';
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundingPaymentTest> {
    return super.deploy(overrides || {}) as Promise<FundingPaymentTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FundingPaymentTest {
    return super.attach(address) as FundingPaymentTest;
  }
  connect(signer: Signer): FundingPaymentTest__factory {
    return super.connect(signer) as FundingPaymentTest__factory;
  }
  static readonly contractName: 'FundingPaymentTest';
  public readonly contractName: 'FundingPaymentTest';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingPaymentTestInterface {
    return new utils.Interface(_abi) as FundingPaymentTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundingPaymentTest {
    return new Contract(address, _abi, signerOrProvider) as FundingPaymentTest;
  }
}
