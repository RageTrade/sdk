/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  FundingPaymentTest,
  FundingPaymentTestInterface,
} from '../FundingPaymentTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumA',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'extrapolatedSumAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumALatestX128',
        type: 'int256',
      },
    ],
    name: 'extrapolatedSumFpX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fpGlobal',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'nextAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'tokenAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'liquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'update',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610714806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063115635da1461005c5780631d14114f146100825780636c544335146100955780637cfee5a8146100db578063951d34f0146100f0575b600080fd5b61006f61006a3660046104b7565b610103565b6040519081526020015b60405180910390f35b61006f610090366004610505565b61011c565b6000546001546002546003546100b39392919065ffffffffffff1684565b6040805194855260208501939093529183015265ffffffffffff166060820152608001610079565b6100ee6100e9366004610547565b610133565b005b61006f6100fe366004610576565b610149565b60006101128686868686610157565b9695505050505050565b600061012a8585858561016f565b95945050505050565b6101426000868686868661019e565b5050505050565b600061012a85858585610254565b60006101658585858561016f565b61011290876105be565b600061012a61017e86866105ff565b65ffffffffffff16620151806101978587828282610626565b9190610279565b60038601546000906101ba9065ffffffffffff1685858561016f565b60018801549091506101d2908290600160801b6102bd565b8760020160008282546101e591906105be565b90915550508654819088906000906101fe9084906105be565b90915550610213905086600160801b8761030b565b87600101600082825461022691906105be565b90915550505050600394909401805465ffffffffffff191665ffffffffffff92909216919091179055505050565b600061026f6102638684610626565b8590600160801b61030b565b61012a90846105be565b600061029f6000851261028c5784610298565b61029885600019610665565b848461036d565b905060008412156102b6576102b3816106ea565b90505b9392505050565b60006102ca84848461030b565b90506000811280156102fa57506102fa6102e38561041b565b6102ec8561041b565b6102f58561041b565b61042c565b156102b6576102b3600019826105be565b6000600181808061031c8885610445565b9450925061032a8785610445565b945091506103388685610445565b9450905061034f61034a84848461036d565b61046f565b9450836103625761035f856106ea565b94505b505050509392505050565b6000808060001985870985870292508281108382030391505080600014156103a7576000841161039c57600080fd5b5082900490506102b6565b8084116103b357600080fd5b600084868809851960019081018716968790046003810260029081188083028203028083028203028083028203028083028203028083028203029182029003026000889003889004909101858311909403939093029303949094049190911702949350505050565b600061042682610485565b92915050565b600081838509801561043d57600191505b509392505050565b60008060008412156104645791159161045d846106ea565b9150610468565b8391505b5092909150565b6000600160ff1b821061048157600080fd5b5090565b600080821361048157610497826106ea565b610426565b803565ffffffffffff811681146104b257600080fd5b919050565b600080600080600060a086880312156104cf57600080fd5b853594506104df6020870161049c565b93506104ed6040870161049c565b94979396509394606081013594506080013592915050565b6000806000806080858703121561051b57600080fd5b6105248561049c565b93506105326020860161049c565b93969395505050506040820135916060013590565b600080600080600060a0868803121561055f57600080fd5b85359450602086013593506104ed6040870161049c565b6000806000806080858703121561058c57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b600080821280156001600160ff1b03849003851316156105e0576105e06105a8565b600160ff1b83900384128116156105f9576105f96105a8565b50500190565b600065ffffffffffff8381169083168181101561061e5761061e6105a8565b039392505050565b60008083128015600160ff1b850184121615610644576106446105a8565b6001600160ff1b038401831381161561065f5761065f6105a8565b50500390565b60006001600160ff1b038184138284138082168684048611161561068b5761068b6105a8565b600160ff1b60008712828116878305891216156106aa576106aa6105a8565b600087129250878205871284841616156106c6576106c66105a8565b878505871281841616156106dc576106dc6105a8565b505050929093029392505050565b6000600160ff1b821415610700576107006105a8565b506000039056fea164736f6c634300080a000a';

type FundingPaymentTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingPaymentTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundingPaymentTest__factory extends ContractFactory {
  constructor(...args: FundingPaymentTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundingPaymentTest> {
    return super.deploy(overrides || {}) as Promise<FundingPaymentTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FundingPaymentTest {
    return super.attach(address) as FundingPaymentTest;
  }
  connect(signer: Signer): FundingPaymentTest__factory {
    return super.connect(signer) as FundingPaymentTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingPaymentTestInterface {
    return new utils.Interface(_abi) as FundingPaymentTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundingPaymentTest {
    return new Contract(address, _abi, signerOrProvider) as FundingPaymentTest;
  }
}
