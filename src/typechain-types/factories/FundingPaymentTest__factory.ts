/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  FundingPaymentTest,
  FundingPaymentTestInterface,
} from '../FundingPaymentTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumA',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'extrapolatedSumAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumALatestX128',
        type: 'int256',
      },
    ],
    name: 'extrapolatedSumFpX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fpGlobal',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'nextAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'vTokenAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'liquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'update',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506107a0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063115635da1461005c5780631d14114f146100825780636c544335146100955780637cfee5a8146100db578063951d34f0146100f0575b600080fd5b61006f61006a36600461051a565b610103565b6040519081526020015b60405180910390f35b61006f610090366004610568565b61011c565b6000546001546002546003546100b39392919065ffffffffffff1684565b6040805194855260208501939093529183015265ffffffffffff166060820152608001610079565b6100ee6100e93660046105aa565b610133565b005b61006f6100fe3660046105d9565b610149565b60006101128686868686610157565b9695505050505050565b600061012a8585858561016f565b95945050505050565b6101426000868686868661019e565b5050505050565b600061012a858585856102af565b60006101658585858561016f565b6101129087610621565b600061012a61017e8686610662565b65ffffffffffff16620151806101978587828282610689565b91906102d4565b60038601546000906101ba9065ffffffffffff1685858561016f565b60018801549091506101d2908290600160801b610320565b8760020160008282546101e59190610621565b90915550508654819088906000906101fe908490610621565b90915550610213905086600160801b8761036e565b8760010160008282546102269190610621565b909155505060038701805465ffffffffffff861665ffffffffffff199091168117909155604080518954815260018a0154602082015260028a01548183015260608101929092526080820185905260a08201849052517faa55fabd6f264910ebc37d1f213e504b0952aeed471eac51bb24a792cf40ce789181900360c00190a150505050505050565b60006102ca6102be8684610689565b8590600160801b61036e565b61012a9084610621565b60006103026102fd600086126102ea57856102f6565b6102f6866000196106c8565b85856103cb565b61047e565b90506000841215610319576103168161074d565b90505b9392505050565b600061032d84848461036e565b905060008112801561035d575061035d61034685610494565b61034f85610494565b61035885610494565b6104a5565b156103195761031660001982610621565b6000600181808061037f88856104be565b9450925061038d87856104be565b9450915061039b86856104be565b945090506103ad6102fd8484846103cb565b9450836103c0576103bd8561074d565b94505b505050509392505050565b60008080600019858709858702925082811083820303915050806000141561040557600084116103fa57600080fd5b508290049050610319565b80841161041157600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000600160ff1b821061049057600080fd5b5090565b600061049f826104e8565b92915050565b60008183850980156104b657600191505b509392505050565b60008060008412156104dd579115916104d68461074d565b91506104e1565b8391505b5092909150565b6000808213610490576104fa8261074d565b61049f565b803565ffffffffffff8116811461051557600080fd5b919050565b600080600080600060a0868803121561053257600080fd5b85359450610542602087016104ff565b9350610550604087016104ff565b94979396509394606081013594506080013592915050565b6000806000806080858703121561057e57600080fd5b610587856104ff565b9350610595602086016104ff565b93969395505050506040820135916060013590565b600080600080600060a086880312156105c257600080fd5b8535945060208601359350610550604087016104ff565b600080600080608085870312156105ef57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b600080821280156001600160ff1b03849003851316156106435761064361060b565b600160ff1b839003841281161561065c5761065c61060b565b50500190565b600065ffffffffffff838116908316818110156106815761068161060b565b039392505050565b60008083128015600160ff1b8501841216156106a7576106a761060b565b6001600160ff1b03840183138116156106c2576106c261060b565b50500390565b60006001600160ff1b03818413828413808216868404861116156106ee576106ee61060b565b600160ff1b600087128281168783058912161561070d5761070d61060b565b600087129250878205871284841616156107295761072961060b565b8785058712818416161561073f5761073f61060b565b505050929093029392505050565b6000600160ff1b8214156107635761076361060b565b506000039056fea2646970667358221220edc2ea1dbc16648861e05c35359b4ceaf5ea825e235c6590264b899c5d76941c64736f6c634300080c0033';

type FundingPaymentTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingPaymentTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundingPaymentTest__factory extends ContractFactory {
  constructor(...args: FundingPaymentTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'FundingPaymentTest';
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundingPaymentTest> {
    return super.deploy(overrides || {}) as Promise<FundingPaymentTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FundingPaymentTest {
    return super.attach(address) as FundingPaymentTest;
  }
  connect(signer: Signer): FundingPaymentTest__factory {
    return super.connect(signer) as FundingPaymentTest__factory;
  }
  static readonly contractName: 'FundingPaymentTest';
  public readonly contractName: 'FundingPaymentTest';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingPaymentTestInterface {
    return new utils.Interface(_abi) as FundingPaymentTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundingPaymentTest {
    return new Contract(address, _abi, signerOrProvider) as FundingPaymentTest;
  }
}
