/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  FundingPaymentTest,
  FundingPaymentTestInterface,
} from '../FundingPaymentTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumA',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'extrapolatedSumAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumALatestX128',
        type: 'int256',
      },
    ],
    name: 'extrapolatedSumFpX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fpGlobal',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'nextAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'vTokenAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'liquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'update',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061078d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063115635da1461005c5780631d14114f146100825780636c544335146100955780637cfee5a8146100db578063951d34f0146100f0575b600080fd5b61006f61006a366004610507565b610103565b6040519081526020015b60405180910390f35b61006f610090366004610555565b61011c565b6000546001546002546003546100b39392919065ffffffffffff1684565b6040805194855260208501939093529183015265ffffffffffff166060820152608001610079565b6100ee6100e9366004610597565b610133565b005b61006f6100fe3660046105c6565b610149565b60006101128686868686610157565b9695505050505050565b600061012a8585858561016f565b95945050505050565b6101426000868686868661019e565b5050505050565b600061012a858585856102a1565b60006101658585858561016f565b610112908761060e565b600061012a61017e868661064f565b65ffffffffffff16620151806101978587828282610676565b91906102c6565b60038601546000906101ba9065ffffffffffff1685858561016f565b60018801549091506101d2908290600160801b610312565b8760020160008282546101e5919061060e565b90915550508654819088906000906101fe90849061060e565b90915550610213905086600160801b87610360565b876001016000828254610226919061060e565b909155505060038701805465ffffffffffff861665ffffffffffff199091168117909155604080518954815260018a0154602082015260028a0154818301526060810192909252517f56d845af0301cb63e3fc997dd12196cdfc06529656d23e27bcf1b16393013bf79181900360800190a150505050505050565b60006102bc6102b08684610676565b8590600160801b610360565b61012a908461060e565b60006102f46102ef600086126102dc57856102e8565b6102e8866000196106b5565b85856103bd565b61046b565b9050600084121561030b576103088161073a565b90505b9392505050565b600061031f848484610360565b905060008112801561034f575061034f61033885610481565b61034185610481565b61034a85610481565b610492565b1561030b576103086000198261060e565b6000600181808061037188856104ab565b9450925061037f87856104ab565b9450915061038d86856104ab565b9450905061039f6102ef8484846103bd565b9450836103b2576103af8561073a565b94505b505050509392505050565b6000808060001985870985870292508281108382030391505080600014156103f757600084116103ec57600080fd5b50829004905061030b565b80841161040357600080fd5b600084868809851960019081018716968790046003810260029081188083028203028083028203028083028203028083028203028083028203029182029003026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000600160ff1b821061047d57600080fd5b5090565b600061048c826104d5565b92915050565b60008183850980156104a357600191505b509392505050565b60008060008412156104ca579115916104c38461073a565b91506104ce565b8391505b5092909150565b600080821361047d576104e78261073a565b61048c565b803565ffffffffffff8116811461050257600080fd5b919050565b600080600080600060a0868803121561051f57600080fd5b8535945061052f602087016104ec565b935061053d604087016104ec565b94979396509394606081013594506080013592915050565b6000806000806080858703121561056b57600080fd5b610574856104ec565b9350610582602086016104ec565b93969395505050506040820135916060013590565b600080600080600060a086880312156105af57600080fd5b853594506020860135935061053d604087016104ec565b600080600080608085870312156105dc57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b600080821280156001600160ff1b0384900385131615610630576106306105f8565b600160ff1b8390038412811615610649576106496105f8565b50500190565b600065ffffffffffff8381169083168181101561066e5761066e6105f8565b039392505050565b60008083128015600160ff1b850184121615610694576106946105f8565b6001600160ff1b03840183138116156106af576106af6105f8565b50500390565b60006001600160ff1b03818413828413808216868404861116156106db576106db6105f8565b600160ff1b60008712828116878305891216156106fa576106fa6105f8565b60008712925087820587128484161615610716576107166105f8565b8785058712818416161561072c5761072c6105f8565b505050929093029392505050565b6000600160ff1b821415610750576107506105f8565b506000039056fea2646970667358221220ea392fa801b2fc264c8a797facc368c72d41467f9fd171ed13f1e42d751793b464736f6c634300080c0033';

type FundingPaymentTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingPaymentTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundingPaymentTest__factory extends ContractFactory {
  constructor(...args: FundingPaymentTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'FundingPaymentTest';
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundingPaymentTest> {
    return super.deploy(overrides || {}) as Promise<FundingPaymentTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FundingPaymentTest {
    return super.attach(address) as FundingPaymentTest;
  }
  connect(signer: Signer): FundingPaymentTest__factory {
    return super.connect(signer) as FundingPaymentTest__factory;
  }
  static readonly contractName: 'FundingPaymentTest';
  public readonly contractName: 'FundingPaymentTest';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingPaymentTestInterface {
    return new utils.Interface(_abi) as FundingPaymentTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundingPaymentTest {
    return new Contract(address, _abi, signerOrProvider) as FundingPaymentTest;
  }
}
