/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  Uint32L8ArrayTest,
  Uint32L8ArrayTestInterface,
} from '../Uint32L8ArrayTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'element',
        type: 'uint32',
      },
    ],
    name: 'IllegalElement',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'element',
        type: 'uint32',
      },
    ],
    name: 'NoSpaceLeftToInsert',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'element',
        type: 'uint32',
      },
    ],
    name: 'exclude',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'element',
        type: 'uint32',
      },
    ],
    name: 'exists',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'index',
        type: 'uint8',
      },
    ],
    name: 'getter',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getterAll',
    outputs: [
      {
        internalType: 'uint32[8]',
        name: '',
        type: 'uint32[8]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'element',
        type: 'uint32',
      },
    ],
    name: 'include',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'length',
    outputs: [
      {
        internalType: 'uint8',
        name: 'len',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'index',
        type: 'uint8',
      },
      {
        internalType: 'uint32',
        name: 'element',
        type: 'uint32',
      },
    ],
    name: 'setter',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610840806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80634c84b36e1161005b5780634c84b36e146100d9578063557c1b5314610101578063817bbe1614610116578063dd6c35241461012957600080fd5b806313c369ed146100825780631f7b6d32146100aa5780633fc1d8ce146100c4575b600080fd5b6100956100903660046106fc565b61013c565b60405190151581526020015b60405180910390f35b6100b261014e565b60405160ff90911681526020016100a1565b6100cc6101ec565b6040516100a1919061071e565b6100ec6100e7366004610767565b610252565b60405163ffffffff90911681526020016100a1565b61011461010f3660046106fc565b61028c565b005b6101146101243660046106fc565b61029a565b610114610137366004610782565b6102a5565b600061014881836102e9565b92915050565b6000805b60088110156101e8576000816008811061016e5761016e6107b5565b60088104919091015460079091166004026101000a900463ffffffff161561019e578161019a816107e1565b9250505b600081600881106101b1576101b16107b5565b60088104919091015460079091166004026101000a900463ffffffff166101d6575090565b806101e081610801565b915050610152565b5090565b6101f46106c4565b60408051610100810191829052906000906008908280855b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161020c5790505050505050905090565b6000808260ff1660088110610269576102696107b5565b600891828204019190066004029054906101000a900463ffffffff169050919050565b610297600082610304565b50565b610297600082610453565b8060008360ff16600881106102bc576102bc6107b5565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505050565b60006102f5838361064d565b60ff1660ff1415905092915050565b63ffffffff811661033057604051633f16439160e01b8152600060048201526024015b60405180910390fd5b600860005b60088110156103e7578263ffffffff16848260088110610357576103576107b5565b600891828204019190066004029054906101000a900463ffffffff1663ffffffff1614156103855750505050565b8160081480156103c8575060008482600881106103a4576103a46107b5565b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16145b156103d5578091506103e7565b806103df81610801565b915050610335565b50806008141561041257604051630695727160e11b815263ffffffff83166004820152602401610327565b81838260088110610425576104256107b5565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550505050565b63ffffffff811661047a57604051633f16439160e01b815260006004820152602401610327565b600860005b6008811015610533578263ffffffff168482600881106104a1576104a16107b5565b600891828204019190066004029054906101000a900463ffffffff1663ffffffff1614156104cd578091505b8381600881106104df576104df6107b5565b60088104919091015460079091166004026101000a900463ffffffff16610521576000811161050f57600061051a565b61051a60018261081c565b9050610533565b8061052b81610801565b91505061047f565b806008146105415780610544565b60075b905081600814610647578181141561059857600084836008811061056a5761056a6107b5565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550610647565b8381600881106105aa576105aa6107b5565b600891828204019190066004029054906101000a900463ffffffff1660008584600881106105da576105da6107b5565b600891828204019190066004028785600881106105f9576105f96107b5565b600891828204019190066004028491906101000a81548163ffffffff021916908363ffffffff1602179055508391906101000a81548163ffffffff021916908363ffffffff16021790555050505b50505050565b6000805b60088160ff1610156106ba578263ffffffff16848260ff1660088110610679576106796107b5565b600891828204019190066004029054906101000a900463ffffffff1663ffffffff1614156106a8579050610148565b806106b2816107e1565b915050610651565b5060ff9392505050565b6040518061010001604052806008906020820280368337509192915050565b803563ffffffff811681146106f757600080fd5b919050565b60006020828403121561070e57600080fd5b610717826106e3565b9392505050565b6101008101818360005b600881101561074d57815163ffffffff16835260209283019290910190600101610728565b50505092915050565b803560ff811681146106f757600080fd5b60006020828403121561077957600080fd5b61071782610756565b6000806040838503121561079557600080fd5b61079e83610756565b91506107ac602084016106e3565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8114156107f8576107f86107cb565b60010192915050565b6000600019821415610815576108156107cb565b5060010190565b60008282101561082e5761082e6107cb565b50039056fea164736f6c634300080a000a';

type Uint32L8ArrayTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Uint32L8ArrayTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Uint32L8ArrayTest__factory extends ContractFactory {
  constructor(...args: Uint32L8ArrayTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Uint32L8ArrayTest> {
    return super.deploy(overrides || {}) as Promise<Uint32L8ArrayTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Uint32L8ArrayTest {
    return super.attach(address) as Uint32L8ArrayTest;
  }
  connect(signer: Signer): Uint32L8ArrayTest__factory {
    return super.connect(signer) as Uint32L8ArrayTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Uint32L8ArrayTestInterface {
    return new utils.Interface(_abi) as Uint32L8ArrayTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Uint32L8ArrayTest {
    return new Contract(address, _abi, signerOrProvider) as Uint32L8ArrayTest;
  }
}
