/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  ChainlinkOracle,
  ChainlinkOracleInterface,
} from '../ChainlinkOracle';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_aggregator',
        type: 'address',
      },
      {
        internalType: 'uint8',
        name: '_tokenDecimals',
        type: 'uint8',
      },
      {
        internalType: 'uint8',
        name: '_baseDecimals',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'NotEnoughHistory',
    type: 'error',
  },
  {
    inputs: [],
    name: 'aggregator',
    outputs: [
      {
        internalType: 'contract AggregatorV3Interface',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'twapDuration',
        type: 'uint32',
      },
    ],
    name: 'getTwapPriceX128',
    outputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x60c060405234801561001057600080fd5b506040516109b43803806109b483398101604081905261002f916100d1565b6001600160a01b0383166100895760405162461bcd60e51b815260206004820152601a60248201527f696e76616c69642061676772656761746f722061646472657373000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03949094169390931790925560ff9081166080521660a052610122565b805160ff811681146100cc57600080fd5b919050565b6000806000606084860312156100e657600080fd5b83516001600160a01b03811681146100fd57600080fd5b925061010b602085016100bb565b9150610119604085016100bb565b90509250925092565b60805160a05161086e610146600039600060a701526000610156015261086e6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063245a7bfc1461003b578063dd86c1011461006b575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e6100793660046105e6565b61008c565b604051908152602001610062565b600061009d8263ffffffff16610193565b905061018d6100cd7f0000000000000000000000000000000000000000000000000000000000000000600a610706565b6100db90600160801b610715565b60008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561012c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101509190610734565b61017a907f0000000000000000000000000000000000000000000000000000000000000000610757565b61018590600a610706565b8391906102cd565b92915050565b6000806000806101a1610380565b919450925090504260006101b5878361077c565b90508615806101cb57506001600160501b038516155b806101d65750808311155b156101e657509195945050505050565b60006101f2848461077c565b905060006102008287610715565b905060008060008796505b6001600160501b038a1661024057841561022e576102298585610793565b610230565b885b9c9b505050505050505050505050565b61024b60018b6107b5565b99506102568a61046f565b93509150508582116102875761026c868861077c565b6102769082610715565b61028090856107dd565b93506102bd565b610291828861077c565b925061029d8382610715565b6102a790856107dd565b93506102b383866107dd565b945081965061020b565b831561022e576102298c85610793565b60008080600019858709858702925082811083820303915050806000141561030757600084116102fc57600080fd5b508290049050610379565b80841161031357600080fd5b60008486880960018619810187169687900496828603819004959092119093036000829003919091049092019190910291909117600260038502811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b60008060008060008060008054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe9190610811565b509350509250925081945060008212801561042057506001600160501b038316155b1561043e57604051639ee522a960e01b815260040160405180910390fd5b60008212156104635761045a6104556001856107b5565b61046f565b90965090935090505b91959394509092915050565b60008054604051639a6fc8f560e01b81526001600160501b0384166004820152829182918291829182916001600160a01b031690639a6fc8f59060240160a060405180830381865afa1580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed9190610811565b50935050925092505b60008212801561050f57506000836001600160501b0316115b156105a45761051f6001846107b5565b600054604051639a6fc8f560e01b81526001600160501b03831660048201529194506001600160a01b031690639a6fc8f59060240160a060405180830381865afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610811565b509194509092506104f6915050565b6000821280156105bb57506001600160501b038316155b156105d957604051639ee522a960e01b815260040160405180910390fd5b9196909550909350915050565b6000602082840312156105f857600080fd5b813563ffffffff8116811461037957600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561065d5781600019048211156106435761064361060c565b8085161561065057918102915b93841c9390800290610627565b509250929050565b6000826106745750600161018d565b816106815750600061018d565b816001811461069757600281146106a1576106bd565b600191505061018d565b60ff8411156106b2576106b261060c565b50506001821b61018d565b5060208310610133831016604e8410600b84101617156106e0575081810a61018d565b6106ea8383610622565b80600019048211156106fe576106fe61060c565b029392505050565b600061037960ff841683610665565b600081600019048311821515161561072f5761072f61060c565b500290565b60006020828403121561074657600080fd5b815160ff8116811461037957600080fd5b600060ff821660ff84168060ff038211156107745761077461060c565b019392505050565b60008282101561078e5761078e61060c565b500390565b6000826107b057634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160501b03838116908316818110156107d5576107d561060c565b039392505050565b600082198211156107f0576107f061060c565b500190565b80516001600160501b038116811461080c57600080fd5b919050565b600080600080600060a0868803121561082957600080fd5b610832866107f5565b9450602086015193506040860151925060608601519150610855608087016107f5565b9050929550929590935056fea164736f6c634300080c000a';

type ChainlinkOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChainlinkOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChainlinkOracle__factory extends ContractFactory {
  constructor(...args: ChainlinkOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _aggregator: string,
    _tokenDecimals: BigNumberish,
    _baseDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChainlinkOracle> {
    return super.deploy(
      _aggregator,
      _tokenDecimals,
      _baseDecimals,
      overrides || {}
    ) as Promise<ChainlinkOracle>;
  }
  getDeployTransaction(
    _aggregator: string,
    _tokenDecimals: BigNumberish,
    _baseDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _aggregator,
      _tokenDecimals,
      _baseDecimals,
      overrides || {}
    );
  }
  attach(address: string): ChainlinkOracle {
    return super.attach(address) as ChainlinkOracle;
  }
  connect(signer: Signer): ChainlinkOracle__factory {
    return super.connect(signer) as ChainlinkOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainlinkOracleInterface {
    return new utils.Interface(_abi) as ChainlinkOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainlinkOracle {
    return new Contract(address, _abi, signerOrProvider) as ChainlinkOracle;
  }
}
