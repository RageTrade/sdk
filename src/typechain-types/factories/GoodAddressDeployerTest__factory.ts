/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  GoodAddressDeployerTest,
  GoodAddressDeployerTestInterface,
} from '../GoodAddressDeployerTest';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'val',
        type: 'address',
      },
    ],
    name: 'Address',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: 'bytecode',
        type: 'bytes',
      },
    ],
    name: 'deploy',
    outputs: [
      {
        internalType: 'address',
        name: 'computed',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'isAddressGood',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    stateMutability: 'payable',
    type: 'receive',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610521806100206000396000f3fe60806040526004361061002d5760003560e01c806347823a671461003957806361ff715f1461006f57600080fd5b3661003457005b600080fd5b34801561004557600080fd5b5061005a610054366004610394565b50600090565b60405190151581526020015b60405180910390f35b34801561007b57600080fd5b5061008f61008a3660046103d3565b6100a7565b6040516001600160a01b039091168152602001610066565b60006100b683836100fb610185565b6040516001600160a01b03821681529091507febfb412ded3f9cdb15b75308503b279416e74d382f6ce86eedee0ef3130fa9e39060200160405180910390a192915050565b6040517f47823a670000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260009030906347823a6790602401602060405180830381865afa15801561015b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017f919061048e565b92915050565b600061019e8484846101986001436104b0565b406101a6565b949350505050565b825160208401206000905b6101bb8382610213565b91506101ca828563ffffffff16565b6101d9576001909201916101b1565b60006101e687858861028a565b9050806001600160a01b0316836001600160a01b031614610209576102096104d5565b5050949350505050565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff193060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000905b9392505050565b600080844710156102e25760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b82516000036103335760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016102d9565b8383516020850187f590506001600160a01b03811661019e5760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f790000000000000060448201526064016102d9565b6000602082840312156103a657600080fd5b81356001600160a01b038116811461028357600080fd5b634e487b7160e01b600052604160045260246000fd5b600080604083850312156103e657600080fd5b82359150602083013567ffffffffffffffff8082111561040557600080fd5b818501915085601f83011261041957600080fd5b81358181111561042b5761042b6103bd565b604051601f8201601f19908116603f01168101908382118183101715610453576104536103bd565b8160405282815288602084870101111561046c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156104a057600080fd5b8151801515811461028357600080fd5b6000828210156104d057634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fdfea264697066735822122037a43bcad6587cb523d5a44f3cdec5566f48e4dac7ea537b40251ec771162adb64736f6c634300080d0033';

type GoodAddressDeployerTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GoodAddressDeployerTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GoodAddressDeployerTest__factory extends ContractFactory {
  constructor(...args: GoodAddressDeployerTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'GoodAddressDeployerTest';
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GoodAddressDeployerTest> {
    return super.deploy(overrides || {}) as Promise<GoodAddressDeployerTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GoodAddressDeployerTest {
    return super.attach(address) as GoodAddressDeployerTest;
  }
  connect(signer: Signer): GoodAddressDeployerTest__factory {
    return super.connect(signer) as GoodAddressDeployerTest__factory;
  }
  static readonly contractName: 'GoodAddressDeployerTest';
  public readonly contractName: 'GoodAddressDeployerTest';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GoodAddressDeployerTestInterface {
    return new utils.Interface(_abi) as GoodAddressDeployerTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GoodAddressDeployerTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GoodAddressDeployerTest;
  }
}
