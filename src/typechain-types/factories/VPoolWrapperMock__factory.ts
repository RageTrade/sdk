/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  VPoolWrapperMock,
  VPoolWrapperMockInterface,
} from '../VPoolWrapperMock';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'int256',
        name: 'vTokenIn',
        type: 'int256',
      },
      {
        indexed: false,
        internalType: 'int256',
        name: 'vBaseIn',
        type: 'int256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'liquidityFees',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'protocolFees',
        type: 'uint256',
      },
    ],
    name: 'Swap',
    type: 'event',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'contract IClearingHouse',
            name: 'clearingHouse',
            type: 'address',
          },
          {
            internalType: 'contract IVToken',
            name: 'vToken',
            type: 'address',
          },
          {
            internalType: 'contract IVBase',
            name: 'vBase',
            type: 'address',
          },
          {
            internalType: 'contract IUniswapV3Pool',
            name: 'vPool',
            type: 'address',
          },
          {
            internalType: 'uint24',
            name: 'liquidityFeePips',
            type: 'uint24',
          },
          {
            internalType: 'uint24',
            name: 'protocolFeePips',
            type: 'uint24',
          },
          {
            internalType: 'uint24',
            name: 'UNISWAP_V3_DEFAULT_FEE_TIER',
            type: 'uint24',
          },
        ],
        internalType: 'struct IVPoolWrapper.InitializeVPoolWrapperParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: '__VPoolWrapper_init',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'collectAccruedProtocolFee',
    outputs: [
      {
        internalType: 'uint256',
        name: 'accruedProtocolFeeLast',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getExtrapolatedSumAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'getExtrapolatedValuesInside',
    outputs: [
      {
        components: [
          {
            internalType: 'int256',
            name: 'sumAX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBInsideX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpInsideX128',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'sumFeeInsideX128',
            type: 'uint256',
          },
        ],
        internalType: 'struct IVPoolWrapper.WrapperValuesInside',
        name: 'wrapperValuesInside',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getSumAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'getValuesInside',
    outputs: [
      {
        components: [
          {
            internalType: 'int256',
            name: 'sumAX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBInsideX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpInsideX128',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'sumFeeInsideX128',
            type: 'uint256',
          },
        ],
        internalType: 'struct IVPoolWrapper.WrapperValuesInside',
        name: 'wrapperValuesInside',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
      {
        internalType: 'int128',
        name: 'liquidity',
        type: 'int128',
      },
    ],
    name: 'liquidityChange',
    outputs: [
      {
        internalType: 'int256',
        name: 'vBaseAmount',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'vTokenAmount',
        type: 'int256',
      },
      {
        components: [
          {
            internalType: 'int256',
            name: 'sumAX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBInsideX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpInsideX128',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'sumFeeInsideX128',
            type: 'uint256',
          },
        ],
        internalType: 'struct IVPoolWrapper.WrapperValuesInside',
        name: 'wrapperValuesInside',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
      {
        internalType: 'uint256',
        name: 'vBasePerLiquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'vTokenPerLiquidity',
        type: 'uint256',
      },
    ],
    name: 'setLiquidityRates',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vPoolAddress',
        type: 'address',
      },
    ],
    name: 'setVPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBInsideX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpInsideX128',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'sumFeeInsideX128',
        type: 'uint256',
      },
    ],
    name: 'setValuesInside',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'amount',
        type: 'int256',
      },
      {
        internalType: 'uint160',
        name: '',
        type: 'uint160',
      },
      {
        internalType: 'bool',
        name: 'isNotional',
        type: 'bool',
      },
    ],
    name: 'swapToken',
    outputs: [
      {
        internalType: 'int256',
        name: 'vTokenAmount',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'vBaseAmount',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'vTokenAmount',
        type: 'int256',
      },
    ],
    name: 'swapTokenAmount',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'vTokenNotional',
        type: 'int256',
      },
    ],
    name: 'swapTokenNotional',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'updateGlobalFundingState',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'vPool',
    outputs: [
      {
        internalType: 'contract IUniswapV3Pool',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061085d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637aba8e6811610097578063bb152c5311610066578063bb152c5314610209578063d440c42014610231578063d74dcaca14610253578063ea6e4e521461028c57600080fd5b80637aba8e68146101e557806397c71faf146101f6578063a3a1e7e9146101db578063a3c35e2c1461012057600080fd5b80634c2ebc58116100d35780634c2ebc58146101425780635e622abc146101a95780636719578c146101b05780637779815c146101db57600080fd5b80630d8f6f46146100fa5780632a99a7921461012057806333f9096314610140575b600080fd5b61010d610108366004610499565b6102bc565b6040519081526020015b60405180910390f35b61013361012e3660046104c9565b6102d1565b60405161011791906104fc565b005b610140610150366004610527565b60408051608081018252948552602080860194855285820193845260608601928352600297880b600090815280825282812097890b81529690529094209251835590516001830155519281019290925551600390910155565b600061010d565b6002546101c3906001600160a01b031681565b6040516001600160a01b039091168152602001610117565b600560821b61010d565b6101406101f336600461057c565b50565b61010d610204366004610499565b61034e565b61021c6102173660046105a9565b61035c565b60408051928352602083019190915201610117565b61024461023f3660046105f0565b6103a7565b60405161011793929190610632565b610140610261366004610676565b600293840b60009081526001602081815260408084209690970b835294909452939093209081550155565b61014061029a3660046106b8565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006102cb82610f9f196106f2565b92915050565b6102fc6040518060800160405280600081526020016000815260200160008152602001600081525090565b50600291820b60009081526020818152604080832093850b8352928152908290208251608081018452815481526001820154928101929092529283015491810191909152600390910154606082015290565b60006102cb610fa083610777565b600080821561038557610fa0610371866107b3565b61037b9190610777565b915084905061039f565b61038e856107b3565b915061039c85610fa06106f2565b90505b935093915050565b6000806103d56040518060800160405280600081526020016000815260200160008152602001600081525090565b600084600f0b13156104015783600f0b600360008282546103f691906107d0565b9091555061041c9050565b83600f0b600360008282546104169190610811565b90915550505b600286810b60009081526001602090815260408083209389900b8352929052205461044c90600f86900b906106f2565b600287810b6000908152600160208181526040808420948b900b8452939052919020015490935061048290600f86900b906106f2565b915061048e86866102d1565b905093509350939050565b6000602082840312156104ab57600080fd5b5035919050565b8035600281900b81146104c457600080fd5b919050565b600080604083850312156104dc57600080fd5b6104e5836104b2565b91506104f3602084016104b2565b90509250929050565b81518152602080830151908201526040808301519082015260608083015190820152608081016102cb565b60008060008060008060c0878903121561054057600080fd5b610549876104b2565b9550610557602088016104b2565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600060e0828403121561058e57600080fd5b50919050565b6001600160a01b03811681146101f357600080fd5b6000806000606084860312156105be57600080fd5b8335925060208401356105d081610594565b9150604084013580151581146105e557600080fd5b809150509250925092565b60008060006060848603121561060557600080fd5b61060e846104b2565b925061061c602085016104b2565b9150604084013580600f0b81146105e557600080fd5b8381526020810183905260c0810161066e6040830184805182526020810151602083015260408101516040830152606081015160608301525050565b949350505050565b6000806000806080858703121561068c57600080fd5b610695856104b2565b93506106a3602086016104b2565b93969395505050506040820135916060013590565b6000602082840312156106ca57600080fd5b81356106d581610594565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160ff1b0381841382841380821686840486111615610718576107186106dc565b600160ff1b6000871282811687830589121615610737576107376106dc565b60008712925087820587128484161615610753576107536106dc565b87850587128184161615610769576107696106dc565b505050929093029392505050565b60008261079457634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156107ae576107ae6106dc565b500590565b6000600160ff1b8214156107c9576107c96106dc565b5060000390565b600080821280156001600160ff1b03849003851316156107f2576107f26106dc565b600160ff1b839003841281161561080b5761080b6106dc565b50500190565b60008083128015600160ff1b85018412161561082f5761082f6106dc565b6001600160ff1b038401831381161561084a5761084a6106dc565b5050039056fea164736f6c634300080a000a';

type VPoolWrapperMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VPoolWrapperMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VPoolWrapperMock__factory extends ContractFactory {
  constructor(...args: VPoolWrapperMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VPoolWrapperMock> {
    return super.deploy(overrides || {}) as Promise<VPoolWrapperMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VPoolWrapperMock {
    return super.attach(address) as VPoolWrapperMock;
  }
  connect(signer: Signer): VPoolWrapperMock__factory {
    return super.connect(signer) as VPoolWrapperMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VPoolWrapperMockInterface {
    return new utils.Interface(_abi) as VPoolWrapperMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VPoolWrapperMock {
    return new Contract(address, _abi, signerOrProvider) as VPoolWrapperMock;
  }
}
