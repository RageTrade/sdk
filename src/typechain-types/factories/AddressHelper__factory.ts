/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { AddressHelper, AddressHelperInterface } from '../AddressHelper';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IERC20',
        name: 'a',
        type: 'IERC20',
      },
      {
        internalType: 'contract IERC20',
        name: 'b',
        type: 'IERC20',
      },
    ],
    name: 'eq',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'a',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'b',
        type: 'address',
      },
    ],
    name: 'eq',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'a',
        type: 'address',
      },
    ],
    name: 'isZero',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC20',
        name: 'a',
        type: 'IERC20',
      },
    ],
    name: 'isZero',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC20',
        name: 'addr',
        type: 'IERC20',
      },
    ],
    name: 'truncate',
    outputs: [
      {
        internalType: 'uint32',
        name: 'truncated',
        type: 'uint32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'truncate',
    outputs: [
      {
        internalType: 'uint32',
        name: 'truncated',
        type: 'uint32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x61016e61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80630673c8be146100715780630c0f29e5146100a15780635c86558514610071578063649753de146100c0578063712e0daf146100a1578063d3b34fcc146100c0575b600080fd5b61008c61007f366004610104565b6001600160a01b03161590565b60405190151581526020015b60405180910390f35b61008c6100af366004610128565b6001600160a01b0390811691161490565b6100d76100ce366004610104565b63ffffffff1690565b60405163ffffffff9091168152602001610098565b6001600160a01b038116811461010157600080fd5b50565b60006020828403121561011657600080fd5b8135610121816100ec565b9392505050565b6000806040838503121561013b57600080fd5b8235610146816100ec565b91506020830135610156816100ec565b80915050925092905056fea164736f6c634300080a000a';

type AddressHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressHelper__factory extends ContractFactory {
  constructor(...args: AddressHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AddressHelper> {
    return super.deploy(overrides || {}) as Promise<AddressHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AddressHelper {
    return super.attach(address) as AddressHelper;
  }
  connect(signer: Signer): AddressHelper__factory {
    return super.connect(signer) as AddressHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressHelperInterface {
    return new utils.Interface(_abi) as AddressHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressHelper {
    return new Contract(address, _abi, signerOrProvider) as AddressHelper;
  }
}
