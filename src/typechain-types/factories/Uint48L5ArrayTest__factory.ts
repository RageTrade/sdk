/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  Uint48L5ArrayTest,
  Uint48L5ArrayTestInterface,
} from '../Uint48L5ArrayTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'IllegalElement',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'NoSpaceLeftToInsert',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'exclude',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'exists',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'index',
        type: 'uint8',
      },
    ],
    name: 'getter',
    outputs: [
      {
        internalType: 'uint48',
        name: '',
        type: 'uint48',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getterAll',
    outputs: [
      {
        internalType: 'uint48[5]',
        name: '',
        type: 'uint48[5]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'include',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'length',
    outputs: [
      {
        internalType: 'uint8',
        name: 'len',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'index',
        type: 'uint8',
      },
      {
        internalType: 'uint48',
        name: 'element',
        type: 'uint48',
      },
    ],
    name: 'setter',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610889806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80634c84b36e1161005b5780634c84b36e146100cb57806394d881cb146100f5578063968cf6cf14610108578063b0825a631461011b57600080fd5b806304a2c339146100825780631f7b6d32146100975780633fc1d8ce146100b6575b600080fd5b610095610090366004610744565b61013e565b005b61009f61014c565b60405160ff90911681526020015b60405180910390f35b6100be610202565b6040516100ad9190610766565b6100de6100d93660046107b0565b61026b565b60405165ffffffffffff90911681526020016100ad565b6100956101033660046107cb565b6102a7565b610095610116366004610744565b6102ef565b61012e610129366004610744565b6102fa565b60405190151581526020016100ad565b61014960008261030c565b50565b6000805b60058110156101fe576000816005811061016c5761016c6107fe565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff166000146101a757816101a38161082a565b9250505b600081600581106101ba576101ba6107fe565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16600014156101ec575090565b806101f68161084a565b915050610150565b5090565b61020a61070b565b6040805160a0810191829052906000906005908280855b82829054906101000a900465ffffffffffff1665ffffffffffff16815260200190600601906020826005010492830192600103820291508084116102215790505050505050905090565b6000808260ff1660058110610282576102826107fe565b600591828204019190066006029054906101000a900465ffffffffffff169050919050565b8060008360ff16600581106102be576102be6107fe565b600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff1602179055505050565b610149600082610469565b60006103068183610673565b92915050565b65ffffffffffff811661033a5760405163fda0966560e01b8152600060048201526024015b60405180910390fd5b600560005b60058110156103f7578265ffffffffffff16848260058110610363576103636107fe565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff1614156103955750505050565b8160051480156103dc575060008482600581106103b4576103b46107fe565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16145b156103e5578091505b806103ef8161084a565b91505061033f565b50806005141561042457604051636d29aed360e01b815265ffffffffffff83166004820152602401610331565b81838260058110610437576104376107fe565b600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff160217905550505050565b65ffffffffffff81166104925760405163fda0966560e01b815260006004820152602401610331565b600560005b600581101561055e578265ffffffffffff168482600581106104bb576104bb6107fe565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff1614156104eb578091505b8381600581106104fd576104fd6107fe565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff166000141561054c576000811161053a576000610545565b610545600182610865565b905061055e565b806105568161084a565b915050610497565b8160051461066d57818114156105b4576000848360058110610582576105826107fe565b600591828204019190066006026101000a81548165ffffffffffff021916908365ffffffffffff16021790555061066d565b8381600581106105c6576105c66107fe565b600591828204019190066006029054906101000a900465ffffffffffff1660008584600581106105f8576105f86107fe565b60059182820401919006600602878560058110610617576106176107fe565b600591828204019190066006028491906101000a81548165ffffffffffff021916908365ffffffffffff1602179055508391906101000a81548165ffffffffffff021916908365ffffffffffff16021790555050505b50505050565b600061067f838361068e565b60ff1660ff1415905092915050565b6000805b60058160ff161015610701578265ffffffffffff16848260ff16600581106106bc576106bc6107fe565b600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff1614156106ef579050610306565b806106f98161082a565b915050610692565b5060ff9392505050565b6040518060a001604052806005906020820280368337509192915050565b803565ffffffffffff8116811461073f57600080fd5b919050565b60006020828403121561075657600080fd5b61075f82610729565b9392505050565b60a08101818360005b600581101561079657815165ffffffffffff1683526020928301929091019060010161076f565b50505092915050565b803560ff8116811461073f57600080fd5b6000602082840312156107c257600080fd5b61075f8261079f565b600080604083850312156107de57600080fd5b6107e78361079f565b91506107f560208401610729565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81141561084157610841610814565b60010192915050565b600060001982141561085e5761085e610814565b5060010190565b60008282101561087757610877610814565b50039056fea164736f6c634300080c000a';

type Uint48L5ArrayTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Uint48L5ArrayTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Uint48L5ArrayTest__factory extends ContractFactory {
  constructor(...args: Uint48L5ArrayTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Uint48L5ArrayTest> {
    return super.deploy(overrides || {}) as Promise<Uint48L5ArrayTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Uint48L5ArrayTest {
    return super.attach(address) as Uint48L5ArrayTest;
  }
  connect(signer: Signer): Uint48L5ArrayTest__factory {
    return super.connect(signer) as Uint48L5ArrayTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Uint48L5ArrayTestInterface {
    return new utils.Interface(_abi) as Uint48L5ArrayTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Uint48L5ArrayTest {
    return new Contract(address, _abi, signerOrProvider) as Uint48L5ArrayTest;
  }
}
