/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { VTokenLibTest, VTokenLibTestInterface } from '../VTokenLibTest';

const _abi = [
  {
    inputs: [],
    name: 'fixFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'protocol',
    outputs: [
      {
        internalType: 'contract IVBase',
        name: 'vBase',
        type: 'address',
      },
      {
        internalType: 'contract IERC20',
        name: 'cBase',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'uint16',
            name: 'liquidationFeeFraction',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'tokenLiquidationPriceDeltaBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'insuranceFundFeeShareBps',
            type: 'uint16',
          },
        ],
        internalType: 'struct IClearingHouseStructures.LiquidationParams',
        name: 'liquidationParams',
        type: 'tuple',
      },
      {
        internalType: 'uint256',
        name: 'minRequiredMargin',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'removeLimitOrderFee',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'minimumOrderNotional',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'contract IVToken',
            name: 'vToken',
            type: 'address',
          },
          {
            internalType: 'contract IUniswapV3Pool',
            name: 'vPool',
            type: 'address',
          },
          {
            internalType: 'contract IVPoolWrapper',
            name: 'vPoolWrapper',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'uint16',
                name: 'initialMarginRatio',
                type: 'uint16',
              },
              {
                internalType: 'uint16',
                name: 'maintainanceMarginRatio',
                type: 'uint16',
              },
              {
                internalType: 'uint32',
                name: 'twapDuration',
                type: 'uint32',
              },
              {
                internalType: 'bool',
                name: 'supported',
                type: 'bool',
              },
              {
                internalType: 'bool',
                name: 'isCrossMargined',
                type: 'bool',
              },
              {
                internalType: 'contract IOracle',
                name: 'oracle',
                type: 'address',
              },
            ],
            internalType: 'struct IClearingHouseStructures.PoolSettings',
            name: 'settings',
            type: 'tuple',
          },
        ],
        internalType: 'struct IClearingHouseStructures.Pool',
        name: 'poolInfo',
        type: 'tuple',
      },
    ],
    name: 'registerPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint16',
            name: 'liquidationFeeFraction',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'tokenLiquidationPriceDeltaBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'insuranceFundFeeShareBps',
            type: 'uint16',
          },
        ],
        internalType: 'struct IClearingHouseStructures.LiquidationParams',
        name: '_liquidationParams',
        type: 'tuple',
      },
      {
        internalType: 'uint256',
        name: '_minRequiredMargin',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_removeLimitOrderFee',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_minimumOrderNotional',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_fixFee',
        type: 'uint256',
      },
    ],
    name: 'setAccountStorage',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IVBase',
        name: '_vBase',
        type: 'address',
      },
    ],
    name: 'setVBaseAddress',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506104cc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631ca458181461005c5780633a64c245146100785780633fd687a11461008d57806388077639146100bd5780638ce74426146100d0575b600080fd5b610065606c5481565b6040519081526020015b60405180910390f35b61008b6100863660046101ed565b610184565b005b61008b61009b36600461021e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61008b6100cb366004610242565b6101c9565b6002546003546040805160608101825260045461ffff808216835262010000820481166020840152640100000000909104169181019190915260055460065460075461012a956001600160a01b0390811695169392919086565b604080516001600160a01b03978816815296909516602080880191909152845161ffff9081168888015290850151811660608801529390940151909216608085015260a084015260c083015260e08201526101000161006f565b600061019f610196602084018461021e565b63ffffffff1690565b63ffffffff8116600090815260208190526040902090915082906101c382826102e6565b50505050565b8460046101d68282610479565b5050600593909355600691909155600755606c5550565b6000610120828403121561020057600080fd5b50919050565b6001600160a01b038116811461021b57600080fd5b50565b60006020828403121561023057600080fd5b813561023b81610206565b9392505050565b600080600080600085870360e081121561025b57600080fd5b606081121561026957600080fd5b509496606088013596506080880135955060a0880135945060c08801359350915050565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000813561ffff811681146102c157600080fd5b92915050565b6000813580151581146102c157600080fd5b600081356102c181610206565b81356102f181610206565b6102fb818361028d565b50602082013561030a81610206565b610317816001840161028d565b50604082013561032681610206565b610333816002840161028d565b506003810161035a610347606085016102ad565b825461ffff191661ffff91909116178255565b610383610369608085016102ad565b825463ffff0000191660109190911b63ffff000016178255565b60a083013563ffffffff8116811461039a57600080fd5b815467ffffffff000000008260201b1691508167ffffffff0000000019821617835568ff00000000000000006103d260c087016102c7565b151560401b168268ffffffffff000000001983161717835550506104256103fb60e085016102c7565b82805469ff000000000000000000191691151560481b69ff00000000000000000016919091179055565b61047461043561010085016102d9565b8280547fffff0000000000000000000000000000000000000000ffffffffffffffffffff1660509290921b600160501b600160f01b0316919091179055565b505050565b610485610347836102ad565b610494610369602084016102ad565b6104a0604083016102ad565b815465ffff00000000191660209190911b65ffff00000000161790555056fea164736f6c634300080c000a';

type VTokenLibTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VTokenLibTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VTokenLibTest__factory extends ContractFactory {
  constructor(...args: VTokenLibTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VTokenLibTest> {
    return super.deploy(overrides || {}) as Promise<VTokenLibTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VTokenLibTest {
    return super.attach(address) as VTokenLibTest;
  }
  connect(signer: Signer): VTokenLibTest__factory {
    return super.connect(signer) as VTokenLibTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VTokenLibTestInterface {
    return new utils.Interface(_abi) as VTokenLibTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VTokenLibTest {
    return new Contract(address, _abi, signerOrProvider) as VTokenLibTest;
  }
}
