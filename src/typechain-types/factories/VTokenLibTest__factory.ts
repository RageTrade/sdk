/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { VTokenLibTest, VTokenLibTestInterface } from '../VTokenLibTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'IllegalSqrtPrice',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'period',
        type: 'uint32',
      },
    ],
    name: 'IllegalTwapDuration',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'y_target',
        type: 'uint256',
      },
      {
        internalType: 'uint160',
        name: 'x_lower',
        type: 'uint160',
      },
      {
        internalType: 'uint160',
        name: 'x_upper',
        type: 'uint160',
      },
    ],
    name: 'SolutionOutOfBounds',
    type: 'error',
  },
  {
    inputs: [],
    name: 'fixFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IVToken',
        name: 'vToken',
        type: 'address',
      },
      {
        internalType: 'bool',
        name: 'isInitialMargin',
        type: 'bool',
      },
    ],
    name: 'getMarginRatio',
    outputs: [
      {
        internalType: 'uint16',
        name: '',
        type: 'uint16',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IVToken',
        name: 'vToken',
        type: 'address',
      },
    ],
    name: 'getRealTwapSqrtPrice',
    outputs: [
      {
        internalType: 'uint160',
        name: '',
        type: 'uint160',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IVToken',
        name: 'vToken',
        type: 'address',
      },
    ],
    name: 'getVirtualTwapSqrtPrice',
    outputs: [
      {
        internalType: 'uint160',
        name: '',
        type: 'uint160',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'protocol',
    outputs: [
      {
        internalType: 'contract IVBase',
        name: 'vBase',
        type: 'address',
      },
      {
        internalType: 'contract IERC20',
        name: 'rBase',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'uint16',
            name: 'liquidationFeeFraction',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'tokenLiquidationPriceDeltaBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'insuranceFundFeeShareBps',
            type: 'uint16',
          },
        ],
        internalType: 'struct Account.LiquidationParams',
        name: 'liquidationParams',
        type: 'tuple',
      },
      {
        internalType: 'uint256',
        name: 'minRequiredMargin',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'removeLimitOrderFee',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'minimumOrderNotional',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'full',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'contract IUniswapV3Pool',
            name: 'vPool',
            type: 'address',
          },
          {
            internalType: 'contract IVPoolWrapper',
            name: 'vPoolWrapper',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'uint16',
                name: 'initialMarginRatio',
                type: 'uint16',
              },
              {
                internalType: 'uint16',
                name: 'maintainanceMarginRatio',
                type: 'uint16',
              },
              {
                internalType: 'uint32',
                name: 'twapDuration',
                type: 'uint32',
              },
              {
                internalType: 'bool',
                name: 'supported',
                type: 'bool',
              },
              {
                internalType: 'bool',
                name: 'isCrossMargined',
                type: 'bool',
              },
              {
                internalType: 'contract IOracle',
                name: 'oracle',
                type: 'address',
              },
            ],
            internalType: 'struct IClearingHouse.RageTradePoolSettings',
            name: 'settings',
            type: 'tuple',
          },
        ],
        internalType: 'struct IClearingHouse.RageTradePool',
        name: 'rageTradePool',
        type: 'tuple',
      },
    ],
    name: 'registerPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint16',
            name: 'liquidationFeeFraction',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'tokenLiquidationPriceDeltaBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'insuranceFundFeeShareBps',
            type: 'uint16',
          },
        ],
        internalType: 'struct Account.LiquidationParams',
        name: '_liquidationParams',
        type: 'tuple',
      },
      {
        internalType: 'uint256',
        name: '_minRequiredMargin',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_removeLimitOrderFee',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_minimumOrderNotional',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_fixFee',
        type: 'uint256',
      },
    ],
    name: 'setAccountStorage',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IVBase',
        name: '_vBase',
        type: 'address',
      },
    ],
    name: 'setVBaseAddress',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IVToken',
        name: 'vToken',
        type: 'address',
      },
    ],
    name: 'vPool',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IVToken',
        name: 'vToken',
        type: 'address',
      },
    ],
    name: 'vPoolWrapper',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506114a4806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80636e1a3b71116100665780636e1a3b711461014257806388077639146101555780638ce7442614610168578063906d08ed1461021c578063912575841461024257600080fd5b8063178beb39146100a35780631ca45818146100d3578063369dffa9146100ea5780633fd687a1146100fd57806351844f6a1461012f575b600080fd5b6100b66100b1366004610d1d565b610255565b6040516001600160a01b0390911681526020015b60405180910390f35b6100dc606d5481565b6040519081526020016100ca565b6100b66100f8366004610d1d565b61027c565b61012d61010b366004610d1d565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b005b6100b661013d366004610d1d565b610291565b6100b6610150366004610d1d565b6102a6565b61012d610163366004610d3a565b6102c8565b6003546004546040805160608101825260055461ffff80821683526201000082048116602084015264010000000090910416918101919091526006546007546008546101c2956001600160a01b0390811695169392919086565b604080516001600160a01b03978816815296909516602080880191909152845161ffff9081168888015290850151811660608801529390940151909216608085015260a084015260c083015260e0820152610100016100ca565b61022f61022a366004610d93565b6102ec565b60405161ffff90911681526020016100ca565b61012d610250366004610dcc565b610309565b6001600160a01b038181166000908152602081905260408120600101549091165b92915050565b60006102766001600160a01b038316826103a0565b60006102766001600160a01b038316826103bd565b6001600160a01b03818116600090815260208190526040812054909116610276565b8460056102d58282610e1f565b5050600693909355600791909155600855606d5550565b60006103026001600160a01b03841683836103fc565b9392505050565b8160006001600160a01b03821663ffffffff808216600090815260026020526040812054929350610344926001600160a01b03169161045816565b61035057610350610e8d565b63ffffffff8116600090815260026020908152604080832080546001600160a01b0319166001600160a01b038716908117909155835290829052902083906103988282610edd565b505050505050565b60006103026103b86001600160a01b03851684610469565b6104fc565b6001600160a01b03808316600090815260208390526040812060028101549054919261030292169063ffffffff64010000000090910481169061059d16565b6000821561042a57506001600160a01b03831660009081526020829052604090206002015461ffff16610302565b506001600160a01b03831660009081526020829052604090206002015462010000900461ffff169392505050565b6001600160a01b0390811691161490565b6001600160a01b0382811660009081526020839052604080822060020154905163dd86c10160e01b8152640100000000820463ffffffff1660048201529192600160501b909104169063dd86c10190602401602060405180830381865afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103029190611051565b600061052f6105c6836401000276a361052a600173fffd8963efd1fc6a506488495d951d5263988d26611080565b6105e5565b90506401000276a36001600160a01b038216108061056a575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03821610155b1561059857604051635d236c4560e01b81526001600160a01b03821660048201526024015b60405180910390fd5b919050565b6000806105b36001600160a01b03851684610701565b90506105be81610924565b949350505050565b60006102766001600160a01b0383168068010000000000000000610c57565b6000806105f5848763ffffffff16565b90506000610606848863ffffffff16565b90508186108061061557508086115b1561064d5760405163f7b6b2e960e01b8152600481018790526001600160a01b0380871660248301528516604482015260640161058f565b6000805b600161065d8888611080565b6001600160a01b031611156106bb5760026106788888611080565b61068291906110be565b61068c90886110e4565b905061069b818a63ffffffff16565b9150878211156106b057809550819250610651565b809650819350610651565b856001600160a01b0316876001600160a01b0316141580156106e85750876106e6878b63ffffffff16565b145b6106f257866106f4565b855b9998505050505050505050565b600063ffffffff821661072a576040516351a4d88160e01b81526000600482015260240161058f565b604080516002808252606082018352600092602083019080368337019050509050828160008151811061075f5761075f611125565b602002602001019063ffffffff16908163ffffffff168152505060008160018151811061078e5761078e611125565b63ffffffff9092166020928302919091019091015260405163883bdbfd60e01b81526001600160a01b0385169063883bdbfd906107cf90849060040161113b565b600060405180830381865afa92505050801561080d57506040513d6000823e601f3d908101601f1916820160405261080a919081019061124e565b60015b61088257836001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610873919061131a565b5093965061091d945050505050565b60008260008151811061089757610897611125565b6020026020010151836001815181106108b2576108b2611125565b60200260200101516108c491906113c3565b905060006108d863ffffffff881683611413565b905060008260060b1280156108fe57506108f863ffffffff881683611451565b60060b15155b15610911578061090d81611473565b9150505b94506102769350505050565b5092915050565b60008060008360020b1261093b578260020b610943565b8260020b6000035b9050620d89e881111561097c5760405162461bcd60e51b81526020600482015260016024820152601560fa1b604482015260640161058f565b60006001821661099057600160801b6109a2565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156109d6576ffff97272373d413259a46990580e213a0260801c5b60048216156109f5576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610a14576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610a33576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610a52576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610a71576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610a90576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610ab0576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610ad0576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610af0576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610b10576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610b30576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610b50576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610b70576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610b90576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610bb1576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610bd1576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610bf0576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610c0d576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610c2e578060001981610c2a57610c2a6110a8565b0490505b640100000000810615610c42576001610c45565b60005b60ff16602082901c0192505050919050565b600080806000198587098587029250828110838203039150508060001415610c915760008411610c8657600080fd5b508290049050610302565b808411610c9d57600080fd5b600084868809851960019081018716968790046003810260029081188083028203028083028203028083028203028083028203028083028203029182029003026000889003889004909101858311909403939093029303949094049190911702949350505050565b6001600160a01b0381168114610d1a57600080fd5b50565b600060208284031215610d2f57600080fd5b813561030281610d05565b600080600080600085870360e0811215610d5357600080fd5b6060811215610d6157600080fd5b509496606088013596506080880135955060a0880135945060c08801359350915050565b8015158114610d1a57600080fd5b60008060408385031215610da657600080fd5b8235610db181610d05565b91506020830135610dc181610d85565b809150509250929050565b600080828403610120811215610de157600080fd5b8335610dec81610d05565b9250610100601f1982011215610e0157600080fd5b506020830190509250929050565b61ffff81168114610d1a57600080fd5b8135610e2a81610e0f565b815461ffff191661ffff8216178255506020820135610e4881610e0f565b815463ffff00001916601082901b63ffff000016178255506040820135610e6e81610e0f565b815465ffff00000000191660209190911b65ffff000000001617905550565b634e487b7160e01b600052600160045260246000fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000813561027681610d85565b6000813561027681610d05565b8135610ee881610d05565b610ef28183610ea3565b506020820135610f0181610d05565b610f0e8160018401610ea3565b50600281016040830135610f2181610e0f565b815461ffff191661ffff8216178255506060830135610f3f81610e0f565b815463ffff00001916601082901b63ffff00001617825550608083013563ffffffff81168114610f6e57600080fd5b815467ffffffff00000000191660209190911b67ffffffff0000000016178155610fc5610f9d60a08501610ec3565b82805468ff0000000000000000191691151560401b68ff000000000000000016919091179055565b610ffe610fd460c08501610ec3565b82805469ff000000000000000000191691151560481b69ff00000000000000000016919091179055565b61104c61100d60e08501610ed0565b8280547fffff0000000000000000000000000000000000000000ffffffffffffffffffff1660509290921b600160501b600160f01b0316919091179055565b505050565b60006020828403121561106357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001600160a01b03838116908316818110156110a0576110a061106a565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160a01b03838116806110d8576110d86110a8565b92169190910492915050565b60006001600160a01b038281168482168083038211156111065761110661106a565b01949350505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561117957835163ffffffff1683529284019291840191600101611157565b50909695505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156111ae576111ae61110f565b604052919050565b600067ffffffffffffffff8211156111d0576111d061110f565b5060051b60200190565b600082601f8301126111eb57600080fd5b815160206112006111fb836111b6565b611185565b82815260059290921b8401810191818101908684111561121f57600080fd5b8286015b8481101561124357805161123681610d05565b8352918301918301611223565b509695505050505050565b6000806040838503121561126157600080fd5b825167ffffffffffffffff8082111561127957600080fd5b818501915085601f83011261128d57600080fd5b8151602061129d6111fb836111b6565b82815260059290921b840181019181810190898411156112bc57600080fd5b948201945b838610156112ea5785518060060b81146112db5760008081fd5b825294820194908201906112c1565b9188015191965090935050508082111561130357600080fd5b50611310858286016111da565b9150509250929050565b600080600080600080600060e0888a03121561133557600080fd5b875161134081610d05565b8097505060208801518060020b811461135857600080fd5b604089015190965061136981610e0f565b606089015190955061137a81610e0f565b608089015190945061138b81610e0f565b60a089015190935060ff811681146113a257600080fd5b60c08901519092506113b381610d85565b8091505092959891949750929550565b60008160060b8360060b6000811281667fffffffffffff19018312811516156113ee576113ee61106a565b81667fffffffffffff0183138116156114095761140961106a565b5090039392505050565b60008160060b8360060b8061142a5761142a6110a8565b667fffffffffffff198214600019821416156114485761144861106a565b90059392505050565b60008260060b80611464576114646110a8565b808360060b0791505092915050565b60008160020b627fffff1981141561148d5761148d61106a565b600019019291505056fea164736f6c634300080a000a';

type VTokenLibTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VTokenLibTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VTokenLibTest__factory extends ContractFactory {
  constructor(...args: VTokenLibTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VTokenLibTest> {
    return super.deploy(overrides || {}) as Promise<VTokenLibTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VTokenLibTest {
    return super.attach(address) as VTokenLibTest;
  }
  connect(signer: Signer): VTokenLibTest__factory {
    return super.connect(signer) as VTokenLibTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VTokenLibTestInterface {
    return new utils.Interface(_abi) as VTokenLibTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VTokenLibTest {
    return new Contract(address, _abi, signerOrProvider) as VTokenLibTest;
  }
}
