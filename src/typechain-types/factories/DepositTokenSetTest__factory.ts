/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  DepositTokenSetTest,
  DepositTokenSetTestInterface,
} from '../DepositTokenSetTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_rBase',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'element',
        type: 'uint32',
      },
    ],
    name: 'IllegalElement',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'element',
        type: 'uint32',
      },
    ],
    name: 'NoSpaceLeftToInsert',
    type: 'error',
  },
  {
    inputs: [],
    name: 'cleanDeposits',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'realTokenAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'decreaseBalance',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fixFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllDepositAccountMarketValue',
    outputs: [
      {
        internalType: 'int256',
        name: 'depositValue',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'realTokenAddress',
        type: 'address',
      },
    ],
    name: 'getBalance',
    outputs: [
      {
        internalType: 'uint256',
        name: 'balance',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'realTokenAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'increaseBalance',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'cTokenAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'oracleAddress',
        type: 'address',
      },
      {
        internalType: 'uint32',
        name: 'twapDuration',
        type: 'uint32',
      },
    ],
    name: 'init',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vToken',
        type: 'address',
      },
    ],
    name: 'initVToken',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'protocol',
    outputs: [
      {
        internalType: 'contract IVBase',
        name: 'vBase',
        type: 'address',
      },
      {
        internalType: 'contract IERC20',
        name: 'rBase',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'uint16',
            name: 'liquidationFeeFraction',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'tokenLiquidationPriceDeltaBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'insuranceFundFeeShareBps',
            type: 'uint16',
          },
        ],
        internalType: 'struct Account.LiquidationParams',
        name: 'liquidationParams',
        type: 'tuple',
      },
      {
        internalType: 'uint256',
        name: 'minRequiredMargin',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'removeLimitOrderFee',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'minimumOrderNotional',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'full',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'contract IUniswapV3Pool',
            name: 'vPool',
            type: 'address',
          },
          {
            internalType: 'contract IVPoolWrapper',
            name: 'vPoolWrapper',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'uint16',
                name: 'initialMarginRatio',
                type: 'uint16',
              },
              {
                internalType: 'uint16',
                name: 'maintainanceMarginRatio',
                type: 'uint16',
              },
              {
                internalType: 'uint32',
                name: 'twapDuration',
                type: 'uint32',
              },
              {
                internalType: 'bool',
                name: 'supported',
                type: 'bool',
              },
              {
                internalType: 'bool',
                name: 'isCrossMargined',
                type: 'bool',
              },
              {
                internalType: 'contract IOracle',
                name: 'oracle',
                type: 'address',
              },
            ],
            internalType: 'struct IClearingHouse.RageTradePoolSettings',
            name: 'settings',
            type: 'tuple',
          },
        ],
        internalType: 'struct IClearingHouse.RageTradePool',
        name: 'rageTradePool',
        type: 'tuple',
      },
    ],
    name: 'registerPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint16',
            name: 'liquidationFeeFraction',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'tokenLiquidationPriceDeltaBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'insuranceFundFeeShareBps',
            type: 'uint16',
          },
        ],
        internalType: 'struct Account.LiquidationParams',
        name: '_liquidationParams',
        type: 'tuple',
      },
      {
        internalType: 'uint256',
        name: '_minRequiredMargin',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_removeLimitOrderFee',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_minimumOrderNotional',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_fixFee',
        type: 'uint256',
      },
    ],
    name: 'setAccountStorage',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IVBase',
        name: '_vBase',
        type: 'address',
      },
    ],
    name: 'setVBaseAddress',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'wrapper',
    outputs: [
      {
        internalType: 'contract VPoolWrapperMock',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50604051611a52380380611a5283398101604081905261002f91610099565b60405161003b9061008c565b604051809103906000f080158015610057573d6000803e3d6000fd5b5060d480546001600160a01b039283166001600160a01b031991821617909155600480549390921692169190911790556100c9565b6108ec8061116683390190565b6000602082840312156100ab57600080fd5b81516001600160a01b03811681146100c257600080fd5b9392505050565b61108e806100d86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638ce744261161008c578063ac210cc711610066578063ac210cc714610308578063ed16575a14610333578063f8b2cb4f1461033b578063ff0569491461036157600080fd5b80638ce744261461023957806391257584146102ed578063a96822a31461030057600080fd5b80631ca45818146100d45780633fd687a1146100f05780635b86f59914610122578063713fdf471461013557806388077639146101e45780638b1a8fb6146101f7575b600080fd5b6100dd606d5481565b6040519081526020015b60405180910390f35b6101206100fe366004610b9f565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b005b610120610130366004610bbc565b610374565b610120610143366004610bfa565b604080516080810182526001600160a01b038581168252938416602080830191825263ffffffff94851683850190815260016060850181815298871660009081529281905294909120925183549087166001600160a01b03199091161783559051919092018054925195511515600160c01b0260ff60c01b1996909416600160a01b026001600160c01b031990931691909416171792909216919091179055565b6101206101f2366004610c45565b610384565b610120610205366004610b9f565b63ffffffff8116600090815260026020526040902080546001600160a01b0319166001600160a01b03909216919091179055565b6003546004546040805160608101825260055461ffff8082168352620100008204811660208401526401000000009091041691810191909152600654600754600854610293956001600160a01b0390811695169392919086565b604080516001600160a01b03978816815296909516602080880191909152845161ffff9081168888015290850151811660608801529390940151909216608085015260a084015260c083015260e0820152610100016100e7565b6101206102fb366004610c90565b6103a8565b6100dd61043f565b60d45461031b906001600160a01b031681565b6040516001600160a01b0390911681526020016100e7565b610120610451565b6100dd610349366004610b9f565b63ffffffff166000908152606f602052604090205490565b61012061036f366004610bbc565b6104eb565b610380606e83836104f7565b5050565b8460056103918282610ce7565b5050600693909355600791909155600855606d5550565b8160006001600160a01b03821663ffffffff8082166000908152600260205260408120549293506103e3926001600160a01b03169161053d16565b6103ef576103ef610d5a565b63ffffffff8116600090815260026020908152604080832080546001600160a01b0319166001600160a01b038716908117909155835290829052902083906104378282610daf565b505050505050565b600061044c606e8261054e565b905090565b60005b60088110156104e8576000606e826008811061047257610472610eef565b60088104919091015460079091166004026101000a900463ffffffff1690508061049a575050565b63ffffffff808216600090815260016020908152604080832054606f909252909120546104d592606e926001600160a01b0316919061061b16565b50806104e081610f1b565b915050610454565b50565b610380606e838361061b565b6001600160a01b03821661050b84826106a2565b63ffffffff8316600090815260018501602052604081208054849290610532908490610f36565b909155505050505050565b6001600160a01b0390811691161490565b60008060005b60088160ff1610156106135760008560ff83166008811061057757610577610eef565b60088104919091015460079091166004026101000a900463ffffffff169050806105a15750610613565b63ffffffff8116600090815260018601602052604090206105f26105c4826107f1565b63ffffffff8416600090815260018a016020526040902054600160801b906105eb90610889565b919061089f565b6105fc9085610f4e565b93505050808061060b90610f8f565b915050610554565b509392505050565b63ffffffff821660009081526001840160205260409020546001600160a01b0383169082111561064a57600080fd5b63ffffffff8116600090815260018501602052604081208054849290610671908490610faf565b909155505063ffffffff8116600090815260018501602052604090205461069c5761069c84826108e3565b50505050565b63ffffffff81166106ce57604051633f16439160e01b8152600060048201526024015b60405180910390fd5b600860005b6008811015610785578263ffffffff168482600881106106f5576106f5610eef565b600891828204019190066004029054906101000a900463ffffffff1663ffffffff1614156107235750505050565b8160081480156107665750600084826008811061074257610742610eef565b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16145b1561077357809150610785565b8061077d81610f1b565b9150506106d3565b5080600814156107b057604051630695727160e11b815263ffffffff831660048201526024016106c5565b818382600881106107c3576107c3610eef565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550505050565b600061080782600101546001600160a01b031690565b600183015460405163dd86c10160e01b8152600160a01b90910463ffffffff1660048201526001600160a01b03919091169063dd86c10190602401602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190610fc6565b92915050565b6000600160ff1b821061089b57600080fd5b5090565b60006108c5600085126108b257846108be565b6108be85600019610fdf565b8484610adc565b905060008412156108dc576108d981611064565b90505b9392505050565b63ffffffff811661090a57604051633f16439160e01b8152600060048201526024016106c5565b600860005b60088110156109c3578263ffffffff1684826008811061093157610931610eef565b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16141561095d578091505b83816008811061096f5761096f610eef565b60088104919091015460079091166004026101000a900463ffffffff166109b1576000811161099f5760006109aa565b6109aa600182610faf565b90506109c3565b806109bb81610f1b565b91505061090f565b806008146109d157806109d4565b60075b90508160081461069c5781811415610a285760008483600881106109fa576109fa610eef565b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff16021790555061069c565b838160088110610a3a57610a3a610eef565b600891828204019190066004029054906101000a900463ffffffff166000858460088110610a6a57610a6a610eef565b60089182820401919006600402878560088110610a8957610a89610eef565b600891828204019190066004028491906101000a81548163ffffffff021916908363ffffffff1602179055508391906101000a81548163ffffffff021916908363ffffffff160217905550505050505050565b600080806000198587098587029250828110838203039150508060001415610b165760008411610b0b57600080fd5b5082900490506108dc565b808411610b2257600080fd5b600084868809851960019081018716968790046003810260029081188083028203028083028203028083028203028083028203028083028203029182029003026000889003889004909101858311909403939093029303949094049190911702949350505050565b6001600160a01b03811681146104e857600080fd5b600060208284031215610bb157600080fd5b81356108dc81610b8a565b60008060408385031215610bcf57600080fd5b8235610bda81610b8a565b946020939093013593505050565b63ffffffff811681146104e857600080fd5b600080600060608486031215610c0f57600080fd5b8335610c1a81610b8a565b92506020840135610c2a81610b8a565b91506040840135610c3a81610be8565b809150509250925092565b600080600080600085870360e0811215610c5e57600080fd5b6060811215610c6c57600080fd5b509496606088013596506080880135955060a0880135945060c08801359350915050565b600080828403610120811215610ca557600080fd5b8335610cb081610b8a565b9250610100601f1982011215610cc557600080fd5b506020830190509250929050565b6000813561ffff8116811461088357600080fd5b610d06610cf383610cd3565b825461ffff191661ffff91909116178255565b610d2f610d1560208401610cd3565b825463ffff0000191660109190911b63ffff000016178255565b610d3b60408301610cd3565b815465ffff00000000191660209190911b65ffff000000001617905550565b634e487b7160e01b600052600160045260246000fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b60008135801515811461088357600080fd5b6000813561088381610b8a565b8135610dba81610b8a565b610dc48183610d70565b506020820135610dd381610b8a565b610de08160018401610d70565b5060028101610df4610cf360408501610cd3565b610e03610d1560608501610cd3565b6080830135610e1181610be8565b815467ffffffff000000008260201b1691508167ffffffff0000000019821617835568ff0000000000000000610e4960a08701610d90565b151560401b168268ffffffffff00000000198316171783555050610e9c610e7260c08501610d90565b82805469ff000000000000000000191691151560481b69ff00000000000000000016919091179055565b610eea610eab60e08501610da2565b8280547fffff0000000000000000000000000000000000000000ffffffffffffffffffff1660509290921b600160501b600160f01b0316919091179055565b505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610f2f57610f2f610f05565b5060010190565b60008219821115610f4957610f49610f05565b500190565b600080821280156001600160ff1b0384900385131615610f7057610f70610f05565b600160ff1b8390038412811615610f8957610f89610f05565b50500190565b600060ff821660ff811415610fa657610fa6610f05565b60010192915050565b600082821015610fc157610fc1610f05565b500390565b600060208284031215610fd857600080fd5b5051919050565b60006001600160ff1b038184138284138082168684048611161561100557611005610f05565b600160ff1b600087128281168783058912161561102457611024610f05565b6000871292508782058712848416161561104057611040610f05565b8785058712818416161561105657611056610f05565b505050929093029392505050565b6000600160ff1b82141561107a5761107a610f05565b506000039056fea164736f6c634300080a000a608060405234801561001057600080fd5b506108cc806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806386c8e9a7116100a2578063bb152c5311610071578063bb152c5314610263578063d440c4201461028b578063d74dcaca146102ad578063ea6e4e52146102e6578063fca6fbf21461031657600080fd5b806386c8e9a71461023a57806397c71faf14610250578063a3a1e7e91461021f578063a3c35e2c1461016457600080fd5b80634c2ebc58116100e95780634c2ebc58146101865780635e622abc146101ed5780636719578c146101f45780637779815c1461021f5780637aba8e681461022957600080fd5b806302dc99511461011b5780630d8f6f46146101435780632a99a7921461016457806333f9096314610184575b600080fd5b60015461012a9062ffffff1681565b60405162ffffff90911681526020015b60405180910390f35b610156610151366004610508565b61032f565b60405190815260200161013a565b610177610172366004610538565b610344565b60405161013a919061056b565b005b610184610194366004610596565b60408051608081018252948552602080860194855285820193845260608601928352600297880b600090815280825282812097890b81529690529094209251835590516001830155519281019290925551600390910155565b6000610156565b600354610207906001600160a01b031681565b6040516001600160a01b03909116815260200161013a565b600560821b610156565b6101846102373660046105eb565b50565b60015461012a906301000000900462ffffff1681565b61015661025e366004610508565b6103c1565b610276610271366004610618565b6103cf565b6040805192835260208301919091520161013a565b61029e61029936600461065f565b61041a565b60405161013a939291906106a1565b6101846102bb3660046106e5565b600293840b6000908152602085815260408083209590960b8252939093529290912090815560010155565b6101846102f4366004610727565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60015461012a906601000000000000900462ffffff1681565b600061033e82610f9f19610761565b92915050565b61036f6040518060800160405280600081526020016000815260200160008152602001600081525090565b50600291820b60009081526020818152604080832093850b8352928152908290208251608081018452815481526001820154928101929092529283015491810191909152600390910154606082015290565b600061033e610fa0836107e6565b60008082156103f857610fa06103e486610822565b6103ee91906107e6565b9150849050610412565b61040185610822565b915061040f85610fa0610761565b90505b935093915050565b6000806104486040518060800160405280600081526020016000815260200160008152602001600081525090565b600084600f0b13156104745783600f0b60046000828254610469919061083f565b9091555061048f9050565b83600f0b600460008282546104899190610880565b90915550505b600286810b6000908152602082815260408083209389900b835292905220546104bd90600f86900b90610761565b600287810b600090815260208281526040808320938a900b835292905220600101549093506104f190600f86900b90610761565b91506104fd8686610344565b905093509350939050565b60006020828403121561051a57600080fd5b5035919050565b8035600281900b811461053357600080fd5b919050565b6000806040838503121561054b57600080fd5b61055483610521565b915061056260208401610521565b90509250929050565b815181526020808301519082015260408083015190820152606080830151908201526080810161033e565b60008060008060008060c087890312156105af57600080fd5b6105b887610521565b95506105c660208801610521565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600060e082840312156105fd57600080fd5b50919050565b6001600160a01b038116811461023757600080fd5b60008060006060848603121561062d57600080fd5b83359250602084013561063f81610603565b91506040840135801515811461065457600080fd5b809150509250925092565b60008060006060848603121561067457600080fd5b61067d84610521565b925061068b60208501610521565b9150604084013580600f0b811461065457600080fd5b8381526020810183905260c081016106dd6040830184805182526020810151602083015260408101516040830152606081015160608301525050565b949350505050565b600080600080608085870312156106fb57600080fd5b61070485610521565b935061071260208601610521565b93969395505050506040820135916060013590565b60006020828403121561073957600080fd5b813561074481610603565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160ff1b03818413828413808216868404861116156107875761078761074b565b600160ff1b60008712828116878305891216156107a6576107a661074b565b600087129250878205871284841616156107c2576107c261074b565b878505871281841616156107d8576107d861074b565b505050929093029392505050565b60008261080357634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561081d5761081d61074b565b500590565b6000600160ff1b8214156108385761083861074b565b5060000390565b600080821280156001600160ff1b03849003851316156108615761086161074b565b600160ff1b839003841281161561087a5761087a61074b565b50500190565b60008083128015600160ff1b85018412161561089e5761089e61074b565b6001600160ff1b03840183138116156108b9576108b961074b565b5050039056fea164736f6c634300080a000a';

type DepositTokenSetTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DepositTokenSetTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DepositTokenSetTest__factory extends ContractFactory {
  constructor(...args: DepositTokenSetTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _rBase: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DepositTokenSetTest> {
    return super.deploy(
      _rBase,
      overrides || {}
    ) as Promise<DepositTokenSetTest>;
  }
  getDeployTransaction(
    _rBase: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_rBase, overrides || {});
  }
  attach(address: string): DepositTokenSetTest {
    return super.attach(address) as DepositTokenSetTest;
  }
  connect(signer: Signer): DepositTokenSetTest__factory {
    return super.connect(signer) as DepositTokenSetTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DepositTokenSetTestInterface {
    return new utils.Interface(_abi) as DepositTokenSetTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DepositTokenSetTest {
    return new Contract(address, _abi, signerOrProvider) as DepositTokenSetTest;
  }
}
