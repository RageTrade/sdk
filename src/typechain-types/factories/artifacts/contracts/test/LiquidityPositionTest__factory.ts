/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  LiquidityPositionTest,
  LiquidityPositionTestInterface,
} from '../../../../artifacts/contracts/test/LiquidityPositionTest';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'IllegalSqrtPrice',
    type: 'error',
  },
  {
    inputs: [],
    name: 'LP_AlreadyInitialized',
    type: 'error',
  },
  {
    inputs: [],
    name: 'T',
    type: 'error',
  },
  {
    inputs: [],
    name: 'balanceAdjustments',
    outputs: [
      {
        internalType: 'int256',
        name: 'vQuoteIncrease',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'vTokenIncrease',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'traderPositionIncrease',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fixFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int128',
        name: 'liquidity',
        type: 'int128',
      },
    ],
    name: 'liquidityChange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'lp',
    outputs: [
      {
        internalType: 'enum IClearingHouseEnums.LimitOrderType',
        name: 'limitOrderType',
        type: 'uint8',
      },
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
      {
        internalType: 'uint128',
        name: 'liquidity',
        type: 'uint128',
      },
      {
        internalType: 'int256',
        name: 'vTokenAmountIn',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumALastX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBInsideLastX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpInsideLastX128',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'sumFeeInsideLastX128',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceCurrent',
        type: 'uint160',
      },
    ],
    name: 'marketValue',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'maxNetPosition',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceCurrent',
        type: 'uint160',
      },
    ],
    name: 'netPosition',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'protocol',
    outputs: [
      {
        internalType: 'contract IERC20',
        name: 'settlementToken',
        type: 'address',
      },
      {
        internalType: 'contract IVQuote',
        name: 'vQuote',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'uint16',
            name: 'rangeLiquidationFeeFraction',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'tokenLiquidationFeeFraction',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'closeFactorMMThresholdBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'partialLiquidationCloseFactorBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'insuranceFundFeeShareBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationSlippageSqrtToleranceBps',
            type: 'uint16',
          },
          {
            internalType: 'uint64',
            name: 'maxRangeLiquidationFees',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'minNotionalLiquidatable',
            type: 'uint64',
          },
        ],
        internalType: 'struct IClearingHouseStructures.LiquidationParams',
        name: 'liquidationParams',
        type: 'tuple',
      },
      {
        internalType: 'uint256',
        name: 'minRequiredMargin',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'removeLimitOrderFee',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'minimumOrderNotional',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'contract IVToken',
            name: 'vToken',
            type: 'address',
          },
          {
            internalType: 'contract IUniswapV3Pool',
            name: 'vPool',
            type: 'address',
          },
          {
            internalType: 'contract IVPoolWrapper',
            name: 'vPoolWrapper',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'uint16',
                name: 'initialMarginRatioBps',
                type: 'uint16',
              },
              {
                internalType: 'uint16',
                name: 'maintainanceMarginRatioBps',
                type: 'uint16',
              },
              {
                internalType: 'uint16',
                name: 'maxVirtualPriceDeviationRatioBps',
                type: 'uint16',
              },
              {
                internalType: 'uint32',
                name: 'twapDuration',
                type: 'uint32',
              },
              {
                internalType: 'bool',
                name: 'isAllowedForTrade',
                type: 'bool',
              },
              {
                internalType: 'bool',
                name: 'isCrossMargined',
                type: 'bool',
              },
              {
                internalType: 'contract IOracle',
                name: 'oracle',
                type: 'address',
              },
            ],
            internalType: 'struct IClearingHouseStructures.PoolSettings',
            name: 'settings',
            type: 'tuple',
          },
        ],
        internalType: 'struct IClearingHouseStructures.Pool',
        name: 'poolInfo',
        type: 'tuple',
      },
    ],
    name: 'registerPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint16',
            name: 'rangeLiquidationFeeFraction',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'tokenLiquidationFeeFraction',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'closeFactorMMThresholdBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'partialLiquidationCloseFactorBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'insuranceFundFeeShareBps',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationSlippageSqrtToleranceBps',
            type: 'uint16',
          },
          {
            internalType: 'uint64',
            name: 'maxRangeLiquidationFees',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'minNotionalLiquidatable',
            type: 'uint64',
          },
        ],
        internalType: 'struct IClearingHouseStructures.LiquidationParams',
        name: '_liquidationParams',
        type: 'tuple',
      },
      {
        internalType: 'uint256',
        name: '_minRequiredMargin',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_removeLimitOrderFee',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_minimumOrderNotional',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_fixFee',
        type: 'uint256',
      },
    ],
    name: 'setAccountStorage',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IVQuote',
        name: '_vQuote',
        type: 'address',
      },
    ],
    name: 'setVQuoteAddress',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'updateCheckpoints',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'wrapper',
    outputs: [
      {
        internalType: 'contract VPoolWrapperMock',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b5060da80546001600160a01b0319166001600160a01b039290921691909117905561006d565b610afd80620021e683390190565b612169806200007d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635ea250321161008c5780639d9ba482116100665780639d9ba482146102ff578063ac210cc714610307578063c28fd78714610332578063f04af6ec1461034557600080fd5b80635ea25032146101c357806382d9dbaa146101f05780638ce744261461022057600080fd5b80632e0cb31a116100c85780632e0cb31a14610133578063313c06a0146101465780633ffe794c146101a857806357595e87146101bb57600080fd5b80631ca45818146100ef5780631f1b95021461010b5780632c83d1341461011e575b600080fd5b6100f8606c5481565b6040519081526020015b60405180910390f35b6100f861011936600461172d565b610358565b61013161012c366004611759565b61036b565b005b6100f861014136600461172d565b61037b565b6070546071546072546073546074546075546101939560ff8116956101008204600290810b96640100000000840490910b95600160381b9093046001600160801b03169491939092919089565b604051610102999897969594939291906117b4565b6101316101b6366004611811565b610398565b6101316103dd565b606d54606e54606f546101d592919083565b60408051938452602084019290925290820152606001610102565b6101316101fe36600461172d565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600254600354604080516101008101825260045461ffff80821683526201000082048116602084015264010000000082048116938301939093526601000000000000810483166060830152680100000000000000008104831660808301526a0100000000000000000000810490921660a082015267ffffffffffffffff600160601b8304811660c08301527401000000000000000000000000000000000000000090920490911660e08201526005546006546007546102ed956001600160a01b0390811695169392919086565b6040516101029695949392919061182a565b6100f86104a1565b60da5461031a906001600160a01b031681565b6040516001600160a01b039091168152602001610102565b6101316103403660046118f2565b6104b2565b610131610353366004611942565b6104d6565b60006103656070836105f8565b92915050565b61037760708383610621565b5050565b60da546000906103659060709084906001600160a01b031661067a565b60006103b36103aa602084018461172d565b63ffffffff1690565b63ffffffff8116600090815260208190526040902090915082906103d782826119aa565b50505050565b60da546070546040516328f0d78b60e21b81526101008204600290810b600483015264010000000090920490910b60248201526000916001600160a01b03169063a3c35e2c90604401608060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104679190611c00565b60408051606081018252606d548152606e546020820152606f549181019190915290915061049e906070906000908190859061079e565b50565b60006104ad607061090a565b905090565b8460046104bf8282611c36565b5050600593909355600691909155600755606c5550565b60da54600080805260209081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb780546001600160a01b0319166001600160a01b039093169283179055604080516319c655e360e21b81529051636719578c926004808401939192918290030181865afa158015610558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057c9190611dee565b600080805260208181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb680546001600160a01b0319166001600160a01b03949094169390931790925560408051606081018252606d548152606e5493810193909352606f549083015261049e916070919081908590826109bb565b600080610606848483610d64565b5060018501549091506106199082611e21565b949350505050565b61062a83610e2e565b156106485760405163a0bb33f960e01b815260040160405180910390fd5b825466ffffffffffff00191661010062ffffff9384160266ffffff000000001916176401000000009190921602179055565b60008080610689868683610d64565b9150915060006106a1866001600160a01b0316610e55565b9050816106b38483600160801b610ec6565b6106bd9190611e60565b875460405163154cd3c960e11b81526101008204600290810b600483015264010000000090920490910b6024820152909450600093506001600160a01b0386169250632a99a7929150604401608060405180830381865afa158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190611c00565b905061076b610766826060015187610f0d90919063ffffffff16565b610f44565b6107759083611e60565b8151604083015191935061078b91879190610f5a565b6107959083611e60565b95945050505050565b815160408301516000916107b491889190610f5a565b905080826000018181516107c89190611e60565b90525060608301516000906107e290610766908990610f0d565b905080836000018181516107f69190611e60565b9052508351600288810182905560208087015160038b0181905560408089015160048d018190556060808b015160058f018190558e5484516101008204890b815264010000000090910490970b95870195909552858301899052850195909552608084019190915260a083019390935260c0820152905163ffffffff87169188917fb9b041b729bca1f1535dde5369cddca43b655bbc9dbd3e5878047a06e11a45c79181900360e00190a38654604080516101008304600290810b825264010000000090930490920b6020830152810182905263ffffffff86169087907f8415d777c210eb5ec128f3ed52b314fc5c06eb3a464c58fa8f06a56aea5e7442906060015b60405180910390a350505050505050565b8054600090819061092290610100900460020b610f94565b835490915060009061093e90640100000000900460020b610f94565b9050600084600101541261097f57836001015461097583838760000160079054906101000a90046001600160801b031660016112b7565b6106199190611ea0565b600184015461099090600019611eb7565b84546109b19084908490600160381b90046001600160801b031660016112b7565b6106199190611f3e565b63ffffffff8416600090815260208290526040812060020154819081906001600160a01b03169050610a0e6040518060800160405280600081526020016000815260200160008152602001600081525090565b600087600f0b1315610ad8578954604051631dce5fcf60e01b81526101008204600290810b600483015264010000000090920490910b60248201526001600160801b038816604482015260009081906001600160a01b03851690631dce5fcf9060640160c0604051808303816000875af1158015610a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab49190611f56565b94509092509050610ac482610f44565b9550610acf81610f44565b94505050610bd5565b895460009081906001600160a01b0385169063a34123a7906101008104600290810b916401000000009004900b610b0e8d611f8c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152600293840b60048201529190920b60248201526001600160801b03909116604482015260640160c0604051808303816000875af1158015610b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba39190611f56565b94509092509050610bb382610f44565b610bbc90611fbb565b9550610bc781610f44565b610bd090611fbb565b945050505b610be28a8a8a848a61079e565b8286600001818151610bf49190611e21565b905250602086018051859190610c0b908390611e21565b90525063ffffffff8816600090815260208690526040812060010154610c39906001600160a01b0316611380565b9050610c5a8b8b8b8b85610c4c8b611fbb565b610c558b611fbb565b6113f1565b6000610c678c8383610d64565b5060018d0154909150610c7a9082611e21565b88604001818151610c8b9190611e60565b9052506000600f8a900b1315610ce8578b5489908d90600790610cbf908490600160381b90046001600160801b0316611fd7565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610d44565b600089600f0b1215610d4457610cfd89611f8c565b8c548d90600790610d1f908490600160381b90046001600160801b0316612002565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b610d4e8682611e60565b8c60010181905550505050505050505050505050565b825460009081908190610d7e90610100900460020b610f94565b8654909150600090610d9a90640100000000900460020b610f94565b9050856001600160a01b038084169082161015610db8575081610dd5565b816001600160a01b0316876001600160a01b03161115610dd55750805b8754610df9906107669083908590600160381b90046001600160801b03168a6112b7565b9450610e2161076684838b60000160079054906101000a90046001600160801b03168a61144e565b9350505050935093915050565b8054600090610100900460020b15158061036557505054640100000000900460020b151590565b60006401000276a36001600160a01b0383161080610e90575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03831610155b15610ebd57604051635d236c4560e01b81526001600160a01b038316600482015260240160405180910390fd5b610365826114be565b6000610eef61076660008612610edc5785610ee8565b610ee886600019611eb7565b85856114d9565b90506000841215610f0657610f0381611fbb565b90505b9392505050565b81546005830154600091610f0691600160381b9091046001600160801b031690600160801b90610f3d9086611ea0565b91906114d9565b6000600160ff1b8210610f5657600080fd5b5090565b6002830154600384015460048501548554600093610f8b9387938793600160381b90046001600160801b031661158b565b610f0390611fbb565b60008060008360020b12610fab578260020b610fb3565b8260020b6000035b9050620d89e8811115610fd9576040516315e4079d60e11b815260040160405180910390fd5b600081600116600003610ff057600160801b611002565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611036576ffff97272373d413259a46990580e213a0260801c5b6004821615611055576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611074576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611093576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156110b2576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156110d1576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156110f0576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611110576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611130576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611150576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611170576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611190576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156111b0576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156111d0576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156111f0576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611211576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611231576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611250576d2216e584f5fa1ea926041bedfe980260801c5b6208000082161561126d576b048a170391f7dc42444e8fa20260801c5b60008460020b131561128e57806000198161128a5761128a61202a565b0490505b6401000000008106156112a25760016112a5565b60005b60ff16602082901c0192505050919050565b6000836001600160a01b0316856001600160a01b031611156112d7579293925b7bffffffffffffffffffffffffffffffff000000000000000000000000606084901b166001600160a01b03868603811690871661131357600080fd5b8361134957866001600160a01b03166113368383896001600160a01b03166114d9565b816113435761134361202a565b04611375565b6113756113608383896001600160a01b03166115b3565b886001600160a01b0316808204910615150190565b979650505050505050565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156113c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e49190612040565b5094979650505050505050565b865460405163ffffffff87169188917f90ebe5c3d0a3bbd59fb51797eff156440d75c86a623dddef804547362e66595a916108f9916101008204600290810b92640100000000810490910b918b9160ff16908a908a908d906120e2565b6000836001600160a01b0316856001600160a01b0316111561146e579293925b8161149b57611496836001600160801b03168686036001600160a01b0316600160601b6114d9565b610795565b610795836001600160801b03168686036001600160a01b0316600160601b6115b3565b60006103656001600160a01b03831680680100000000000000005b6000808060001985870985870292508281108382030391505080600003611512576000841161150757600080fd5b508290049050610f06565b80841161151e57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b600061137582600160801b6115a28888888d6115f3565b6115ac908a611e21565b9190611618565b60006115c08484846114d9565b9050600082806115d2576115d261202a565b8486091115610f065760001981106115e957600080fd5b6001019392505050565b600061160e6116028684611e21565b8590600160801b611656565b6107959084611e60565b6000611625848484610ec6565b9050600081128015611645575061164561163e856116b3565b84846116be565b15610f0657610f0360001982611e60565b6000600181808061166788856116d7565b9450925061167587856116d7565b9450915061168386856116d7565b945090506116956107668484846114d9565b9450836116a8576116a585611fbb565b94505b505050509392505050565b600061036582611701565b60008183850980156116cf57600191505b509392505050565b60008060008412156116f6579115916116ef84611fbb565b91506116fa565b8391505b5092909150565b6000808213610f565761171382611fbb565b610365565b6001600160a01b038116811461049e57600080fd5b60006020828403121561173f57600080fd5b8135610f0681611718565b8060020b811461049e57600080fd5b6000806040838503121561176c57600080fd5b82356117778161174a565b915060208301356117878161174a565b809150509250929050565b600381106117b057634e487b7160e01b600052602160045260246000fd5b9052565b61012081016117c3828c611792565b8960020b60208301528860020b60408301526001600160801b03881660608301528660808301528560a08301528460c08301528360e0830152826101008301529a9950505050505050505050565b6000610140828403121561182457600080fd5b50919050565b60006101a0820190506001600160a01b03808916835280881660208401525061ffff80875116604084015280602088015116606084015280604088015116608084015250606086015161188360a084018261ffff169052565b50608086015161ffff811660c08401525060a086015161ffff811660e08401525060c086015167ffffffffffffffff81166101008401525060e086015167ffffffffffffffff811661012084015250846101408301528361016083015282610180830152979650505050505050565b600080600080600085870361018081121561190c57600080fd5b6101008082121561191c57600080fd5b969896890135975050506101208701359461014088013594506101608801359350915050565b60006020828403121561195457600080fd5b813580600f0b8114610f0657600080fd5b61ffff8116811461049e57600080fd5b6000813561036581611965565b801515811461049e57600080fd5b6000813561036581611982565b6000813561036581611718565b81356119b581611718565b81546001600160a01b0319166001600160a01b0382161782555060208201356119dd81611718565b6001820180546001600160a01b0319166001600160a01b038316179055506040820135611a0981611718565b6002820180546001600160a01b0319166001600160a01b03831617905550600381016060830135611a3981611965565b815461ffff191661ffff8216178255506080830135611a5781611965565b815463ffff00001916601082901b63ffff0000161782555060a0830135611a7d81611965565b815465ffff000000001916602082901b65ffff00000000161782555060c083013563ffffffff81168114611ab057600080fd5b815469ffffffff000000000000191660309190911b69ffffffff00000000000016178155611b0f611ae360e08501611990565b8280546aff00000000000000000000191691151560501b6aff0000000000000000000016919091179055565b611b4d611b1f6101008501611990565b8280546bff0000000000000000000000191691151560581b6bff000000000000000000000016919091179055565b611b87611b5d610120850161199d565b82546bffffffffffffffffffffffff1660609190911b6bffffffffffffffffffffffff1916178255565b505050565b600060808284031215611b9e57600080fd5b6040516080810181811067ffffffffffffffff82111715611bcf57634e487b7160e01b600052604160045260246000fd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600060808284031215611c1257600080fd5b610f068383611b8c565b6000813567ffffffffffffffff8116811461036557600080fd5b8135611c4181611965565b815461ffff191661ffff8216178255506020820135611c5f81611965565b815463ffff00001916601082901b63ffff000016178255506040820135611c8581611965565b815465ffff000000001916602082901b65ffff0000000016178255506060820135611caf81611965565b815467ffff0000000000008260301b1691508167ffff0000000000001982161783556080840135611cdf81611965565b69ffff00000000000000008160401b168369ffffffff00000000000019841617178455505050611d3e611d1460a08401611975565b82546bffff00000000000000000000191660509190911b6bffff0000000000000000000016178255565b611d92611d4d60c08401611c1c565b82547fffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff1660609190911b73ffffffffffffffff00000000000000000000000016178255565b610377611da160e08401611c1c565b82547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b7bffffffffffffffff000000000000000000000000000000000000000016178255565b600060208284031215611e0057600080fd5b8151610f0681611718565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b850184121615611e3f57611e3f611e0b565b836001600160ff1b03018313811615611e5a57611e5a611e0b565b50500390565b6000808212826001600160ff1b0303841381151615611e8157611e81611e0b565b600160ff1b8390038412811615611e9a57611e9a611e0b565b50500190565b600082821015611eb257611eb2611e0b565b500390565b60006001600160ff1b03600084136000841385830485118282161615611edf57611edf611e0b565b600160ff1b6000871282811687830589121615611efe57611efe611e0b565b60008712925087820587128484161615611f1a57611f1a611e0b565b87850587128184161615611f3057611f30611e0b565b505050929093029392505050565b60008219821115611f5157611f51611e0b565b500190565b600080600060c08486031215611f6b57600080fd5b8351925060208401519150611f838560408601611b8c565b90509250925092565b600081600f0b6f7fffffffffffffffffffffffffffffff198103611fb257611fb2611e0b565b60000392915050565b6000600160ff1b8201611fd057611fd0611e0b565b5060000390565b60006001600160801b03808316818516808303821115611ff957611ff9611e0b565b01949350505050565b60006001600160801b038381169083168181101561202257612022611e0b565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600080600080600080600060e0888a03121561205b57600080fd5b875161206681611718565b60208901519097506120778161174a565b604089015190965061208881611965565b606089015190955061209981611965565b60808901519094506120aa81611965565b60a089015190935060ff811681146120c157600080fd5b60c08901519092506120d281611982565b8091505092959891949750929550565b600288810b825287900b6020820152600f86900b604082015260e0810161210c6060830187611792565b8460808301528360a08301526001600160a01b03831660c08301529897505050505050505056fea2646970667358221220108dd49a675544c5662d7f6513d33ac5600165e4b82c140d3f098764c46f9e6f64736f6c634300080d0033608060405234801561001057600080fd5b50610add806100206000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80636719578c116100cd578063a3a1e7e911610081578063d74dcaca11610066578063d74dcaca14610366578063ea6e4e521461039f578063fca6fbf2146103e757600080fd5b8063a3a1e7e914610313578063a3c35e2c1461023957600080fd5b806386c8e9a7116100b257806386c8e9a71461032a57806397c71faf14610340578063a34123a71461035357600080fd5b80636719578c146102e85780637779815c1461031357600080fd5b80632a99a79211610124578063512403361161010957806351240336146102c257806356d15a88146102d35780635e622abc146102e157600080fd5b80632a99a792146102395780634c2ebc581461025957600080fd5b806302dc9951146101565780630d8f6f461461017e578063195cd92c1461019f5780631dce5fcf14610217575b600080fd5b6001546101659062ffffff1681565b60405162ffffff90911681526020015b60405180910390f35b61019161018c3660046106e5565b610400565b604051908152602001610175565b6101b26101ad366004610728565b610415565b6040516101759190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a08301516001600160a01b0380821660a08501528060c08601511660c0850152505092915050565b61022a61022536600461077a565b6104c3565b604051610175939291906107c2565b61024c610247366004610806565b610594565b6040516101759190610839565b6102c0610267366004610864565b60408051608081018252948552602080860194855285820193845260608601928352600297880b600090815280825282812097890b81529690529094209251835590516001830155519281019290925551600390910155565b005b6102c06102d03660046108b9565b50565b6102c06102d03660046108d4565b6000610191565b6003546102fb906001600160a01b031681565b6040516001600160a01b039091168152602001610175565b701400000000000000000000000000000000610191565b600154610165906301000000900462ffffff1681565b61019161034e3660046106e5565b610611565b61022a61036136600461077a565b61061f565b6102c06103743660046108ec565b600293840b6000908152602085815260408083209590960b8252939093529290912090815560010155565b6102c06103ad36600461092e565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600154610165906601000000000000900462ffffff1681565b600061040f82610f9f19610961565b92915050565b6104676040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b8315156000841303610499576020810183905261048383610a01565b61048f90610fa0610961565b60408201526104bc565b610fa06104a584610a01565b6104af9190610a1d565b6020820152604081018390525b9392505050565b6000806104f16040518060800160405280600081526020016000815260200160008152602001600081525090565b836001600160801b03166004600082825461050c9190610a59565b9091555050600286810b6000908152602082815260408083209389900b83529290522060010154610547906001600160801b03861690610a71565b600287810b600090815260208281526040808320938a900b8352929052205490935061057d906001600160801b03861690610a71565b91506105898686610594565b905093509350939050565b6105bf6040518060800160405280600081526020016000815260200160008152602001600081525090565b50600291820b60009081526020818152604080832093850b8352928152908290208251608081018452815481526001820154928101929092529283015491810191909152600390910154606082015290565b600061040f610fa083610a1d565b60008061064d6040518060800160405280600081526020016000815260200160008152602001600081525090565b836001600160801b0316600460008282546106689190610a90565b9091555050600286810b6000908152602082815260408083209389900b835292905220546106a0906001600160801b03861690610a71565b600287810b600090815260208281526040808320938a900b835292905220600101549092506106d9906001600160801b03861690610a71565b92506105898686610594565b6000602082840312156106f757600080fd5b5035919050565b8035801515811461070e57600080fd5b919050565b6001600160a01b03811681146102d057600080fd5b60008060006060848603121561073d57600080fd5b610746846106fe565b925060208401359150604084013561075d81610713565b809150509250925092565b8035600281900b811461070e57600080fd5b60008060006060848603121561078f57600080fd5b61079884610768565b92506107a660208501610768565b915060408401356001600160801b038116811461075d57600080fd5b8381526020810183905260c081016107fe6040830184805182526020810151602083015260408101516040830152606081015160608301525050565b949350505050565b6000806040838503121561081957600080fd5b61082283610768565b915061083060208401610768565b90509250929050565b815181526020808301519082015260408083015190820152606080830151908201526080810161040f565b60008060008060008060c0878903121561087d57600080fd5b61088687610768565b955061089460208801610768565b95989597505050506040840135936060810135936080820135935060a0909101359150565b6000602082840312156108cb57600080fd5b6104bc826106fe565b600060c082840312156108e657600080fd5b50919050565b6000806000806080858703121561090257600080fd5b61090b85610768565b935061091960208601610768565b93969395505050506040820135916060013590565b60006020828403121561094057600080fd5b81356104bc81610713565b634e487b7160e01b600052601160045260246000fd5b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156109a2576109a261094b565b600160ff1b60008712828116878305891216156109c1576109c161094b565b600087129250878205871284841616156109dd576109dd61094b565b878505871281841616156109f3576109f361094b565b505050929093029392505050565b6000600160ff1b8201610a1657610a1661094b565b5060000390565b600082610a3a57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610a5457610a5461094b565b500590565b60008219821115610a6c57610a6c61094b565b500190565b6000816000190483118215151615610a8b57610a8b61094b565b500290565b600082821015610aa257610aa261094b565b50039056fea2646970667358221220263efaa3aa4f2f1eabb69c985bfda5e99c93e51dbf8b24c9c9e3453c8f3ab94464736f6c634300080d0033';

type LiquidityPositionTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityPositionTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityPositionTest__factory extends ContractFactory {
  constructor(...args: LiquidityPositionTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityPositionTest> {
    return super.deploy(overrides || {}) as Promise<LiquidityPositionTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LiquidityPositionTest {
    return super.attach(address) as LiquidityPositionTest;
  }
  override connect(signer: Signer): LiquidityPositionTest__factory {
    return super.connect(signer) as LiquidityPositionTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityPositionTestInterface {
    return new utils.Interface(_abi) as LiquidityPositionTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityPositionTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LiquidityPositionTest;
  }
}
