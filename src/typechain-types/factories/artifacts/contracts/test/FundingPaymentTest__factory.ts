/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  FundingPaymentTest,
  FundingPaymentTestInterface,
} from '../../../../artifacts/contracts/test/FundingPaymentTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumA',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'extrapolatedSumAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumALatestX128',
        type: 'int256',
      },
    ],
    name: 'extrapolatedSumFpX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fpGlobal',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fundingRateOverrideX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'nextAX128',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: '_fundingRateOverrideX128',
        type: 'int256',
      },
    ],
    name: 'setFundingRateOverrideX128',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'vTokenAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'liquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'update',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040526001600160ff1b0360045534801561001b57600080fd5b506108428061002b6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80633b231e011161005b5780633b231e01146100d05780636c544335146100d95780637cfee5a81461011f578063951d34f01461013257600080fd5b8063115635da146100825780631d14114f146100a857806326559c7a146100bb575b600080fd5b6100956100903660046105a3565b610145565b6040519081526020015b60405180910390f35b6100956100b63660046105f1565b610161565b6100ce6100c9366004610633565b600455565b005b61009560045481565b6000546001546002546003546100f79392919065ffffffffffff1684565b6040805194855260208501939093529183015265ffffffffffff16606082015260800161009f565b6100ce61012d36600461064c565b61017b565b61009561014036600461067b565b61019b565b600061015786868686866004546101a9565b9695505050505050565b6000610172858585856004546101cd565b95945050505050565b6004546101949060009087908790879087908790610226565b5050505050565b600061017285858585610339565b60006101b886868686866101cd565b6101c290886106c3565b979650505050505050565b60006001600160ff1b0382146101f9576101e78686610703565b6101f49060050b8361072a565b610157565b6101576102068787610703565b65ffffffffffff166201518061021f86888282826107b1565b919061035e565b60038701546000906102439065ffffffffffff16868686866101cd565b600189015490915061025b908290600160801b6103aa565b88600201600082825461026e91906106c3565b90915550508754819089906000906102879084906106c3565b9091555061029c905087600160801b886103f8565b8860010160008282546102af91906106c3565b909155505060038801805465ffffffffffff871665ffffffffffff199091168117909155604080518a54815260018b0154602082015260028b01548183015260608101929092526080820186905260a08201859052517faa55fabd6f264910ebc37d1f213e504b0952aeed471eac51bb24a792cf40ce789181900360c00190a15050505050505050565b600061035461034886846107b1565b8590600160801b6103f8565b61017290846106c3565b600061038c610387600086126103745785610380565b6103808660001961072a565b8585610455565b610507565b905060008412156103a3576103a0816107f0565b90505b9392505050565b60006103b78484846103f8565b90506000811280156103e757506103e76103d08561051d565b6103d98561051d565b6103e28561051d565b61052e565b156103a3576103a0600019826106c3565b600060018180806104098885610547565b945092506104178785610547565b945091506104258685610547565b94509050610437610387848484610455565b94508361044a57610447856107f0565b94505b505050509392505050565b600080806000198587098587029250828110838203039150508060000361048e576000841161048357600080fd5b5082900490506103a3565b80841161049a57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000600160ff1b821061051957600080fd5b5090565b600061052882610571565b92915050565b600081838509801561053f57600191505b509392505050565b60008060008412156105665791159161055f846107f0565b915061056a565b8391505b5092909150565b600080821361051957610583826107f0565b610528565b803565ffffffffffff8116811461059e57600080fd5b919050565b600080600080600060a086880312156105bb57600080fd5b853594506105cb60208701610588565b93506105d960408701610588565b94979396509394606081013594506080013592915050565b6000806000806080858703121561060757600080fd5b61061085610588565b935061061e60208601610588565b93969395505050506040820135916060013590565b60006020828403121561064557600080fd5b5035919050565b600080600080600060a0868803121561066457600080fd5b85359450602086013593506105d960408701610588565b6000806000806080858703121561069157600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b6000808212826001600160ff1b03038413811516156106e4576106e46106ad565b600160ff1b83900384128116156106fd576106fd6106ad565b50500190565b600065ffffffffffff83811690831681811015610722576107226106ad565b039392505050565b60006001600160ff1b03600084136000841385830485118282161615610752576107526106ad565b600160ff1b6000871282811687830589121615610771576107716106ad565b6000871292508782058712848416161561078d5761078d6106ad565b878505871281841616156107a3576107a36106ad565b505050929093029392505050565b60008083128015600160ff1b8501841216156107cf576107cf6106ad565b836001600160ff1b030183138116156107ea576107ea6106ad565b50500390565b6000600160ff1b8201610805576108056106ad565b506000039056fea26469706673582212208adcb0c8fa1f01ec03b292540f571f21be73bffef3404f503b5373507a86b8db64736f6c634300080d0033';

type FundingPaymentTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundingPaymentTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundingPaymentTest__factory extends ContractFactory {
  constructor(...args: FundingPaymentTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundingPaymentTest> {
    return super.deploy(overrides || {}) as Promise<FundingPaymentTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FundingPaymentTest {
    return super.attach(address) as FundingPaymentTest;
  }
  override connect(signer: Signer): FundingPaymentTest__factory {
    return super.connect(signer) as FundingPaymentTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundingPaymentTestInterface {
    return new utils.Interface(_abi) as FundingPaymentTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FundingPaymentTest {
    return new Contract(address, _abi, signerOrProvider) as FundingPaymentTest;
  }
}
