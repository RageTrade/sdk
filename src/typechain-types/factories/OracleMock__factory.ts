/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { OracleMock, OracleMockInterface } from '../OracleMock';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'IllegalSqrtPrice',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'y_target',
        type: 'uint256',
      },
      {
        internalType: 'uint160',
        name: 'x_lower',
        type: 'uint160',
      },
      {
        internalType: 'uint160',
        name: 'x_upper',
        type: 'uint160',
      },
    ],
    name: 'SolutionOutOfBounds',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    name: 'getTwapPriceX128',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    name: 'getTwapSqrtPriceX96',
    outputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_priceX128',
        type: 'uint256',
      },
    ],
    name: 'setPriceX128',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: '_sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'setSqrtPriceX96',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061001e600160801b600055565b6105018061002d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063726416331461005157806372b6bb3814610066578063c9c32f2a14610096578063dd86c101146100a9575b600080fd5b61006461005f3660046103ef565b600055565b005b610079610074366004610408565b6100cc565b6040516001600160a01b0390911681526020015b60405180910390f35b6100646100a436600461042e565b6100df565b6100be6100b7366004610408565b5060005490565b60405190815260200161008d565b60006100d96000546100f7565b92915050565b6100f1816001600160a01b0316610198565b60005550565b600061012a610201836401000276a3610125600173fffd8963efd1fc6a506488495d951d5263988d2661046d565b610220565b90506401000276a36001600160a01b0382161080610165575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03821610155b1561019357604051635d236c4560e01b81526001600160a01b03821660048201526024015b60405180910390fd5b919050565b60006401000276a36001600160a01b03831610806101d3575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03831610155b156101fc57604051635d236c4560e01b81526001600160a01b038316600482015260240161018a565b6100d9825b60006100d96001600160a01b038316806801000000000000000061033c565b600080610230848763ffffffff16565b90506000610241848863ffffffff16565b90508186108061025057508086115b156102885760405163f7b6b2e960e01b8152600481018790526001600160a01b0380871660248301528516604482015260640161018a565b6000805b6001610298888861046d565b6001600160a01b031611156102f65760026102b3888861046d565b6102bd9190610495565b6102c790886104c9565b90506102d6818a63ffffffff16565b9150878211156102eb5780955081925061028c565b80965081935061028c565b856001600160a01b0316876001600160a01b031614158015610323575087610321878b63ffffffff16565b145b61032d578661032f565b855b9998505050505050505050565b600080806000198587098587029250828110838203039150508060001415610376576000841161036b57600080fd5b5082900490506103e8565b80841161038257600080fd5b60008486880960018619810187169687900496828603819004959092119093036000829003919091049092019190910291909117600260038502811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b60006020828403121561040157600080fd5b5035919050565b60006020828403121561041a57600080fd5b813563ffffffff811681146103e857600080fd5b60006020828403121561044057600080fd5b81356001600160a01b03811681146103e857600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160a01b038381169083168181101561048d5761048d610457565b039392505050565b60006001600160a01b03838116806104bd57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160a01b038281168482168083038211156104eb576104eb610457565b0194935050505056fea164736f6c634300080a000a';

type OracleMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleMock__factory extends ContractFactory {
  constructor(...args: OracleMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OracleMock> {
    return super.deploy(overrides || {}) as Promise<OracleMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OracleMock {
    return super.attach(address) as OracleMock;
  }
  connect(signer: Signer): OracleMock__factory {
    return super.connect(signer) as OracleMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleMockInterface {
    return new utils.Interface(_abi) as OracleMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleMock {
    return new Contract(address, _abi, signerOrProvider) as OracleMock;
  }
}
