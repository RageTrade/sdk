/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { TickTest, TickTestInterface } from '../TickTest';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickNext',
        type: 'int24',
      },
    ],
    name: 'cross',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fpGlobal',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumAX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpX128',
        type: 'int256',
      },
      {
        internalType: 'uint48',
        name: 'timestampLast',
        type: 'uint48',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickCurrent',
        type: 'int24',
      },
    ],
    name: 'getFeeGrowthInside',
    outputs: [
      {
        internalType: 'uint256',
        name: 'extendedFeeGrowthInside',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickCurrent',
        type: 'int24',
      },
    ],
    name: 'getFundingPaymentGrowthInside',
    outputs: [
      {
        internalType: 'int256',
        name: 'fundingPaymentGrowth',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickLower',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickUpper',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickCurrent',
        type: 'int24',
      },
    ],
    name: 'getNetPositionInside',
    outputs: [
      {
        internalType: 'int256',
        name: 'netPositionGrowthX128',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int256',
        name: 'tokenAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'liquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint48',
        name: 'blockTimestamp',
        type: 'uint48',
      },
      {
        internalType: 'uint256',
        name: 'realPriceX128',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'virtualPriceX128',
        type: 'uint256',
      },
    ],
    name: 'registerTrade',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_extendedFeeGrowthOutsideX128',
        type: 'uint256',
      },
    ],
    name: 'setFeeGrowthOutsideX128',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'int256',
            name: 'sumAX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpX128',
            type: 'int256',
          },
          {
            internalType: 'uint48',
            name: 'timestampLast',
            type: 'uint48',
          },
        ],
        internalType: 'struct FundingPayment.Info',
        name: 'fpGlobal_',
        type: 'tuple',
      },
    ],
    name: 'setFpGlobal',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tickIndex',
        type: 'int24',
      },
      {
        components: [
          {
            internalType: 'int256',
            name: 'sumALastX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumBOutsideX128',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'sumFpOutsideX128',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'sumFeeOutsideX128',
            type: 'uint256',
          },
        ],
        internalType: 'struct Tick.Info',
        name: 'tick',
        type: 'tuple',
      },
    ],
    name: 'setTick',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'sumFeeGlobalX128',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: '',
        type: 'int24',
      },
    ],
    name: 'ticksExtended',
    outputs: [
      {
        internalType: 'int256',
        name: 'sumALastX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumBOutsideX128',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'sumFpOutsideX128',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'sumFeeOutsideX128',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'vPool',
    outputs: [
      {
        internalType: 'contract IUniswapV3Pool',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600680546001600160a01b0319166001600160a01b039290921691909117905561006c565b6103aa80610cbd83390190565b610c428061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063aac9125111610071578063aac91251146101cd578063c04b98c4146101e0578063c13a44f6146101e9578063d31834e314610230578063d5a8399514610243578063f255c94b1461025657600080fd5b80633e89175b146100b957806348aaa8c0146100ce57806348effdd7146101285780636719578c1461013b5780636c54433514610166578063a885d285146101ac575b600080fd5b6100cc6100c73660046108dd565b600555565b005b6101036100dc36600461090d565b60006020819052908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b6100cc610136366004610928565b610269565b60065461014e906001600160a01b031681565b6040516001600160a01b03909116815260200161011f565b6001546002546003546004546101849392919065ffffffffffff1684565b6040805194855260208501939093529183015265ffffffffffff16606082015260800161011f565b6101bf6101ba366004610940565b61027b565b60405190815260200161011f565b6101bf6101db366004610940565b6102cd565b6101bf60055481565b6100cc6101f7366004610983565b600291820b6000908152602081815260409182902083518155908301516001820155908201519281019290925560600151600390910155565b6100cc61023e36600461090d565b61031f565b6101bf610251366004610940565b610365565b6100cc610264366004610a2f565b6103b8565b8060016102768282610a78565b505050565b60408051608081018252600154815260025460208201526003549181019190915260045465ffffffffffff1660608201526005546000916102c39183918791879187916103ce565b5095945050505050565b60408051608081018252600154815260025460208201526003549181019190915260045465ffffffffffff1660608201526005546000916103159183918791879187916103ce565b9695505050505050565b60408051608081018252600154815260025460208201526003549181019190915260045465ffffffffffff16606082015260055461036291600091849190610526565b50565b60408051608081018252600154815260025460208201526003549181019190915260045465ffffffffffff1660608201526005546000916103ad9183918791879187916103ce565b509095945050505050565b6103c7600186868686866105a7565b5050505050565b600285810b60009081526020889052604080822087840b835290822060018201548254948301548751949586958695949392869261040f929091859161065d565b90506000846003015490508a60020b8d60020b131561045957828a602001516104389190610ad5565b9250818a6040015161044a9190610ad5565b9150610456818a610b14565b90505b6001840154845460028601548c5160009261047892909185919061065d565b90506000866003015490508d60020b8f60020b136104c157828d602001516104a09190610ad5565b9250818d604001516104b29190610ad5565b91506104be818d610b14565b90505b82868e602001516104d29190610ad5565b6104dc9190610ad5565b9a5081858e604001516104ef9190610ad5565b6104f99190610ad5565b995080610506858e610b14565b6105109190610b14565b9850505050505050505096509650969350505050565b600283810b60009081526020869052604081208054600182015493820154865192946105549390919061065d565b845183556001830154602086015191925061056e91610ad5565b60018301556040840151610583908290610ad5565b600283015560038201546105979084610b14565b8260030181905550505050505050565b60038601546000906105c39065ffffffffffff1685858561068b565b60018801549091506105db908290600160801b6106ba565b8760020160008282546105ee9190610b2b565b9091555050865481908890600090610607908490610b2b565b9091555061061c905086600160801b87610712565b87600101600082825461062f9190610b2b565b90915550505050600394909401805465ffffffffffff191665ffffffffffff92909216919091179055505050565b600061067861066c8684610ad5565b8590600160801b610712565b6106829084610b2b565b95945050505050565b600061068261069a8686610b6c565b65ffffffffffff16620151806106b38587828282610ad5565b9190610774565b60006106c7848484610712565b90506000811280156106f757506106f76106e0856107ae565b6106e9856107ae565b6106f2856107ae565b6107bf565b1561070b5761070860001982610b2b565b90505b9392505050565b6000600181808061072388856107d8565b9450925061073187856107d8565b9450915061073f86856107d8565b94509050610756610751848484610802565b6108b0565b9450836107695761076685610b93565b94505b505050509392505050565b600061079a600085126107875784610793565b61079385600019610bb0565b8484610802565b9050600084121561070b5761070881610b93565b60006107b9826108c6565b92915050565b60008183850980156107d057600191505b509392505050565b60008060008412156107f7579115916107f084610b93565b91506107fb565b8391505b5092909150565b60008080600019858709858702925082811083820303915050806000141561083c576000841161083157600080fd5b50829004905061070b565b80841161084857600080fd5b600084868809851960019081018716968790046003810260029081188083028203028083028203028083028203028083028203028083028203029182029003026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000600160ff1b82106108c257600080fd5b5090565b60008082136108c2576108d882610b93565b6107b9565b6000602082840312156108ef57600080fd5b5035919050565b8035600281900b811461090857600080fd5b919050565b60006020828403121561091f57600080fd5b61070b826108f6565b60006080828403121561093a57600080fd5b50919050565b60008060006060848603121561095557600080fd5b61095e846108f6565b925061096c602085016108f6565b915061097a604085016108f6565b90509250925092565b60008082840360a081121561099757600080fd5b6109a0846108f6565b92506080601f19820112156109b457600080fd5b506040516080810181811067ffffffffffffffff821117156109e657634e487b7160e01b600052604160045260246000fd5b806040525060208401358152604084013560208201526060840135604082015260808401356060820152809150509250929050565b65ffffffffffff8116811461036257600080fd5b600080600080600060a08688031215610a4757600080fd5b85359450602086013593506040860135610a6081610a1b565b94979396509394606081013594506080013592915050565b813581556020820135600182015560408201356002820155600381016060830135610aa281610a1b565b815465ffffffffffff191665ffffffffffff919091161790555050565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b850184121615610af357610af3610abf565b6001600160ff1b0384018313811615610b0e57610b0e610abf565b50500390565b600082821015610b2657610b26610abf565b500390565b600080821280156001600160ff1b0384900385131615610b4d57610b4d610abf565b600160ff1b8390038412811615610b6657610b66610abf565b50500190565b600065ffffffffffff83811690831681811015610b8b57610b8b610abf565b039392505050565b6000600160ff1b821415610ba957610ba9610abf565b5060000390565b60006001600160ff1b0381841382841380821686840486111615610bd657610bd6610abf565b600160ff1b6000871282811687830589121615610bf557610bf5610abf565b60008712925087820587128484161615610c1157610c11610abf565b87850587128184161615610c2757610c27610abf565b50505092909302939250505056fea164736f6c634300080a000a608060405234801561001057600080fd5b5061038a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063461413191461005c5780637a79037514610078578063ecb217ea14610093578063f305839914610150578063f30dba9314610159575b600080fd5b61006560025481565b6040519081526020015b60405180910390f35b61009161008636600461022d565b600191909155600255565b005b6100916100a13660046102a1565b600298890b60009081526020819052604090206001600160801b03978816600160801b029790981696909617875560018701949094559585019190915560039093018054921515600160f81b026001600160f81b0363ffffffff909316600160d81b02929092166001600160d81b036001600160a01b03909616600160381b026001600160d81b031990941666ffffffffffffff90951694909417929092179390931691909117919091179055565b61006560015481565b6101d161016736600461035b565b60006020819052908152604090208054600182015460028301546003909301546001600160801b03831693600160801b909304600f0b9290600681900b90600160381b81046001600160a01b031690600160d81b810463ffffffff1690600160f81b900460ff1688565b604080516001600160801b039099168952600f9790970b602089015295870194909452606086019290925260060b60808501526001600160a01b031660a084015263ffffffff1660c0830152151560e08201526101000161006f565b6000806040838503121561024057600080fd5b50508035926020909101359150565b8035600281900b811461026157600080fd5b919050565b80356001600160a01b038116811461026157600080fd5b803563ffffffff8116811461026157600080fd5b8035801515811461026157600080fd5b60008060008060008060008060006101208a8c0312156102c057600080fd5b6102c98a61024f565b985060208a01356001600160801b03811681146102e557600080fd5b975060408a0135600f81900b81146102fc57600080fd5b965060608a0135955060808a0135945060a08a0135600681900b811461032157600080fd5b935061032f60c08b01610266565b925061033d60e08b0161027d565b915061034c6101008b01610291565b90509295985092959850929598565b60006020828403121561036d57600080fd5b6103768261024f565b939250505056fea164736f6c634300080a000a';

type TickTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TickTest__factory extends ContractFactory {
  constructor(...args: TickTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickTest> {
    return super.deploy(overrides || {}) as Promise<TickTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickTest {
    return super.attach(address) as TickTest;
  }
  connect(signer: Signer): TickTest__factory {
    return super.connect(signer) as TickTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickTestInterface {
    return new utils.Interface(_abi) as TickTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickTest {
    return new Contract(address, _abi, signerOrProvider) as TickTest;
  }
}
