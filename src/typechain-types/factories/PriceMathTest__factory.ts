/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PriceMathTest, PriceMathTestInterface } from '../PriceMathTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'IllegalSqrtPrice',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'y_target',
        type: 'uint256',
      },
      {
        internalType: 'uint160',
        name: 'x_lower',
        type: 'uint160',
      },
      {
        internalType: 'uint160',
        name: 'x_upper',
        type: 'uint160',
      },
    ],
    name: 'SolutionOutOfBounds',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'toPriceX128',
    outputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    name: 'toSqrtPriceX96',
    outputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061047e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063daa5e1701461003b578063f868ea021461006b575b600080fd5b61004e610049366004610369565b61008c565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e610079366004610382565b61009d565b604051908152602001610062565b6000610097826100a8565b92915050565b6000610097826100db565b6000610097610162836401000276a36100d6600173fffd8963efd1fc6a506488495d951d5263988d266103c1565b610181565b60006401000276a36001600160a01b0383161080610116575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03831610155b1561015d576040517f5d236c450000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024015b60405180910390fd5b610097825b60006100976001600160a01b03831680680100000000000000006102b6565b600080610191848763ffffffff16565b905060006101a2848863ffffffff16565b9050818610806101b157508086115b15610202576040517ff7b6b2e9000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b03808716602483015285166044820152606401610154565b6000805b600161021288886103c1565b6001600160a01b0316111561027057600261022d88886103c1565b61023791906103e9565b610241908861041d565b9050610250818a63ffffffff16565b91508782111561026557809550819250610206565b809650819350610206565b856001600160a01b0316876001600160a01b03161415801561029d57508761029b878b63ffffffff16565b145b6102a757866102a9565b855b9998505050505050505050565b60008080600019858709858702925082811083820303915050806000036102ef57600084116102e457600080fd5b508290049050610362565b8084116102fb57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60006020828403121561037b57600080fd5b5035919050565b60006020828403121561039457600080fd5b81356001600160a01b038116811461036257600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160a01b03838116908316818110156103e1576103e16103ab565b039392505050565b60006001600160a01b038084168061041157634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160a01b0380831681851680830382111561043f5761043f6103ab565b0194935050505056fea26469706673582212203e323954d3d4ce93c7b7611f4a6273cb4a8c97130eb814fd60513e6256982a5164736f6c634300080d0033';

type PriceMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriceMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PriceMathTest__factory extends ContractFactory {
  constructor(...args: PriceMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'PriceMathTest';
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PriceMathTest> {
    return super.deploy(overrides || {}) as Promise<PriceMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PriceMathTest {
    return super.attach(address) as PriceMathTest;
  }
  connect(signer: Signer): PriceMathTest__factory {
    return super.connect(signer) as PriceMathTest__factory;
  }
  static readonly contractName: 'PriceMathTest';
  public readonly contractName: 'PriceMathTest';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceMathTestInterface {
    return new utils.Interface(_abi) as PriceMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceMathTest {
    return new Contract(address, _abi, signerOrProvider) as PriceMathTest;
  }
}
