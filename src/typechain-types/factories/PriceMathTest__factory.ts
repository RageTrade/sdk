/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PriceMathTest, PriceMathTestInterface } from '../PriceMathTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'IllegalSqrtPrice',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'y_target',
        type: 'uint256',
      },
      {
        internalType: 'uint160',
        name: 'x_lower',
        type: 'uint160',
      },
      {
        internalType: 'uint160',
        name: 'x_upper',
        type: 'uint160',
      },
    ],
    name: 'SolutionOutOfBounds',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'toPriceX128',
    outputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    name: 'toSqrtPriceX96',
    outputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061044d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063daa5e1701461003b578063f868ea021461006b575b600080fd5b61004e610049366004610338565b61008c565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e610079366004610351565b61009d565b604051908152602001610062565b6000610097826100a8565b92915050565b6000610097826100db565b6000610097610149836401000276a36100d6600173fffd8963efd1fc6a506488495d951d5263988d26610390565b610168565b60006401000276a36001600160a01b0383161080610116575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03831610155b1561014457604051635d236c4560e01b81526001600160a01b03831660048201526024015b60405180910390fd5b610097825b60006100976001600160a01b0383168068010000000000000000610284565b600080610178848763ffffffff16565b90506000610189848863ffffffff16565b90508186108061019857508086115b156101d05760405163f7b6b2e960e01b8152600481018790526001600160a01b0380871660248301528516604482015260640161013b565b6000805b60016101e08888610390565b6001600160a01b0316111561023e5760026101fb8888610390565b61020591906103b8565b61020f90886103ec565b905061021e818a63ffffffff16565b915087821115610233578095508192506101d4565b8096508193506101d4565b856001600160a01b0316876001600160a01b03161415801561026b575087610269878b63ffffffff16565b145b6102755786610277565b855b9998505050505050505050565b6000808060001985870985870292508281108382030391505080600014156102be57600084116102b357600080fd5b508290049050610331565b8084116102ca57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60006020828403121561034a57600080fd5b5035919050565b60006020828403121561036357600080fd5b81356001600160a01b038116811461033157600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160a01b03838116908316818110156103b0576103b061037a565b039392505050565b60006001600160a01b03838116806103e057634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160a01b0382811684821680830382111561040e5761040e61037a565b0194935050505056fea26469706673582212203d74fc02320f0d6e9813310ef9bf908d490a178d0c8b2f03bd7f5a60f7be52fa64736f6c634300080c0033';

type PriceMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriceMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PriceMathTest__factory extends ContractFactory {
  constructor(...args: PriceMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'PriceMathTest';
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PriceMathTest> {
    return super.deploy(overrides || {}) as Promise<PriceMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PriceMathTest {
    return super.attach(address) as PriceMathTest;
  }
  connect(signer: Signer): PriceMathTest__factory {
    return super.connect(signer) as PriceMathTest__factory;
  }
  static readonly contractName: 'PriceMathTest';
  public readonly contractName: 'PriceMathTest';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceMathTestInterface {
    return new utils.Interface(_abi) as PriceMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceMathTest {
    return new Contract(address, _abi, signerOrProvider) as PriceMathTest;
  }
}
