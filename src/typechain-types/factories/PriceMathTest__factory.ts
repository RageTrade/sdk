/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PriceMathTest, PriceMathTestInterface } from '../PriceMathTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'IllegalSqrtPrice',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'y_target',
        type: 'uint256',
      },
      {
        internalType: 'uint160',
        name: 'x_lower',
        type: 'uint160',
      },
      {
        internalType: 'uint160',
        name: 'x_upper',
        type: 'uint160',
      },
    ],
    name: 'SolutionOutOfBounds',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    name: 'toPriceX128',
    outputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'priceX128',
        type: 'uint256',
      },
    ],
    name: 'toSqrtPriceX96',
    outputs: [
      {
        internalType: 'uint160',
        name: 'sqrtPriceX96',
        type: 'uint160',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610485806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063daa5e1701461003b578063f868ea021461006b575b600080fd5b61004e610049366004610399565b61008c565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e6100793660046103b2565b61009d565b604051908152602001610062565b6000610097826100a8565b92915050565b600061009782610149565b60006100db610149836401000276a36100d6600173fffd8963efd1fc6a506488495d951d5263988d266103f1565b6101ca565b90506401000276a36001600160a01b0382161080610116575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03821610155b1561014457604051635d236c4560e01b81526001600160a01b03821660048201526024015b60405180910390fd5b919050565b60006401000276a36001600160a01b0383161080610184575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03831610155b156101ad57604051635d236c4560e01b81526001600160a01b038316600482015260240161013b565b6100976001600160a01b03831680680100000000000000006102e6565b6000806101da848763ffffffff16565b905060006101eb848863ffffffff16565b9050818610806101fa57508086115b156102325760405163f7b6b2e960e01b8152600481018790526001600160a01b0380871660248301528516604482015260640161013b565b6000805b600161024288886103f1565b6001600160a01b031611156102a057600261025d88886103f1565b6102679190610419565b610271908861044d565b9050610280818a63ffffffff16565b91508782111561029557809550819250610236565b809650819350610236565b856001600160a01b0316876001600160a01b0316141580156102cd5750876102cb878b63ffffffff16565b145b6102d757866102d9565b855b9998505050505050505050565b600080806000198587098587029250828110838203039150508060001415610320576000841161031557600080fd5b508290049050610392565b80841161032c57600080fd5b60008486880960018619810187169687900496828603819004959092119093036000829003919091049092019190910291909117600260038502811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6000602082840312156103ab57600080fd5b5035919050565b6000602082840312156103c457600080fd5b81356001600160a01b038116811461039257600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160a01b0383811690831681811015610411576104116103db565b039392505050565b60006001600160a01b038381168061044157634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006001600160a01b0382811684821680830382111561046f5761046f6103db565b0194935050505056fea164736f6c634300080a000a';

type PriceMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriceMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PriceMathTest__factory extends ContractFactory {
  constructor(...args: PriceMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PriceMathTest> {
    return super.deploy(overrides || {}) as Promise<PriceMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PriceMathTest {
    return super.attach(address) as PriceMathTest;
  }
  connect(signer: Signer): PriceMathTest__factory {
    return super.connect(signer) as PriceMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceMathTestInterface {
    return new utils.Interface(_abi) as PriceMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceMathTest {
    return new Contract(address, _abi, signerOrProvider) as PriceMathTest;
  }
}
