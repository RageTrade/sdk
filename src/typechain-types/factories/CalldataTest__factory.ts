/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { CalldataTest, CalldataTestInterface } from '../CalldataTest';

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'calculateCostUnits',
    outputs: [
      {
        internalType: 'uint256',
        name: 'cost',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610180806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631570ea7d14610030575b600080fd5b61004361003e3660046100c2565b610055565b60405190815260200160405180910390f35b60006100618383610068565b9392505050565b6000805b828110156100bb57600084848381811061008857610088610134565b9050013560f81c60f81b6001600160f81b031916146100a85760106100ab565b60045b60ff16919091019060010161006c565b5092915050565b600080602083850312156100d557600080fd5b823567ffffffffffffffff808211156100ed57600080fd5b818501915085601f83011261010157600080fd5b81358181111561011057600080fd5b86602082850101111561012257600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220ff19aa5468dbf2a81943be9f7536083c73956afae10e1e61bc8caa8c0167403164736f6c634300080d0033';

type CalldataTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CalldataTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CalldataTest__factory extends ContractFactory {
  constructor(...args: CalldataTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'CalldataTest';
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CalldataTest> {
    return super.deploy(overrides || {}) as Promise<CalldataTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CalldataTest {
    return super.attach(address) as CalldataTest;
  }
  connect(signer: Signer): CalldataTest__factory {
    return super.connect(signer) as CalldataTest__factory;
  }
  static readonly contractName: 'CalldataTest';
  public readonly contractName: 'CalldataTest';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CalldataTestInterface {
    return new utils.Interface(_abi) as CalldataTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CalldataTest {
    return new Contract(address, _abi, signerOrProvider) as CalldataTest;
  }
}
