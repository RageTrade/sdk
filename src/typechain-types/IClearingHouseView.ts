/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace IClearingHouseStructures {
  export type CollateralDepositViewStruct = {
    collateral: string;
    balance: BigNumberish;
  };

  export type CollateralDepositViewStructOutput = [string, BigNumber] & {
    collateral: string;
    balance: BigNumber;
  };

  export type LiquidityPositionViewStruct = {
    limitOrderType: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidity: BigNumberish;
    vTokenAmountIn: BigNumberish;
    sumALastX128: BigNumberish;
    sumBInsideLastX128: BigNumberish;
    sumFpInsideLastX128: BigNumberish;
    sumFeeInsideLastX128: BigNumberish;
  };

  export type LiquidityPositionViewStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    limitOrderType: number;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    vTokenAmountIn: BigNumber;
    sumALastX128: BigNumber;
    sumBInsideLastX128: BigNumber;
    sumFpInsideLastX128: BigNumber;
    sumFeeInsideLastX128: BigNumber;
  };

  export type VTokenPositionViewStruct = {
    vToken: string;
    balance: BigNumberish;
    netTraderPosition: BigNumberish;
    sumAX128Chkpt: BigNumberish;
    liquidityPositions: IClearingHouseStructures.LiquidityPositionViewStruct[];
  };

  export type VTokenPositionViewStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    IClearingHouseStructures.LiquidityPositionViewStructOutput[]
  ] & {
    vToken: string;
    balance: BigNumber;
    netTraderPosition: BigNumber;
    sumAX128Chkpt: BigNumber;
    liquidityPositions: IClearingHouseStructures.LiquidityPositionViewStructOutput[];
  };

  export type CollateralSettingsStruct = {
    oracle: string;
    twapDuration: BigNumberish;
    isAllowedForDeposit: boolean;
  };

  export type CollateralSettingsStructOutput = [string, number, boolean] & {
    oracle: string;
    twapDuration: number;
    isAllowedForDeposit: boolean;
  };

  export type CollateralStruct = {
    token: string;
    settings: IClearingHouseStructures.CollateralSettingsStruct;
  };

  export type CollateralStructOutput = [
    string,
    IClearingHouseStructures.CollateralSettingsStructOutput
  ] & {
    token: string;
    settings: IClearingHouseStructures.CollateralSettingsStructOutput;
  };

  export type PoolSettingsStruct = {
    initialMarginRatio: BigNumberish;
    maintainanceMarginRatio: BigNumberish;
    twapDuration: BigNumberish;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type PoolSettingsStructOutput = [
    number,
    number,
    number,
    boolean,
    boolean,
    string
  ] & {
    initialMarginRatio: number;
    maintainanceMarginRatio: number;
    twapDuration: number;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type PoolStruct = {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStruct;
  };

  export type PoolStructOutput = [
    string,
    string,
    string,
    IClearingHouseStructures.PoolSettingsStructOutput
  ] & {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  };

  export type LiquidationParamsStruct = {
    liquidationFeeFraction: BigNumberish;
    tokenLiquidationPriceDeltaBps: BigNumberish;
    insuranceFundFeeShareBps: BigNumberish;
    maxRangeLiquidationFees: BigNumberish;
  };

  export type LiquidationParamsStructOutput = [
    number,
    number,
    number,
    BigNumber
  ] & {
    liquidationFeeFraction: number;
    tokenLiquidationPriceDeltaBps: number;
    insuranceFundFeeShareBps: number;
    maxRangeLiquidationFees: BigNumber;
  };
}

export interface IClearingHouseViewInterface extends utils.Interface {
  contractName: 'IClearingHouseView';
  functions: {
    'getAccountInfo(uint256)': FunctionFragment;
    'getAccountMarketValueAndRequiredMargin(uint256,bool)': FunctionFragment;
    'getAccountNetProfit(uint256)': FunctionFragment;
    'getCollateralInfo(uint32)': FunctionFragment;
    'getNetTokenPosition(uint256,uint32)': FunctionFragment;
    'getPoolInfo(uint32)': FunctionFragment;
    'getTwapPrices(address)': FunctionFragment;
    'isPoolIdAvailable(uint32)': FunctionFragment;
    'protocolInfo()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'getAccountInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountNetProfit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCollateralInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getNetTokenPosition',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTwapPrices',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'isPoolIdAvailable',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolInfo',
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: 'getAccountInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountNetProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCollateralInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNetTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPoolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTwapPrices',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isPoolIdAvailable',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolInfo',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IClearingHouseView extends BaseContract {
  contractName: 'IClearingHouseView';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClearingHouseViewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        IClearingHouseStructures.CollateralDepositViewStructOutput[],
        IClearingHouseStructures.VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vQuoteBalance: BigNumber;
        collateralDeposits: IClearingHouseStructures.CollateralDepositViewStructOutput[];
        tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
      }
    >;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accountNetProfit: BigNumber }>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IClearingHouseStructures.CollateralStructOutput]>;

    getNetTokenPosition(
      accountId: BigNumberish,
      vTokenTruncatedAddess: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netPosition: BigNumber }>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IClearingHouseStructures.PoolStructOutput]>;

    getTwapPrices(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    isPoolIdAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vQuote: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;
  };

  getAccountInfo(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      IClearingHouseStructures.CollateralDepositViewStructOutput[],
      IClearingHouseStructures.VTokenPositionViewStructOutput[]
    ] & {
      owner: string;
      vQuoteBalance: BigNumber;
      collateralDeposits: IClearingHouseStructures.CollateralDepositViewStructOutput[];
      tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
    }
  >;

  getAccountMarketValueAndRequiredMargin(
    accountId: BigNumberish,
    isInitialMargin: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      accountMarketValue: BigNumber;
      requiredMargin: BigNumber;
    }
  >;

  getAccountNetProfit(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralInfo(
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IClearingHouseStructures.CollateralStructOutput>;

  getNetTokenPosition(
    accountId: BigNumberish,
    vTokenTruncatedAddess: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolInfo(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IClearingHouseStructures.PoolStructOutput>;

  getTwapPrices(
    vToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      realPriceX128: BigNumber;
      virtualPriceX128: BigNumber;
    }
  >;

  isPoolIdAvailable(
    truncated: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  protocolInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      IClearingHouseStructures.LiquidationParamsStructOutput,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      vQuote: string;
      liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
      minRequiredMargin: BigNumber;
      removeLimitOrderFee: BigNumber;
      minimumOrderNotional: BigNumber;
    }
  >;

  callStatic: {
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        IClearingHouseStructures.CollateralDepositViewStructOutput[],
        IClearingHouseStructures.VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vQuoteBalance: BigNumber;
        collateralDeposits: IClearingHouseStructures.CollateralDepositViewStructOutput[];
        tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
      }
    >;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.CollateralStructOutput>;

    getNetTokenPosition(
      accountId: BigNumberish,
      vTokenTruncatedAddess: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.PoolStructOutput>;

    getTwapPrices(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    isPoolIdAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vQuote: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetTokenPosition(
      accountId: BigNumberish,
      vTokenTruncatedAddess: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTwapPrices(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolIdAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolInfo(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetTokenPosition(
      accountId: BigNumberish,
      vTokenTruncatedAddess: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTwapPrices(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolIdAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
