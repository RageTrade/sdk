/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export type DepositTokenViewStruct = {
  cTokenAddress: string;
  balance: BigNumberish;
};

export type DepositTokenViewStructOutput = [string, BigNumber] & {
  cTokenAddress: string;
  balance: BigNumber;
};

export type LiquidityPositionViewStruct = {
  limitOrderType: BigNumberish;
  tickLower: BigNumberish;
  tickUpper: BigNumberish;
  liquidity: BigNumberish;
  vTokenAmountIn: BigNumberish;
  sumALastX128: BigNumberish;
  sumBInsideLastX128: BigNumberish;
  sumFpInsideLastX128: BigNumberish;
  sumFeeInsideLastX128: BigNumberish;
};

export type LiquidityPositionViewStructOutput = [
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  limitOrderType: number;
  tickLower: number;
  tickUpper: number;
  liquidity: BigNumber;
  vTokenAmountIn: BigNumber;
  sumALastX128: BigNumber;
  sumBInsideLastX128: BigNumber;
  sumFpInsideLastX128: BigNumber;
  sumFeeInsideLastX128: BigNumber;
};

export type VTokenPositionViewStruct = {
  vTokenAddress: string;
  balance: BigNumberish;
  netTraderPosition: BigNumberish;
  sumAX128Ckpt: BigNumberish;
  liquidityPositions: LiquidityPositionViewStruct[];
};

export type VTokenPositionViewStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  LiquidityPositionViewStructOutput[]
] & {
  vTokenAddress: string;
  balance: BigNumber;
  netTraderPosition: BigNumber;
  sumAX128Ckpt: BigNumber;
  liquidityPositions: LiquidityPositionViewStructOutput[];
};

export type CollateralSettingsStruct = {
  oracle: string;
  twapDuration: BigNumberish;
  supported: boolean;
};

export type CollateralSettingsStructOutput = [string, number, boolean] & {
  oracle: string;
  twapDuration: number;
  supported: boolean;
};

export type CollateralStruct = {
  token: string;
  settings: CollateralSettingsStruct;
};

export type CollateralStructOutput = [
  string,
  CollateralSettingsStructOutput
] & { token: string; settings: CollateralSettingsStructOutput };

export type PoolSettingsStruct = {
  initialMarginRatio: BigNumberish;
  maintainanceMarginRatio: BigNumberish;
  twapDuration: BigNumberish;
  supported: boolean;
  isCrossMargined: boolean;
  oracle: string;
};

export type PoolSettingsStructOutput = [
  number,
  number,
  number,
  boolean,
  boolean,
  string
] & {
  initialMarginRatio: number;
  maintainanceMarginRatio: number;
  twapDuration: number;
  supported: boolean;
  isCrossMargined: boolean;
  oracle: string;
};

export type PoolStruct = {
  vToken: string;
  vPool: string;
  vPoolWrapper: string;
  settings: PoolSettingsStruct;
};

export type PoolStructOutput = [
  string,
  string,
  string,
  PoolSettingsStructOutput
] & {
  vToken: string;
  vPool: string;
  vPoolWrapper: string;
  settings: PoolSettingsStructOutput;
};

export type LiquidationParamsStruct = {
  liquidationFeeFraction: BigNumberish;
  tokenLiquidationPriceDeltaBps: BigNumberish;
  insuranceFundFeeShareBps: BigNumberish;
  maxRangeLiquidationFees: BigNumberish;
};

export type LiquidationParamsStructOutput = [
  number,
  number,
  number,
  BigNumber
] & {
  liquidationFeeFraction: number;
  tokenLiquidationPriceDeltaBps: number;
  insuranceFundFeeShareBps: number;
  maxRangeLiquidationFees: BigNumber;
};

export interface IClearingHouseViewInterface extends ethers.utils.Interface {
  functions: {
    'getAccountInfo(uint256)': FunctionFragment;
    'getAccountMarketValueAndRequiredMargin(uint256,bool)': FunctionFragment;
    'getAccountNetProfit(uint256)': FunctionFragment;
    'getCollateralInfo(uint32)': FunctionFragment;
    'getNetTokenPosition(uint256,uint32)': FunctionFragment;
    'getPoolInfo(uint32)': FunctionFragment;
    'getTwapSqrtPricesForSetDuration(address)': FunctionFragment;
    'isVTokenAddressAvailable(uint32)': FunctionFragment;
    'protocolInfo()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'getAccountInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountNetProfit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCollateralInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getNetTokenPosition',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTwapSqrtPricesForSetDuration',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'isVTokenAddressAvailable',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolInfo',
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: 'getAccountInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountNetProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCollateralInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNetTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPoolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTwapSqrtPricesForSetDuration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isVTokenAddressAvailable',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolInfo',
    data: BytesLike
  ): Result;

  events: {};
}

export interface IClearingHouseView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClearingHouseViewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        DepositTokenViewStructOutput[],
        VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vBaseBalance: BigNumber;
        tokenDeposits: DepositTokenViewStructOutput[];
        tokenPositions: VTokenPositionViewStructOutput[];
      }
    >;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accountNetProfit: BigNumber }>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CollateralStructOutput]>;

    getNetTokenPosition(
      accountId: BigNumberish,
      vTokenTruncatedAddess: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netPosition: BigNumber }>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PoolStructOutput]>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        liquidationParams: LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;
  };

  getAccountInfo(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      DepositTokenViewStructOutput[],
      VTokenPositionViewStructOutput[]
    ] & {
      owner: string;
      vBaseBalance: BigNumber;
      tokenDeposits: DepositTokenViewStructOutput[];
      tokenPositions: VTokenPositionViewStructOutput[];
    }
  >;

  getAccountMarketValueAndRequiredMargin(
    accountId: BigNumberish,
    isInitialMargin: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      accountMarketValue: BigNumber;
      requiredMargin: BigNumber;
    }
  >;

  getAccountNetProfit(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralInfo(
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CollateralStructOutput>;

  getNetTokenPosition(
    accountId: BigNumberish,
    vTokenTruncatedAddess: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolInfo(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PoolStructOutput>;

  getTwapSqrtPricesForSetDuration(
    vToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      realPriceX128: BigNumber;
      virtualPriceX128: BigNumber;
    }
  >;

  isVTokenAddressAvailable(
    truncated: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  protocolInfo(
    overrides?: CallOverrides
  ): Promise<
    [string, LiquidationParamsStructOutput, BigNumber, BigNumber, BigNumber] & {
      vBase: string;
      liquidationParams: LiquidationParamsStructOutput;
      minRequiredMargin: BigNumber;
      removeLimitOrderFee: BigNumber;
      minimumOrderNotional: BigNumber;
    }
  >;

  callStatic: {
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        DepositTokenViewStructOutput[],
        VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vBaseBalance: BigNumber;
        tokenDeposits: DepositTokenViewStructOutput[];
        tokenPositions: VTokenPositionViewStructOutput[];
      }
    >;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CollateralStructOutput>;

    getNetTokenPosition(
      accountId: BigNumberish,
      vTokenTruncatedAddess: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PoolStructOutput>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        liquidationParams: LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetTokenPosition(
      accountId: BigNumberish,
      vTokenTruncatedAddess: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolInfo(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetTokenPosition(
      accountId: BigNumberish,
      vTokenTruncatedAddess: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
