/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export interface FundingPaymentTestInterface extends ethers.utils.Interface {
  functions: {
    'extrapolatedSumAX128(int256,uint48,uint48,uint256,uint256)': FunctionFragment;
    'extrapolatedSumFpX128(int256,int256,int256,int256)': FunctionFragment;
    'fpGlobal()': FunctionFragment;
    'nextAX128(uint48,uint48,uint256,uint256)': FunctionFragment;
    'update(int256,uint256,uint48,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'extrapolatedSumAX128',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'extrapolatedSumFpX128',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'fpGlobal', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nextAX128',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'update',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: 'extrapolatedSumAX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'extrapolatedSumFpX128',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'fpGlobal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextAX128', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update', data: BytesLike): Result;

  events: {};
}

export interface FundingPaymentTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FundingPaymentTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    extrapolatedSumAX128(
      sumA: BigNumberish,
      timestampLast: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    extrapolatedSumFpX128(
      sumAX128: BigNumberish,
      sumBX128: BigNumberish,
      sumFpX128: BigNumberish,
      sumALatestX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fpGlobal(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        sumAX128: BigNumber;
        sumBX128: BigNumber;
        sumFpX128: BigNumber;
        timestampLast: number;
      }
    >;

    nextAX128(
      timestampLast: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    update(
      tokenAmount: BigNumberish,
      liquidity: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  extrapolatedSumAX128(
    sumA: BigNumberish,
    timestampLast: BigNumberish,
    blockTimestamp: BigNumberish,
    realPriceX128: BigNumberish,
    virtualPriceX128: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  extrapolatedSumFpX128(
    sumAX128: BigNumberish,
    sumBX128: BigNumberish,
    sumFpX128: BigNumberish,
    sumALatestX128: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fpGlobal(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number] & {
      sumAX128: BigNumber;
      sumBX128: BigNumber;
      sumFpX128: BigNumber;
      timestampLast: number;
    }
  >;

  nextAX128(
    timestampLast: BigNumberish,
    blockTimestamp: BigNumberish,
    realPriceX128: BigNumberish,
    virtualPriceX128: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  update(
    tokenAmount: BigNumberish,
    liquidity: BigNumberish,
    blockTimestamp: BigNumberish,
    realPriceX128: BigNumberish,
    virtualPriceX128: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    extrapolatedSumAX128(
      sumA: BigNumberish,
      timestampLast: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extrapolatedSumFpX128(
      sumAX128: BigNumberish,
      sumBX128: BigNumberish,
      sumFpX128: BigNumberish,
      sumALatestX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fpGlobal(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        sumAX128: BigNumber;
        sumBX128: BigNumber;
        sumFpX128: BigNumber;
        timestampLast: number;
      }
    >;

    nextAX128(
      timestampLast: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      tokenAmount: BigNumberish,
      liquidity: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    extrapolatedSumAX128(
      sumA: BigNumberish,
      timestampLast: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extrapolatedSumFpX128(
      sumAX128: BigNumberish,
      sumBX128: BigNumberish,
      sumFpX128: BigNumberish,
      sumALatestX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fpGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    nextAX128(
      timestampLast: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      tokenAmount: BigNumberish,
      liquidity: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    extrapolatedSumAX128(
      sumA: BigNumberish,
      timestampLast: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extrapolatedSumFpX128(
      sumAX128: BigNumberish,
      sumBX128: BigNumberish,
      sumFpX128: BigNumberish,
      sumALatestX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fpGlobal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextAX128(
      timestampLast: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      tokenAmount: BigNumberish,
      liquidity: BigNumberish,
      blockTimestamp: BigNumberish,
      realPriceX128: BigNumberish,
      virtualPriceX128: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
