/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export type DepositTokenViewStruct = {
  rTokenAddress: string;
  balance: BigNumberish;
};

export type DepositTokenViewStructOutput = [string, BigNumber] & {
  rTokenAddress: string;
  balance: BigNumber;
};

export type LiquidityPositionViewStruct = {
  limitOrderType: BigNumberish;
  tickLower: BigNumberish;
  tickUpper: BigNumberish;
  liquidity: BigNumberish;
  vTokenAmountIn: BigNumberish;
  sumALastX128: BigNumberish;
  sumBInsideLastX128: BigNumberish;
  sumFpInsideLastX128: BigNumberish;
  sumFeeInsideLastX128: BigNumberish;
};

export type LiquidityPositionViewStructOutput = [
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  limitOrderType: number;
  tickLower: number;
  tickUpper: number;
  liquidity: BigNumber;
  vTokenAmountIn: BigNumber;
  sumALastX128: BigNumber;
  sumBInsideLastX128: BigNumber;
  sumFpInsideLastX128: BigNumber;
  sumFeeInsideLastX128: BigNumber;
};

export type VTokenPositionViewStruct = {
  vTokenAddress: string;
  balance: BigNumberish;
  netTraderPosition: BigNumberish;
  sumAX128Ckpt: BigNumberish;
  liquidityPositions: LiquidityPositionViewStruct[];
};

export type VTokenPositionViewStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  LiquidityPositionViewStructOutput[]
] & {
  vTokenAddress: string;
  balance: BigNumber;
  netTraderPosition: BigNumber;
  sumAX128Ckpt: BigNumber;
  liquidityPositions: LiquidityPositionViewStructOutput[];
};

export type BalanceAdjustmentsStruct = {
  vBaseIncrease: BigNumberish;
  vTokenIncrease: BigNumberish;
  traderPositionIncrease: BigNumberish;
};

export type BalanceAdjustmentsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber
] & {
  vBaseIncrease: BigNumber;
  vTokenIncrease: BigNumber;
  traderPositionIncrease: BigNumber;
};

export type RageTradePoolSettingsStruct = {
  initialMarginRatio: BigNumberish;
  maintainanceMarginRatio: BigNumberish;
  twapDuration: BigNumberish;
  whitelisted: boolean;
  oracle: string;
};

export type RageTradePoolSettingsStructOutput = [
  number,
  number,
  number,
  boolean,
  string
] & {
  initialMarginRatio: number;
  maintainanceMarginRatio: number;
  twapDuration: number;
  whitelisted: boolean;
  oracle: string;
};

export type RageTradePoolStruct = {
  vPool: string;
  vPoolWrapper: string;
  settings: RageTradePoolSettingsStruct;
};

export type RageTradePoolStructOutput = [
  string,
  string,
  RageTradePoolSettingsStructOutput
] & {
  vPool: string;
  vPoolWrapper: string;
  settings: RageTradePoolSettingsStructOutput;
};

export type LiquidationParamsStruct = {
  liquidationFeeFraction: BigNumberish;
  tokenLiquidationPriceDeltaBps: BigNumberish;
  insuranceFundFeeShareBps: BigNumberish;
};

export type LiquidationParamsStructOutput = [number, number, number] & {
  liquidationFeeFraction: number;
  tokenLiquidationPriceDeltaBps: number;
  insuranceFundFeeShareBps: number;
};

export type RTokenStruct = {
  tokenAddress: string;
  oracleAddress: string;
  oracleTimeHorizon: BigNumberish;
};

export type RTokenStructOutput = [string, string, number] & {
  tokenAddress: string;
  oracleAddress: string;
  oracleTimeHorizon: number;
};

export type SwapParamsStruct = {
  amount: BigNumberish;
  sqrtPriceLimit: BigNumberish;
  isNotional: boolean;
  isPartialAllowed: boolean;
};

export type SwapParamsStructOutput = [
  BigNumber,
  BigNumber,
  boolean,
  boolean
] & {
  amount: BigNumber;
  sqrtPriceLimit: BigNumber;
  isNotional: boolean;
  isPartialAllowed: boolean;
};

export type LiquidityChangeParamsStruct = {
  tickLower: BigNumberish;
  tickUpper: BigNumberish;
  liquidityDelta: BigNumberish;
  sqrtPriceCurrent: BigNumberish;
  slippageToleranceBps: BigNumberish;
  closeTokenPosition: boolean;
  limitOrderType: BigNumberish;
};

export type LiquidityChangeParamsStructOutput = [
  number,
  number,
  BigNumber,
  BigNumber,
  number,
  boolean,
  number
] & {
  tickLower: number;
  tickUpper: number;
  liquidityDelta: BigNumber;
  sqrtPriceCurrent: BigNumber;
  slippageToleranceBps: number;
  closeTokenPosition: boolean;
  limitOrderType: number;
};

export interface ClearingHouseViewInterface extends ethers.utils.Interface {
  functions: {
    '__ClearingHouse_init(address,address,address,address,address)': FunctionFragment;
    'addMargin(uint256,uint32,uint256)': FunctionFragment;
    'createAccount()': FunctionFragment;
    'extsload(bytes32)': FunctionFragment;
    'getAccountMarketValueAndRequiredMargin(uint256,bool)': FunctionFragment;
    'getAccountView(uint256)': FunctionFragment;
    'getTwapSqrtPricesForSetDuration(address)': FunctionFragment;
    'governance()': FunctionFragment;
    'initRealToken(address)': FunctionFragment;
    'insuranceFund()': FunctionFragment;
    'isRealTokenAlreadyInitilized(address)': FunctionFragment;
    'isVTokenAddressAvailable(uint32)': FunctionFragment;
    'liquidateLiquidityPositions(uint256)': FunctionFragment;
    'liquidateTokenPosition(uint256,uint256,uint32,uint16)': FunctionFragment;
    'nativeOracle()': FunctionFragment;
    'numAccounts()': FunctionFragment;
    'paused()': FunctionFragment;
    'pools(address)': FunctionFragment;
    'protocolInfo()': FunctionFragment;
    'rBase()': FunctionFragment;
    'rTokens(uint32)': FunctionFragment;
    'rageTradeFactoryAddress()': FunctionFragment;
    'realTokenInitilized(address)': FunctionFragment;
    'registerPool(address,(address,address,(uint16,uint16,uint32,bool,address)))': FunctionFragment;
    'removeLimitOrder(uint256,uint32,int24,int24)': FunctionFragment;
    'removeMargin(uint256,uint32,uint256)': FunctionFragment;
    'removeProfit(uint256,uint256)': FunctionFragment;
    'supportedDeposits(address)': FunctionFragment;
    'supportedVTokens(address)': FunctionFragment;
    'swapToken(uint256,uint32,(int256,uint160,bool,bool))': FunctionFragment;
    'teamMultisig()': FunctionFragment;
    'transferGovernance(address)': FunctionFragment;
    'transferTeamMultisig(address)': FunctionFragment;
    'updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8))': FunctionFragment;
    'vTokens(uint32)': FunctionFragment;
    'withdrawProtocolFee(address[])': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: '__ClearingHouse_init',
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'addMargin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccount',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'extsload', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountView',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTwapSqrtPricesForSetDuration',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'governance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'initRealToken',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'insuranceFund',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isRealTokenAlreadyInitilized',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'isVTokenAddressAvailable',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositions',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPosition',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'nativeOracle',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'numAccounts',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pools', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'protocolInfo',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'rBase', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rTokens',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'rageTradeFactoryAddress',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'realTokenInitilized',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [string, RageTradePoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrder',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeMargin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeProfit',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'supportedDeposits',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'supportedVTokens',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapToken',
    values: [BigNumberish, BigNumberish, SwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'teamMultisig',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferGovernance',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTeamMultisig',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRangeOrder',
    values: [BigNumberish, BigNumberish, LiquidityChangeParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'vTokens',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawProtocolFee',
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: '__ClearingHouse_init',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'addMargin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'createAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'extsload', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountView',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTwapSqrtPricesForSetDuration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initRealToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'insuranceFund',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isRealTokenAlreadyInitilized',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isVTokenAddressAvailable',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nativeOracle',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'numAccounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pools', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'protocolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'rBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rageTradeFactoryAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'realTokenInitilized',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportedDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportedVTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'teamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferGovernance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferTeamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRangeOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'vTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawProtocolFee',
    data: BytesLike
  ): Result;

  events: {
    'GovernanceTransferred(address,address)': EventFragment;
    'TeamMultisigTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'GovernanceTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TeamMultisigTransferred'): EventFragment;
}

export type GovernanceTransferredEvent = TypedEvent<
  [string, string],
  { previousGovernance: string; newGovernance: string }
>;

export type GovernanceTransferredEventFilter = TypedEventFilter<GovernanceTransferredEvent>;

export type TeamMultisigTransferredEvent = TypedEvent<
  [string, string],
  { previousTeamMultisig: string; newTeamMultisig: string }
>;

export type TeamMultisigTransferredEventFilter = TypedEventFilter<TeamMultisigTransferredEvent>;

export interface ClearingHouseView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClearingHouseViewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __ClearingHouse_init(
      _rageTradeFactoryAddress: string,
      _rBase: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMargin(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { val: string }>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getAccountMarketValueAndRequiredMargin(
      accountNo: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountView(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        DepositTokenViewStructOutput[],
        VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vBaseBalance: BigNumber;
        tokenDeposits: DepositTokenViewStructOutput[];
        tokenPositions: VTokenPositionViewStructOutput[];
      }
    >;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<[string]>;

    initRealToken(
      _realToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<[string]>;

    isRealTokenAlreadyInitilized(
      realToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidateLiquidityPositions(
      accountNo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateTokenPosition(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nativeOracle(overrides?: CallOverrides): Promise<[string]>;

    numAccounts(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pools(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<[RageTradePoolStructOutput]>;

    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        liquidationParams: LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    rBase(overrides?: CallOverrides): Promise<[string]>;

    rTokens(
      rTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[RTokenStructOutput]>;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    realTokenInitilized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLimitOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMargin(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeProfit(
      accountNo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportedVTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapToken(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      swapParams: SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<[string]>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRangeOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidityChangeParams: LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vTokens(
      vTokenAddressTruncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __ClearingHouse_init(
    _rageTradeFactoryAddress: string,
    _rBase: string,
    _insuranceFund: string,
    _vBase: string,
    _nativeOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMargin(
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'extsload(bytes32)'(
    slot: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  'extsload(bytes32[])'(
    slots: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAccountMarketValueAndRequiredMargin(
    accountNo: BigNumberish,
    isInitialMargin: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      accountMarketValue: BigNumber;
      requiredMargin: BigNumber;
    }
  >;

  getAccountView(
    accountNo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      DepositTokenViewStructOutput[],
      VTokenPositionViewStructOutput[]
    ] & {
      owner: string;
      vBaseBalance: BigNumber;
      tokenDeposits: DepositTokenViewStructOutput[];
      tokenPositions: VTokenPositionViewStructOutput[];
    }
  >;

  getTwapSqrtPricesForSetDuration(
    vToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      realPriceX128: BigNumber;
      virtualPriceX128: BigNumber;
    }
  >;

  governance(overrides?: CallOverrides): Promise<string>;

  initRealToken(
    _realToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insuranceFund(overrides?: CallOverrides): Promise<string>;

  isRealTokenAlreadyInitilized(
    realToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVTokenAddressAvailable(
    truncated: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidateLiquidityPositions(
    accountNo: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateTokenPosition(
    liquidatorAccountNo: BigNumberish,
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    liquidationBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nativeOracle(overrides?: CallOverrides): Promise<string>;

  numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pools(
    vToken: string,
    overrides?: CallOverrides
  ): Promise<RageTradePoolStructOutput>;

  protocolInfo(
    overrides?: CallOverrides
  ): Promise<
    [string, LiquidationParamsStructOutput, BigNumber, BigNumber, BigNumber] & {
      vBase: string;
      liquidationParams: LiquidationParamsStructOutput;
      minRequiredMargin: BigNumber;
      removeLimitOrderFee: BigNumber;
      minimumOrderNotional: BigNumber;
    }
  >;

  rBase(overrides?: CallOverrides): Promise<string>;

  rTokens(
    rTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<RTokenStructOutput>;

  rageTradeFactoryAddress(overrides?: CallOverrides): Promise<string>;

  realTokenInitilized(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerPool(
    full: string,
    rageTradePool: RageTradePoolStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLimitOrder(
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMargin(
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeProfit(
    accountNo: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedDeposits(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  supportedVTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  swapToken(
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    swapParams: SwapParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  teamMultisig(overrides?: CallOverrides): Promise<string>;

  transferGovernance(
    newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTeamMultisig(
    newTeamMultisig: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRangeOrder(
    accountNo: BigNumberish,
    vTokenTruncatedAddress: BigNumberish,
    liquidityChangeParams: LiquidityChangeParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vTokens(
    vTokenAddressTruncated: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawProtocolFee(
    wrapperAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __ClearingHouse_init(
      _rageTradeFactoryAddress: string,
      _rBase: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addMargin(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAccount(overrides?: CallOverrides): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAccountMarketValueAndRequiredMargin(
      accountNo: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountView(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        DepositTokenViewStructOutput[],
        VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vBaseBalance: BigNumber;
        tokenDeposits: DepositTokenViewStructOutput[];
        tokenPositions: VTokenPositionViewStructOutput[];
      }
    >;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<string>;

    initRealToken(_realToken: string, overrides?: CallOverrides): Promise<void>;

    insuranceFund(overrides?: CallOverrides): Promise<string>;

    isRealTokenAlreadyInitilized(
      realToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidateLiquidityPositions(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateTokenPosition(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BalanceAdjustmentsStructOutput>;

    nativeOracle(overrides?: CallOverrides): Promise<string>;

    numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pools(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<RageTradePoolStructOutput>;

    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        vBase: string;
        liquidationParams: LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    rBase(overrides?: CallOverrides): Promise<string>;

    rTokens(
      rTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<RTokenStructOutput>;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<string>;

    realTokenInitilized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLimitOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMargin(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProfit(
      accountNo: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportedVTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    swapToken(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      swapParams: SwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vBaseAmountOut: BigNumber;
      }
    >;

    teamMultisig(overrides?: CallOverrides): Promise<string>;

    transferGovernance(
      newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRangeOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidityChangeParams: LiquidityChangeParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vBaseAmountOut: BigNumber;
      }
    >;

    vTokens(
      vTokenAddressTruncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'GovernanceTransferred(address,address)'(
      previousGovernance?: string | null,
      newGovernance?: string | null
    ): GovernanceTransferredEventFilter;
    GovernanceTransferred(
      previousGovernance?: string | null,
      newGovernance?: string | null
    ): GovernanceTransferredEventFilter;

    'TeamMultisigTransferred(address,address)'(
      previousTeamMultisig?: string | null,
      newTeamMultisig?: string | null
    ): TeamMultisigTransferredEventFilter;
    TeamMultisigTransferred(
      previousTeamMultisig?: string | null,
      newTeamMultisig?: string | null
    ): TeamMultisigTransferredEventFilter;
  };

  estimateGas: {
    __ClearingHouse_init(
      _rageTradeFactoryAddress: string,
      _rBase: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMargin(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMarketValueAndRequiredMargin(
      accountNo: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountView(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    initRealToken(
      _realToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    isRealTokenAlreadyInitilized(
      realToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateLiquidityPositions(
      accountNo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateTokenPosition(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nativeOracle(overrides?: CallOverrides): Promise<BigNumber>;

    numAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pools(vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    protocolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    rBase(overrides?: CallOverrides): Promise<BigNumber>;

    rTokens(
      rTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rageTradeFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    realTokenInitilized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLimitOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMargin(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeProfit(
      accountNo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedVTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapToken(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      swapParams: SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    teamMultisig(overrides?: CallOverrides): Promise<BigNumber>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRangeOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidityChangeParams: LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vTokens(
      vTokenAddressTruncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __ClearingHouse_init(
      _rageTradeFactoryAddress: string,
      _rBase: string,
      _insuranceFund: string,
      _vBase: string,
      _nativeOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMargin(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32)'(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'extsload(bytes32[])'(
      slots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountMarketValueAndRequiredMargin(
      accountNo: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountView(
      accountNo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTwapSqrtPricesForSetDuration(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initRealToken(
      _realToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRealTokenAlreadyInitilized(
      realToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVTokenAddressAvailable(
      truncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPositions(
      accountNo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTokenPosition(
      liquidatorAccountNo: BigNumberish,
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidationBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nativeOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numAccounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rTokens(
      rTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rageTradeFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realTokenInitilized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPool(
      full: string,
      rageTradePool: RageTradePoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLimitOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMargin(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeProfit(
      accountNo: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedVTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapToken(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      swapParams: SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRangeOrder(
      accountNo: BigNumberish,
      vTokenTruncatedAddress: BigNumberish,
      liquidityChangeParams: LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vTokens(
      vTokenAddressTruncated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
