/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace LiquidityPosition {
  export type InfoStruct = {
    limitOrderType: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidity: BigNumberish;
    vTokenAmountIn: BigNumberish;
    sumALastX128: BigNumberish;
    sumBInsideLastX128: BigNumberish;
    sumFpInsideLastX128: BigNumberish;
    sumFeeInsideLastX128: BigNumberish;
    _emptySlots: BigNumberish[];
  };

  export type InfoStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[]
  ] & {
    limitOrderType: number;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    vTokenAmountIn: BigNumber;
    sumALastX128: BigNumber;
    sumBInsideLastX128: BigNumber;
    sumFpInsideLastX128: BigNumber;
    sumFeeInsideLastX128: BigNumber;
    _emptySlots: BigNumber[];
  };
}

export interface LiquidityPositionSetTestInterface extends utils.Interface {
  contractName: 'LiquidityPositionSetTest';
  functions: {
    'createEmptyPosition(int24,int24)': FunctionFragment;
    'isPositionActive(int24,int24)': FunctionFragment;
    'wrapper()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'createEmptyPosition',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'isPositionActive',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'wrapper', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'createEmptyPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isPositionActive',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'wrapper', data: BytesLike): Result;

  events: {};
}

export interface LiquidityPositionSetTest extends BaseContract {
  contractName: 'LiquidityPositionSetTest';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityPositionSetTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createEmptyPosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPositionActive(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    wrapper(overrides?: CallOverrides): Promise<[string]>;
  };

  createEmptyPosition(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPositionActive(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wrapper(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createEmptyPosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LiquidityPosition.InfoStructOutput>;

    isPositionActive(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wrapper(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    createEmptyPosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPositionActive(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrapper(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createEmptyPosition(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPositionActive(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
