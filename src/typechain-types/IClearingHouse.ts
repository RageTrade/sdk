/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace IClearingHouseStructures {
  export type CollateralSettingsStruct = {
    oracle: string;
    twapDuration: BigNumberish;
    isAllowedForDeposit: boolean;
  };

  export type CollateralSettingsStructOutput = [string, number, boolean] & {
    oracle: string;
    twapDuration: number;
    isAllowedForDeposit: boolean;
  };

  export type PoolSettingsStruct = {
    initialMarginRatioBps: BigNumberish;
    maintainanceMarginRatioBps: BigNumberish;
    maxVirtualPriceDeviationRatioBps: BigNumberish;
    twapDuration: BigNumberish;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type PoolSettingsStructOutput = [
    number,
    number,
    number,
    number,
    boolean,
    boolean,
    string
  ] & {
    initialMarginRatioBps: number;
    maintainanceMarginRatioBps: number;
    maxVirtualPriceDeviationRatioBps: number;
    twapDuration: number;
    isAllowedForTrade: boolean;
    isCrossMargined: boolean;
    oracle: string;
  };

  export type LiquidationParamsStruct = {
    rangeLiquidationFeeFraction: BigNumberish;
    tokenLiquidationFeeFraction: BigNumberish;
    closeFactorMMThresholdBps: BigNumberish;
    partialLiquidationCloseFactorBps: BigNumberish;
    insuranceFundFeeShareBps: BigNumberish;
    liquidationSlippageSqrtToleranceBps: BigNumberish;
    maxRangeLiquidationFees: BigNumberish;
    minNotionalLiquidatable: BigNumberish;
  };

  export type LiquidationParamsStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    rangeLiquidationFeeFraction: number;
    tokenLiquidationFeeFraction: number;
    closeFactorMMThresholdBps: number;
    partialLiquidationCloseFactorBps: number;
    insuranceFundFeeShareBps: number;
    liquidationSlippageSqrtToleranceBps: number;
    maxRangeLiquidationFees: BigNumber;
    minNotionalLiquidatable: BigNumber;
  };

  export type CollateralDepositViewStruct = {
    collateral: string;
    balance: BigNumberish;
  };

  export type CollateralDepositViewStructOutput = [string, BigNumber] & {
    collateral: string;
    balance: BigNumber;
  };

  export type LiquidityPositionViewStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidity: BigNumberish;
    vTokenAmountIn: BigNumberish;
    sumALastX128: BigNumberish;
    sumBInsideLastX128: BigNumberish;
    sumFpInsideLastX128: BigNumberish;
    sumFeeInsideLastX128: BigNumberish;
    limitOrderType: BigNumberish;
  };

  export type LiquidityPositionViewStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    vTokenAmountIn: BigNumber;
    sumALastX128: BigNumber;
    sumBInsideLastX128: BigNumber;
    sumFpInsideLastX128: BigNumber;
    sumFeeInsideLastX128: BigNumber;
    limitOrderType: number;
  };

  export type VTokenPositionViewStruct = {
    poolId: BigNumberish;
    balance: BigNumberish;
    netTraderPosition: BigNumberish;
    sumALastX128: BigNumberish;
    liquidityPositions: IClearingHouseStructures.LiquidityPositionViewStruct[];
  };

  export type VTokenPositionViewStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    IClearingHouseStructures.LiquidityPositionViewStructOutput[]
  ] & {
    poolId: number;
    balance: BigNumber;
    netTraderPosition: BigNumber;
    sumALastX128: BigNumber;
    liquidityPositions: IClearingHouseStructures.LiquidityPositionViewStructOutput[];
  };

  export type CollateralStruct = {
    token: string;
    settings: IClearingHouseStructures.CollateralSettingsStruct;
  };

  export type CollateralStructOutput = [
    string,
    IClearingHouseStructures.CollateralSettingsStructOutput
  ] & {
    token: string;
    settings: IClearingHouseStructures.CollateralSettingsStructOutput;
  };

  export type PoolStruct = {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStruct;
  };

  export type PoolStructOutput = [
    string,
    string,
    string,
    IClearingHouseStructures.PoolSettingsStructOutput
  ] & {
    vToken: string;
    vPool: string;
    vPoolWrapper: string;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  };

  export type SwapParamsStruct = {
    amount: BigNumberish;
    sqrtPriceLimit: BigNumberish;
    isNotional: boolean;
    isPartialAllowed: boolean;
  };

  export type SwapParamsStructOutput = [
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    amount: BigNumber;
    sqrtPriceLimit: BigNumber;
    isNotional: boolean;
    isPartialAllowed: boolean;
  };

  export type LiquidityChangeParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
    sqrtPriceCurrent: BigNumberish;
    slippageToleranceBps: BigNumberish;
    closeTokenPosition: boolean;
    limitOrderType: BigNumberish;
  };

  export type LiquidityChangeParamsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    number,
    boolean,
    number
  ] & {
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
    sqrtPriceCurrent: BigNumber;
    slippageToleranceBps: number;
    closeTokenPosition: boolean;
    limitOrderType: number;
  };
}

export interface IClearingHouseInterface extends utils.Interface {
  contractName: 'IClearingHouse';
  functions: {
    '__initialize_ClearingHouse(address,address,address,address,address)': FunctionFragment;
    'createAccount()': FunctionFragment;
    'createAccountAndAddMargin(uint32,uint256)': FunctionFragment;
    'getAccountInfo(uint256)': FunctionFragment;
    'getAccountMarketValueAndRequiredMargin(uint256,bool)': FunctionFragment;
    'getAccountNetProfit(uint256)': FunctionFragment;
    'getAccountNetTokenPosition(uint256,uint32)': FunctionFragment;
    'getCollateralInfo(uint32)': FunctionFragment;
    'getPoolInfo(uint32)': FunctionFragment;
    'getTwapPrices(uint32)': FunctionFragment;
    'governance()': FunctionFragment;
    'isPoolIdAvailable(uint32)': FunctionFragment;
    'liquidateLiquidityPositions(uint256)': FunctionFragment;
    'liquidateTokenPosition(uint256,uint32)': FunctionFragment;
    'protocolInfo()': FunctionFragment;
    'registerPool((address,address,address,(uint16,uint16,uint16,uint32,bool,bool,address)))': FunctionFragment;
    'removeLimitOrder(uint256,uint32,int24,int24)': FunctionFragment;
    'swapToken(uint256,uint32,(int256,uint160,bool,bool))': FunctionFragment;
    'teamMultisig()': FunctionFragment;
    'transferGovernance(address)': FunctionFragment;
    'transferTeamMultisig(address)': FunctionFragment;
    'updateCollateralSettings(address,(address,uint32,bool))': FunctionFragment;
    'updateMargin(uint256,uint32,int256)': FunctionFragment;
    'updatePoolSettings(uint32,(uint16,uint16,uint16,uint32,bool,bool,address))': FunctionFragment;
    'updateProfit(uint256,int256)': FunctionFragment;
    'updateProtocolSettings((uint16,uint16,uint16,uint16,uint16,uint16,uint64,uint64),uint256,uint256,uint256)': FunctionFragment;
    'updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8))': FunctionFragment;
    'withdrawProtocolFee(address[])': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: '__initialize_ClearingHouse',
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccount',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'createAccountAndAddMargin',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountNetProfit',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAccountNetTokenPosition',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getCollateralInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTwapPrices',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'governance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isPoolIdAvailable',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateLiquidityPositions',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateTokenPosition',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolInfo',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPool',
    values: [IClearingHouseStructures.PoolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLimitOrder',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapToken',
    values: [
      BigNumberish,
      BigNumberish,
      IClearingHouseStructures.SwapParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'teamMultisig',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferGovernance',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTeamMultisig',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateCollateralSettings',
    values: [string, IClearingHouseStructures.CollateralSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateMargin',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePoolSettings',
    values: [BigNumberish, IClearingHouseStructures.PoolSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProfit',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProtocolSettings',
    values: [
      IClearingHouseStructures.LiquidationParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRangeOrder',
    values: [
      BigNumberish,
      BigNumberish,
      IClearingHouseStructures.LiquidityChangeParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawProtocolFee',
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: '__initialize_ClearingHouse',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createAccount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createAccountAndAddMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountMarketValueAndRequiredMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountNetProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAccountNetTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCollateralInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPoolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTwapPrices',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isPoolIdAvailable',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateLiquidityPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidateTokenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerPool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeLimitOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'teamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferGovernance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferTeamMultisig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateCollateralSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateMargin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updatePoolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProfit',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateProtocolSettings',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRangeOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawProtocolFee',
    data: BytesLike
  ): Result;

  events: {
    'AccountCreated(address,uint256)': EventFragment;
    'CollateralSettingsUpdated(address,tuple)': EventFragment;
    'PausedUpdated(bool)': EventFragment;
    'PoolSettingsUpdated(uint32,tuple)': EventFragment;
    'ProtocolSettingsUpdated(tuple,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccountCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralSettingsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PausedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolSettingsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolSettingsUpdated'): EventFragment;
}

export type AccountCreatedEvent = TypedEvent<
  [string, BigNumber],
  { ownerAddress: string; accountId: BigNumber }
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export type CollateralSettingsUpdatedEvent = TypedEvent<
  [string, IClearingHouseStructures.CollateralSettingsStructOutput],
  {
    cToken: string;
    cTokenInfo: IClearingHouseStructures.CollateralSettingsStructOutput;
  }
>;

export type CollateralSettingsUpdatedEventFilter = TypedEventFilter<CollateralSettingsUpdatedEvent>;

export type PausedUpdatedEvent = TypedEvent<[boolean], { paused: boolean }>;

export type PausedUpdatedEventFilter = TypedEventFilter<PausedUpdatedEvent>;

export type PoolSettingsUpdatedEvent = TypedEvent<
  [number, IClearingHouseStructures.PoolSettingsStructOutput],
  {
    poolId: number;
    settings: IClearingHouseStructures.PoolSettingsStructOutput;
  }
>;

export type PoolSettingsUpdatedEventFilter = TypedEventFilter<PoolSettingsUpdatedEvent>;

export type ProtocolSettingsUpdatedEvent = TypedEvent<
  [
    IClearingHouseStructures.LiquidationParamsStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
    removeLimitOrderFee: BigNumber;
    minimumOrderNotional: BigNumber;
    minRequiredMargin: BigNumber;
  }
>;

export type ProtocolSettingsUpdatedEventFilter = TypedEventFilter<ProtocolSettingsUpdatedEvent>;

export interface IClearingHouse extends BaseContract {
  contractName: 'IClearingHouse';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClearingHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __initialize_ClearingHouse(
      rageTradeFactoryAddress: string,
      defaultCollateralToken: string,
      defaultCollateralTokenOracle: string,
      insuranceFund: string,
      vQuote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccountAndAddMargin(
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        IClearingHouseStructures.CollateralDepositViewStructOutput[],
        IClearingHouseStructures.VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vQuoteBalance: BigNumber;
        collateralDeposits: IClearingHouseStructures.CollateralDepositViewStructOutput[];
        tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
      }
    >;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accountNetProfit: BigNumber }>;

    getAccountNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netPosition: BigNumber }>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IClearingHouseStructures.CollateralStructOutput]>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IClearingHouseStructures.PoolStructOutput]>;

    getTwapPrices(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<[string]>;

    isPoolIdAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateTokenPosition(
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        settlementToken: string;
        vQuote: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<[string]>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMargin(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: BigNumberish,
      minimumOrderNotional: BigNumberish,
      minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __initialize_ClearingHouse(
    rageTradeFactoryAddress: string,
    defaultCollateralToken: string,
    defaultCollateralTokenOracle: string,
    insuranceFund: string,
    vQuote: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccountAndAddMargin(
    collateralId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountInfo(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      IClearingHouseStructures.CollateralDepositViewStructOutput[],
      IClearingHouseStructures.VTokenPositionViewStructOutput[]
    ] & {
      owner: string;
      vQuoteBalance: BigNumber;
      collateralDeposits: IClearingHouseStructures.CollateralDepositViewStructOutput[];
      tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
    }
  >;

  getAccountMarketValueAndRequiredMargin(
    accountId: BigNumberish,
    isInitialMargin: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      accountMarketValue: BigNumber;
      requiredMargin: BigNumber;
    }
  >;

  getAccountNetProfit(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountNetTokenPosition(
    accountId: BigNumberish,
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralInfo(
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IClearingHouseStructures.CollateralStructOutput>;

  getPoolInfo(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IClearingHouseStructures.PoolStructOutput>;

  getTwapPrices(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      realPriceX128: BigNumber;
      virtualPriceX128: BigNumber;
    }
  >;

  governance(overrides?: CallOverrides): Promise<string>;

  isPoolIdAvailable(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidateLiquidityPositions(
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateTokenPosition(
    targetAccountId: BigNumberish,
    poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      IClearingHouseStructures.LiquidationParamsStructOutput,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      settlementToken: string;
      vQuote: string;
      liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
      minRequiredMargin: BigNumber;
      removeLimitOrderFee: BigNumber;
      minimumOrderNotional: BigNumber;
    }
  >;

  registerPool(
    poolInfo: IClearingHouseStructures.PoolStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLimitOrder(
    accountId: BigNumberish,
    poolId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToken(
    accountId: BigNumberish,
    poolId: BigNumberish,
    swapParams: IClearingHouseStructures.SwapParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  teamMultisig(overrides?: CallOverrides): Promise<string>;

  transferGovernance(
    newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTeamMultisig(
    newTeamMultisig: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollateralSettings(
    cToken: string,
    collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMargin(
    accountId: BigNumberish,
    collateralId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolSettings(
    poolId: BigNumberish,
    newSettings: IClearingHouseStructures.PoolSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProfit(
    accountId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtocolSettings(
    liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
    removeLimitOrderFee: BigNumberish,
    minimumOrderNotional: BigNumberish,
    minRequiredMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRangeOrder(
    accountId: BigNumberish,
    poolId: BigNumberish,
    liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFee(
    wrapperAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __initialize_ClearingHouse(
      rageTradeFactoryAddress: string,
      defaultCollateralToken: string,
      defaultCollateralTokenOracle: string,
      insuranceFund: string,
      vQuote: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createAccount(overrides?: CallOverrides): Promise<BigNumber>;

    createAccountAndAddMargin(
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        IClearingHouseStructures.CollateralDepositViewStructOutput[],
        IClearingHouseStructures.VTokenPositionViewStructOutput[]
      ] & {
        owner: string;
        vQuoteBalance: BigNumber;
        collateralDeposits: IClearingHouseStructures.CollateralDepositViewStructOutput[];
        tokenPositions: IClearingHouseStructures.VTokenPositionViewStructOutput[];
      }
    >;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountMarketValue: BigNumber;
        requiredMargin: BigNumber;
      }
    >;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.CollateralStructOutput>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IClearingHouseStructures.PoolStructOutput>;

    getTwapPrices(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        realPriceX128: BigNumber;
        virtualPriceX128: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<string>;

    isPoolIdAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateTokenPosition(
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        IClearingHouseStructures.LiquidationParamsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        settlementToken: string;
        vQuote: string;
        liquidationParams: IClearingHouseStructures.LiquidationParamsStructOutput;
        minRequiredMargin: BigNumber;
        removeLimitOrderFee: BigNumber;
        minimumOrderNotional: BigNumber;
      }
    >;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vQuoteAmountOut: BigNumber;
      }
    >;

    teamMultisig(overrides?: CallOverrides): Promise<string>;

    transferGovernance(
      newGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMargin(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: BigNumberish,
      minimumOrderNotional: BigNumberish,
      minRequiredMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vTokenAmountOut: BigNumber;
        vQuoteAmountOut: BigNumber;
      }
    >;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AccountCreated(address,uint256)'(
      ownerAddress?: string | null,
      accountId?: null
    ): AccountCreatedEventFilter;
    AccountCreated(
      ownerAddress?: string | null,
      accountId?: null
    ): AccountCreatedEventFilter;

    'CollateralSettingsUpdated(address,tuple)'(
      cToken?: null,
      cTokenInfo?: null
    ): CollateralSettingsUpdatedEventFilter;
    CollateralSettingsUpdated(
      cToken?: null,
      cTokenInfo?: null
    ): CollateralSettingsUpdatedEventFilter;

    'PausedUpdated(bool)'(paused?: null): PausedUpdatedEventFilter;
    PausedUpdated(paused?: null): PausedUpdatedEventFilter;

    'PoolSettingsUpdated(uint32,tuple)'(
      poolId?: null,
      settings?: null
    ): PoolSettingsUpdatedEventFilter;
    PoolSettingsUpdated(
      poolId?: null,
      settings?: null
    ): PoolSettingsUpdatedEventFilter;

    'ProtocolSettingsUpdated(tuple,uint256,uint256,uint256)'(
      liquidationParams?: null,
      removeLimitOrderFee?: null,
      minimumOrderNotional?: null,
      minRequiredMargin?: null
    ): ProtocolSettingsUpdatedEventFilter;
    ProtocolSettingsUpdated(
      liquidationParams?: null,
      removeLimitOrderFee?: null,
      minimumOrderNotional?: null,
      minRequiredMargin?: null
    ): ProtocolSettingsUpdatedEventFilter;
  };

  estimateGas: {
    __initialize_ClearingHouse(
      rageTradeFactoryAddress: string,
      defaultCollateralToken: string,
      defaultCollateralTokenOracle: string,
      insuranceFund: string,
      vQuote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccountAndAddMargin(
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTwapPrices(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    isPoolIdAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateTokenPosition(
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    teamMultisig(overrides?: CallOverrides): Promise<BigNumber>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMargin(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: BigNumberish,
      minimumOrderNotional: BigNumberish,
      minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __initialize_ClearingHouse(
      rageTradeFactoryAddress: string,
      defaultCollateralToken: string,
      defaultCollateralTokenOracle: string,
      insuranceFund: string,
      vQuote: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccountAndAddMargin(
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountInfo(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountMarketValueAndRequiredMargin(
      accountId: BigNumberish,
      isInitialMargin: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNetProfit(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNetTokenPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralInfo(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTwapPrices(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPoolIdAvailable(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateLiquidityPositions(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTokenPosition(
      targetAccountId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerPool(
      poolInfo: IClearingHouseStructures.PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLimitOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToken(
      accountId: BigNumberish,
      poolId: BigNumberish,
      swapParams: IClearingHouseStructures.SwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    teamMultisig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferGovernance(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTeamMultisig(
      newTeamMultisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateralSettings(
      cToken: string,
      collateralSettings: IClearingHouseStructures.CollateralSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMargin(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolSettings(
      poolId: BigNumberish,
      newSettings: IClearingHouseStructures.PoolSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProfit(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolSettings(
      liquidationParams: IClearingHouseStructures.LiquidationParamsStruct,
      removeLimitOrderFee: BigNumberish,
      minimumOrderNotional: BigNumberish,
      minRequiredMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRangeOrder(
      accountId: BigNumberish,
      poolId: BigNumberish,
      liquidityChangeParams: IClearingHouseStructures.LiquidityChangeParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFee(
      wrapperAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
